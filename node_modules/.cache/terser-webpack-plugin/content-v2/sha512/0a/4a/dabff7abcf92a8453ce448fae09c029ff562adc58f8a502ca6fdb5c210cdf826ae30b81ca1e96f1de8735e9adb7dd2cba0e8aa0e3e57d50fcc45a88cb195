{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{417:function(a,t,s){\"use strict\";s.r(t);var _=s(2),v=Object(_.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"java基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java基础\"}},[a._v(\"#\")]),a._v(\" Java基础\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"java概述\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java概述\"}},[a._v(\"#\")]),a._v(\" Java概述\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_1-java语言有哪些特点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-java语言有哪些特点\"}},[a._v(\"#\")]),a._v(\" 1.Java语言有哪些特点？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"面向对象（封装、继承、多态）\")]),a._v(\" \"),t(\"li\",[a._v(\"平台无关性（跨平台、一次编写，到处运行）\")]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"可靠性、安全性\")])]),a._v(\" \"),t(\"li\",[a._v(\"支持多线程\")]),a._v(\" \"),t(\"li\",[a._v(\"支持网络编程\")]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"编译与解释共存\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_2-java和c-有什么关系-它们有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-java和c-有什么关系-它们有什么区别\"}},[a._v(\"#\")]),a._v(\" 2.Java和C++有什么关系，它们有什么区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"面向对象\")]),a._v(\" \"),t(\"li\",[a._v(\"指针\")]),a._v(\" \"),t(\"li\",[a._v(\"继承\")]),a._v(\" \"),t(\"li\",[a._v(\"内存回收\")]),a._v(\" \"),t(\"li\",[a._v(\"操作符重载\")]),a._v(\" \"),t(\"li\",[a._v(\"字符串变量（String）\")]),a._v(\" \"),t(\"li\",[a._v(\"goto。。。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_3-jvm、jre和jdk的关系是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-jvm、jre和jdk的关系是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"3.JVM、JRE和JDK的关系是什么？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"JDK=JRE+开发工具集（例如javac编译工具等【将java代码编译成字节码】）\")]),a._v(\" \"),t(\"li\",[a._v(\"JRE=JVM【执行Java字节码】+JavaSE标准类库\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_4-什么是字节码-采用字节码的好处是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-什么是字节码-采用字节码的好处是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"4.什么是字节码？采用字节码的好处是什么？\")])],1),a._v(\" \"),t(\"p\",[a._v(\"编译器（javac）将Java源文件（.java）文件编译成字节码文件（.class）\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[a._v(\"编译生成固定格式的字节码（.class文件）供JVM使用\")])]),a._v(\" \"),t(\"li\",[a._v(\"一次编译，到处运行（实现了跨平台）\")]),a._v(\" \"),t(\"li\",[a._v(\"提高了代码执行的性能\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_5-oraclejdk和openjdk的区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-oraclejdk和openjdk的区别是什么\"}},[a._v(\"#\")]),a._v(\" 5.OracleJDK和OpenJDK的区别是什么？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"三年发布一次\")]),a._v(\" \"),t(\"li\",[a._v(\"不能完全开源\")]),a._v(\" \"),t(\"li\",[a._v(\"更稳定\")]),a._v(\" \"),t(\"li\",[a._v(\"性能更好\")]),a._v(\" \"),t(\"li\",[a._v(\"。。。\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"基础语法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基础语法\"}},[a._v(\"#\")]),a._v(\" 基础语法\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-java有哪些数据类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-java有哪些数据类型\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"6.Java有哪些数据类型？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"基本数据类型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"数值型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"整型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"字节型\"),t(\"code\",[a._v(\"byte\")]),a._v(\"1\")]),a._v(\" \"),t(\"li\",[a._v(\"短整型\"),t(\"code\",[a._v(\"short\")]),a._v(\"2\")]),a._v(\" \"),t(\"li\",[a._v(\"整型\"),t(\"code\",[a._v(\"int\")]),a._v(\"4\")]),a._v(\" \"),t(\"li\",[a._v(\"长整型\"),t(\"code\",[a._v(\"long\")]),a._v(\"8\")])])]),a._v(\" \"),t(\"li\",[a._v(\"浮点型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"单精度\"),t(\"code\",[a._v(\"float\")]),a._v(\"4\")]),a._v(\" \"),t(\"li\",[a._v(\"双精度\"),t(\"code\",[a._v(\"double\")]),a._v(\"8\")])])])])]),a._v(\" \"),t(\"li\",[a._v(\"字符型\"),t(\"code\",[a._v(\"char\")]),a._v(\"2\")]),a._v(\" \"),t(\"li\",[a._v(\"布尔型\"),t(\"code\",[a._v(\"Boolean\")]),a._v(\"1\")])])]),a._v(\" \"),t(\"li\",[a._v(\"引用数据类型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"类 \"),t(\"code\",[a._v(\"class\")])]),a._v(\" \"),t(\"li\",[a._v(\"接口 \"),t(\"code\",[a._v(\"interface\")])]),a._v(\" \"),t(\"li\",[a._v(\"数组 \"),t(\"code\",[a._v(\"[]\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_7-switch是否能作用在byte上-是否能作用在long上-是否能作用在string上\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-switch是否能作用在byte上-是否能作用在long上-是否能作用在string上\"}},[a._v(\"#\")]),a._v(\" 7.Switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"java5之前byte、short、char、int\")]),a._v(\" \"),t(\"li\",[a._v(\"java5开始+enum\")]),a._v(\" \"),t(\"li\",[a._v(\"java7开始+String\")]),a._v(\" \"),t(\"li\",[a._v(\"长整型(long)在目前所有的版本中都是不可以的。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_8-访问修饰符public、private、protected、以及不写-默认-时的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-访问修饰符public、private、protected、以及不写-默认-时的区别\"}},[a._v(\"#\")]),a._v(\" 8.访问修饰符public、private、protected、以及不写（默认）时的区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"private\")]),a._v(\"当前类\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"default\")]),a._v(\"当前类、同一包（+同一包子类）\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"protected\")]),a._v(\"当前类、同一包（+同一包子类）、不同包的子类\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"public\")]),a._v(\"当前类、同一包（+同一包子类）、不同包的子类、同一工程\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_9-break-continue-return的区别及作用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-break-continue-return的区别及作用\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"9.break，continue，return的区别及作用？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"break：结束当前循环体\")]),a._v(\" \"),t(\"li\",[a._v(\"continue：结束正在执行的循环体，进入下一个循环条件\")]),a._v(\" \"),t(\"li\",[a._v(\"return：结束当前的方法，直接返回\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_10-final、finally、finalize的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-final、finally、finalize的区别\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"10.final、finally、finalize的区别？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"final\\n\"),t(\"ul\",[t(\"li\",[a._v(\"修饰类、方法、变量\")])])]),a._v(\" \"),t(\"li\",[a._v(\"finally\\n\"),t(\"ul\",[t(\"li\",[a._v(\"异常处理的一部分，通常情况一定执行\")])])]),a._v(\" \"),t(\"li\",[a._v(\"finalize\\n\"),t(\"ul\",[t(\"li\",[a._v(\"是\"),t(\"code\",[a._v(\"java.lang.Object\")]),a._v(\"里定义的方法，在gc启动，垃圾回收时调用\")])])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"关键字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关键字\"}},[a._v(\"#\")]),a._v(\" 关键字\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_11-为什么要用static关键字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-为什么要用static关键字\"}},[a._v(\"#\")]),a._v(\" 11.为什么要用static关键字？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"只想为特定域分配单一存储空间，不考虑要创建多少对象或者说根本不创建任何对象，再就是我们想在没有创建对象的情况下也想调用方法\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_12-static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法\"}},[a._v(\"#\")]),a._v(' 12.\"static\"关键字是什么意思？Java中是否可以覆盖（override）一个private或者是static的方法？')]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问\")]),a._v(\" \"),t(\"li\",[a._v(\"不可以覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_13-是否可以在static环境中访问非static变量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-是否可以在static环境中访问非static变量\"}},[a._v(\"#\")]),a._v(\" 13.是否可以在static环境中访问非static变量？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不可以，非static变量可能还没有创建出来\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_14-static静态方法能不能引用非静态资源\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14-static静态方法能不能引用非静态资源\"}},[a._v(\"#\")]),a._v(\" 14.static静态方法能不能引用非静态资源？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不能，new的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_15-static静态方法里面能不能引用静态资源\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_15-static静态方法里面能不能引用静态资源\"}},[a._v(\"#\")]),a._v(\" 15.static静态方法里面能不能引用静态资源？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"可以\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_16-非静态方法里面能不能引用静态资源\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_16-非静态方法里面能不能引用静态资源\"}},[a._v(\"#\")]),a._v(\" 16.非静态方法里面能不能引用静态资源？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"可以\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_17-static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_17-static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么\"}},[a._v(\"#\")]),a._v(\" 17.Static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"基本上代码块分为三种：Static静态代码块、构造代码块、普通代码块\")]),a._v(\" \"),t(\"li\",[a._v(\"代码块执行顺序\"),t(\"strong\",[a._v(\"静态代码块——> 构造代码块 ——> 构造函数——> 普通代码块\")])]),a._v(\" \"),t(\"li\",[a._v(\"继承中代码块执行顺序：\"),t(\"strong\",[a._v(\"父类静态块——>子类静态块——>父类代码块——>父类构造器——>子类代码块——>子类构造器\")])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"面向对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向对象\"}},[a._v(\"#\")]),a._v(\" 面向对象\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_18-面向对象和面向过程的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_18-面向对象和面向过程的区别\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"18.面向对象和面向过程的区别？\")])],1),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"面向对象\")])]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"简单来说，面向对象的开发范式中，程序员将问题分解成一个一个步骤，对每个步骤进行相应的抽象，形成对象，通过不同对象之间的调用，组合解决问题。\")]),a._v(\" \"),t(\"p\",[a._v(\"就是说，在进行面向对象进行编程的时候，要把属性、行为等封装成对象，然后基于这些对象及对象的能力进行业务逻辑的实现。\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"优点：易维护、易复用\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"缺点：性能比面向过程低\")])])]),a._v(\" \"),t(\"ol\",{attrs:{start:\"2\"}},[t(\"li\",[a._v(\"面向过程\")])]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"面向过程(Procedure Oriented)是一种以过程为中心的编程思想，是一种自顶而下的编程模式。最典型的面向过程的编程语言就是C语言。\")]),a._v(\" \"),t(\"p\",[a._v(\"简单来说，面向过程的开发范式中，程序员需要把问题分解成一个一个步骤，每个步骤用函数实现，依次调用即可。\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"优点：性能比面向对象高\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"缺点：没有面向对象易维护、易复用\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_19-讲讲面向对象三大特征\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_19-讲讲面向对象三大特征\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"19.讲讲面向对象三大特征\")])],1),a._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[a._v(\"封装\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏\")]),a._v(\" \"),t(\"li\",[a._v(\"简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"继承\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\")]),a._v(\" \"),t(\"p\",[a._v(\"通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"多态\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"父类中定义的属性和方法被子类继承之后，具有不同的行为，或者说在各个子类中具有不同的含义的行为\")]),a._v(\" \"),t(\"li\",[a._v(\"多态机制使具有不同内部结构的对象可以共享相同的外部接口。\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_20-java语言是如何实现多态的\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_20-java语言是如何实现多态的\"}},[a._v(\"#\")]),a._v(\" 20.Java语言是如何实现多态的？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"编译时多态\\n\"),t(\"ul\",[t(\"li\",[a._v(\"重载。。\")])])]),a._v(\" \"),t(\"li\",[a._v(\"运行时多态\")])]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"我们通常所说的多态指的都是运行时多态，也就是编译时不确定究竟调用哪个具体方法，一直延迟到运行时才能确定。\")])]),a._v(\" \"),t(\"p\",[a._v(\"Java实现多态有 3 个必要条件：继承、重写和向上转型。只有满足这 3 个条件，开发人员才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而执行不同的行为。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"继承：在多态中必须存在有继承关系的子类和父类。\")]),a._v(\" \"),t(\"li\",[a._v(\"重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。\")]),a._v(\" \"),t(\"li\",[a._v(\"向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才既能可以调用父类的方法，又能调用子类的方法。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Parent\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"call\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"sout\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"im Parent\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Son\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Parent\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 1.有类继承或者接口实现\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"call\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 2.子类要重写父类的方法\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"sout\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"im Son\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Daughter\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Parent\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 1.有类继承或者接口实现\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"call\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 2.子类要重写父类的方法\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"sout\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"im Daughter\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Test\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Parent\")]),a._v(\" p \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Son\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//3.父类的引用指向子类的对象\")]),a._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Parent\")]),a._v(\" p1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Daughter\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//3.父类的引用指向子类的对象\")]),a._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"/**\\n *这样，就实现了多态，同样是Parent类的实例，p.call 调用的是Son类的实现、p1.call调用的是Daughter的实现。\\n *\\n *有人说，你自己定义的时候不就已经知道p是son，p1是Daughter了么。但是，有些时候你用到的对象并不都是自己声明的。\\n *\\n *比如Spring 中的IOC出来的对象，你在使用的时候就不知道他是谁，或者说你可以不用关心他是谁。根据具体情况而定。\\n */\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_21-重载-overload-和重写-override-的区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_21-重载-overload-和重写-override-的区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"21.重载（Overload）和重写（Override）的区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"重载\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"在同一个类中，同一个方法名，参数个数不同，参数类型不同，顺序不同\")]),a._v(\" \"),t(\"p\",[a._v(\"就是说在同一个类中，多个函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"重写\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"子类继承父类后，可以对分类中同名同参数的方法，进行覆盖操作\")]),a._v(\" \"),t(\"li\",[a._v(\"返回值范围小于等于父类，抛出异常范围小于等于父类，\"),t(\"strong\",[a._v(\"访问修饰符范围大于等于父类\")]),a._v(\"；如果父类方法访问修饰符为private则子类就不能重写该方法\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_22-重载的方法能否根据返回值类型进行区分\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_22-重载的方法能否根据返回值类型进行区分\"}},[a._v(\"#\")]),a._v(\" 22.重载的方法能否根据返回值类型进行区分？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"调用时不指定类型信息\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_23-构造器-constructor-是否可被重写-override\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_23-构造器-constructor-是否可被重写-override\"}},[a._v(\"#\")]),a._v(\" 23.构造器（constructor）是否可被重写（override）？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不能被继承，因此不能被重写\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_24-抽象类和接口的区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_24-抽象类和接口的区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"24.抽象类和接口的区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"内部方法细节\\n\"),t(\"ul\",[t(\"li\",[a._v(\"抽象类可以存在普通方法函数\")]),a._v(\" \"),t(\"li\",[a._v(\"接口中只能存在\"),t(\"code\",[a._v(\"public static final\")]),a._v(\"方法，不能写业务逻辑\")])])]),a._v(\" \"),t(\"li\",[a._v(\"成员变量类型\\n\"),t(\"ul\",[t(\"li\",[a._v(\"抽象类中成员变量可以是各种类型，\")]),a._v(\" \"),t(\"li\",[a._v(\"接口中的成员变量只能是\"),t(\"code\",[a._v(\"public static final\")])])])]),a._v(\" \"),t(\"li\",[a._v(\"继承、实现\\n\"),t(\"ul\",[t(\"li\",[a._v(\"抽象类只能继承一个\")]),a._v(\" \"),t(\"li\",[a._v(\"接口可以实现多个\")])])]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"接口中不能含有静态代码块和静态方法，而抽象类可以有静态代码块和静态方法；\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_25-抽象类能使用final修饰吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_25-抽象类能使用final修饰吗\"}},[a._v(\"#\")]),a._v(\" 25.抽象类能使用final修饰吗？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不能，因为需要用其他类进行继承\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_26-java创建对象有哪几种方式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_26-java创建对象有哪几种方式\"}},[a._v(\"#\")]),a._v(\" 26.java创建对象有哪几种方式？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"new 创建新对象\")]),a._v(\" \"),t(\"li\",[a._v(\"通过反射机制\")]),a._v(\" \"),t(\"li\",[a._v(\"采用 clone 机制\")]),a._v(\" \"),t(\"li\",[a._v(\"通过序列化机制\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_27-什么是不可变对象-好处是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_27-什么是不可变对象-好处是什么\"}},[a._v(\"#\")]),a._v(\" 27.什么是不可变对象?好处是什么?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"任何修改都会创建一个新的对象（如：String、Integer）\")]),a._v(\" \"),t(\"li\",[a._v(\"线程安全\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_28-值传递和引用传递的区别的什么-为什么说java中只有值传递\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_28-值传递和引用传递的区别的什么-为什么说java中只有值传递\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"28.值传递和引用传递的区别的什么？为什么说Java中只有值传递\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"值传递：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"引用传递：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的是引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。\")])])]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"举例：你有一把钥匙，当你的朋友想要去你家的时候，如果你\"),t(\"code\",[a._v(\"直接\")]),a._v(\"把你的钥匙给他了，这就是引用传递。\")]),a._v(\" \"),t(\"p\",[a._v(\"这种情况下，如果他对这把钥匙做了什么事情，比如他在钥匙上刻下了自己名字，那么这把钥匙还给你的时候，你自己的钥匙上也会多出他刻的名字。\")]),a._v(\" \"),t(\"p\",[a._v(\"你有一把钥匙，当你的朋友想要去你家的时候，你\"),t(\"code\",[a._v(\"复刻\")]),a._v(\"了一把新钥匙给他，自己的还在自己手里，这就是值传递。\")]),a._v(\" \"),t(\"p\",[a._v(\"这种情况下，他对这把钥匙做什么都不会影响你手里的这把钥匙。\")])]),a._v(\" \"),t(\"p\",[a._v(\"值传递和引用传递最大的区别是传递的过程中有没有复制出一个副本来，如果是传递副本，那就是值传递，否则就是引用传递。\")]),a._v(\" \"),t(\"p\",[a._v(\"在Java中，其实是通过值传递实现的参数传递，只不过对于Java对象的传递，传递的内容是对象的引用\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_29-能否创建一个包含可变对象的不可变对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_29-能否创建一个包含可变对象的不可变对象\"}},[a._v(\"#\")]),a._v(\" 29.能否创建一个包含可变对象的不可变对象?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"final Person[] persons = new Persion[]{}\")])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"对象相等判断\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象相等判断\"}},[a._v(\"#\")]),a._v(\" 对象相等判断\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_30-和equals区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_30-和equals区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"30.==和equals区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"==\")]),a._v(\"：如果是基本数据类型，比较是值，如果是引用类型，比较的是引用地址\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"equals\")]),a._v(\"：具体看各个类重写equals方法之后的比较逻辑，比如String类，虽然是引用类型，但是String类中重写了equals（）方法，方法内部比较的是字符串中的各个字符是否全部相等\\n\"),t(\"ul\",[t(\"li\",[a._v(\"没有重写，相当于“==”\")]),a._v(\" \"),t(\"li\",[a._v(\"重写后，一般比较对象内容\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_31-介绍下hashcode\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_31-介绍下hashcode\"}},[a._v(\"#\")]),a._v(\" 31.介绍下hashCode()？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"hashCode()->哈希值(散列码)->确定该对象在哈希表中的索引位置\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_32-为什么要有hashcode\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_32-为什么要有hashcode\"}},[a._v(\"#\")]),a._v(\" 32.为什么要有hashCode?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"比较对象是否重复\")]),a._v(\" \"),t(\"li\",[a._v(\"比较对象时候，大大减少了equals()的次数，相应就大大提高了执行速度\")]),a._v(\" \"),t(\"li\",[a._v(\"【先比较hashCode，在比较equals()】\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_33-hashcode-equals-两种方法是什么关系\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_33-hashcode-equals-两种方法是什么关系\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"33.hashCode(),equals()两种方法是什么关系\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"注意\\n\"),t(\"ul\",[t(\"li\",[a._v(\"若重写\"),t(\"code\",[a._v(\"equals()\")]),a._v(\"方法，必须重写\"),t(\"code\",[a._v(\"hashcode()\")]),a._v(\" 方法，确保\"),t(\"code\",[a._v(\"equals()\")]),a._v(\"方法判断结果为true的两个对象具备相等的\"),t(\"code\",[a._v(\"hashcode()\")]),a._v(\"方法返回值【如果两个对象相同，那么他们的hashcode应该相同】\")]),a._v(\" \"),t(\"li\",[a._v(\"如果两个对象不相同，他们的hashcode可能相同\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_34-为什么重写equals方法必须重写hashcode方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_34-为什么重写equals方法必须重写hashcode方法\"}},[a._v(\"#\")]),a._v(\" 34.为什么重写equals方法必须重写hashcode方法？\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"string相关\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string相关\"}},[a._v(\"#\")]),a._v(\" String相关\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_35-string-stringbuffer-stringbuilder的区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_35-string-stringbuffer-stringbuilder的区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"35.String,StringBuffer,StringBuilder的区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"String不可变的字符序列，会开辟一个新的地址修改，\"),t(\"strong\",[a._v(\"底层char[]\")])]),a._v(\" \"),t(\"li\",[a._v(\"StringBuffer直接在原地址修改，线程安全，\"),t(\"strong\",[a._v(\"效率不高, 底层char[]\")])]),a._v(\" \"),t(\"li\",[a._v(\"StringBuilder直接在原地址修改，线程不安全，\"),t(\"strong\",[a._v(\"效率高，底层char[]\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_36-string为什么要设计成不可变的\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_36-string为什么要设计成不可变的\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"36.String为什么要设计成不可变的\")])],1),a._v(\" \"),t(\"p\",[a._v(\"设计考虑、效率优化、安全性\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"便于实现字符串池（String pool）【缓存】\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"使多线程安全（写操作）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[a._v(\"避免安全问题（ 网络连接地址URL，文件路径path，反射机制 所需要的String参数\")]),a._v(\" \"),t(\"strong\",[a._v(\"）\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[a._v(\"加快字符串处理速度（创建对象时，就缓存了hashcode的值，不需要重新计算）\")]),a._v(\"【Hashcode缓存】\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"前面提到了的字符串池、hashcode缓存等，都是提升性能的提现。【性能】\")]),a._v(\" \"),t(\"p\",[a._v(\"因为字符串不可变，所以可以用字符串池缓存，可以大大节省堆内存。而且还可以提前对hashcode进行缓存，更加高效\")]),a._v(\" \"),t(\"p\",[a._v(\"由于字符串是应用最广泛的数据结构，提高字符串的性能对提高整个应用程序的总体性能有相当大的影响。\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_37-字符型常量和字符串常量的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_37-字符型常量和字符串常量的区别\"}},[a._v(\"#\")]),a._v(\" 37.字符型常量和字符串常量的区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"形式上：字符常量是单引号引起的一个字符，字符串常量是双引号引起的若干个字符；\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"含义上：字符常量相当于一个整型值( ASCII 值),可以参加表达式运算；字符串常量代表一个地址值(该字符串在内存中存放位置，相当于对象；\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"占内存上：字符常量只占2个字节；字符串常量占若干个字节(至少一个字符结束标志) (注意: char 在Java中占两个字节)。\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_38-什么是字符串常量池\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_38-什么是字符串常量池\"}},[a._v(\"#\")]),a._v(\" 38.什么是字符串常量池？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"避免字符的重复创建，其维护了一块特殊的内存空间\")]),a._v(\" \"),t(\"li\",[a._v(\"当需要使用字符串时，先去字符串池中查看该字符串是否已经存在，如果存在，则可以直接使用，如果不存在，初始化，并将该字符串放入字符串常量池中。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_39-string-str-aaa-与string-str-new-string-aaa-一样吗-new-string-aaa-创建了几个字符串对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_39-string-str-aaa-与string-str-new-string-aaa-一样吗-new-string-aaa-创建了几个字符串对象\"}},[a._v(\"#\")]),a._v(' 39.String str=\"aaa\"与String str=new String(\"aaa\")一样吗？new String(“aaa”);创建了几个字符串对象?')]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"使用\"),t(\"code\",[a._v('String b = new String(\"aaa\");')]),a._v(\"，程序会在堆内存中开辟一片新空间存放新对象，同时会 将”aaa”字符串放入常量池，相当于创建了两个对象，无论常量池中有没有”aaa”字符串，程序都会在堆内存中开辟一片新空间存放新对象。 （\"),t(\"strong\",[a._v('考虑常量池中是否有\"aaa\"')]),a._v(\"）\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_40-string是最基本的数据类型吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_40-string是最基本的数据类型吗\"}},[a._v(\"#\")]),a._v(\" 40.String是最基本的数据类型吗?\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_41-string有哪些特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_41-string有哪些特性\"}},[a._v(\"#\")]),a._v(\" 41.String有哪些特性?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不变性（只读）\")]),a._v(\" \"),t(\"li\",[a._v(\"常量池优化\")]),a._v(\" \"),t(\"li\",[a._v(\"final（不能被继承，提高安全性）\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_42-在使用-hashmap-的时候-用-string-做-key-有什么好处\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_42-在使用-hashmap-的时候-用-string-做-key-有什么好处\"}},[a._v(\"#\")]),a._v(\" 42. 在使用 HashMap 的时候，用 String 做 key 有什么好处？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"String 不可变，创建字符串时候（Hashcode值已经被缓存），不需要再次计算，相比于其他对象更快\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"包装类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包装类型\"}},[a._v(\"#\")]),a._v(\" 包装类型\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_43-包装类型是什么-基本类型和包装类型有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_43-包装类型是什么-基本类型和包装类型有什么区别\"}},[a._v(\"#\")]),a._v(\" 43. 包装类型是什么？基本类型和包装类型有什么区别？\")]),a._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[a._v(\"基本数据类型\")]),a._v(\" \"),t(\"th\",[a._v(\"包装类\")])])]),a._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[a._v(\"byte\")]),a._v(\" \"),t(\"td\",[a._v(\"Byte\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"boolean\")]),a._v(\" \"),t(\"td\",[a._v(\"Boolean\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"short\")]),a._v(\" \"),t(\"td\",[a._v(\"Short\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"char\")]),a._v(\" \"),t(\"td\",[a._v(\"Character\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"int\")]),a._v(\" \"),t(\"td\",[a._v(\"Integer\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"long\")]),a._v(\" \"),t(\"td\",[a._v(\"Long\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"float\")]),a._v(\" \"),t(\"td\",[a._v(\"Float\")])]),a._v(\" \"),t(\"tr\",[t(\"td\",[a._v(\"double\")]),a._v(\" \"),t(\"td\",[a._v(\"Double\")])])])]),a._v(\" \"),t(\"p\",[a._v(\"在这八个类名中，除了 Integer 和 Character 类以后，其它六个类的类名和基本数据类型一致，只是类名的第一个字母大写即可。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"包装类型可以为null，基本数据类型不可以\")]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"包装类型可用于泛型，而基本数据类型不可以\")])]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"基本类型比包装类型更高效\")])]),a._v(\" \"),t(\"li\",[a._v(\"自动装箱都是通过包装类的 \"),t(\"code\",[a._v(\"valueOf()\")]),a._v(\" 方法来实现的.自动拆箱都是通过包装类对象的 \"),t(\"code\",[a._v(\"xxxValue()\")]),a._v(\" 来实现的。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"基本数据类型<==>包装类\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//自动装箱 基本数据类型->包装类\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),a._v(\" age1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//自动拆箱 包装类->基本数据类型\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" age2 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\"age1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"基本数据类型、包装类==>String\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),a._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"valueOf\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//基本数据类型->String\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),a._v(\" s1 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"valueOf\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"age1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//包装类->String\")]),a._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"String==> 基本数据类型、包装类\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" age3 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"valueOf\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//String->基本数据类型\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//int age3 = Integer.parseIns(s);\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),a._v(\" age4 \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"parseInt\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//String->包装类\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//Integer age4 = Integer.valueOf(s); //String->包装类\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_44-解释一下自动装箱和自动拆箱\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_44-解释一下自动装箱和自动拆箱\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"44. 解释一下自动装箱和自动拆箱？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"自动装箱：基本数据类型--\\x3e对象，就是将基本数据类型自动转换成对应的包装类。\")]),a._v(\" \"),t(\"li\",[a._v(\"自动拆箱：对象 --\\x3e 基本数据类型，就是将包装类自动转换成对应的基本数据类型。\")])]),a._v(\" \"),t(\"div\",{staticClass:\"language-java extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Integer\")]),a._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"10\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//自动装箱\")]),a._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" b \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" i\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"     \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//自动拆箱\")]),a._v(\"\\n\")])])]),t(\"h3\",{attrs:{id:\"_45-int-和-integer-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_45-int-和-integer-有什么区别\"}},[a._v(\"#\")]),a._v(\" 45. int 和 Integer 有什么区别?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"数据类型\")]),a._v(\" \"),t(\"li\",[a._v(\"使用\")]),a._v(\" \"),t(\"li\",[t(\"strong\",[a._v(\"本质（\"),t(\"strong\",[a._v(\"Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值\")]),a._v(\"）\")])]),a._v(\" \"),t(\"li\",[a._v(\"默认值\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_46-两个new生成的integer变量的对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_46-两个new生成的integer变量的对比\"}},[a._v(\"#\")]),a._v(\" 46. 两个new生成的Integer变量的对比\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"永远不相等\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_47-integer变量和int变量的对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_47-integer变量和int变量的对比\"}},[a._v(\"#\")]),a._v(\" 47. Integer变量和int变量的对比\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_48-非new生成的integer变量和new-integer-生成变量-的对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_48-非new生成的integer变量和new-integer-生成变量-的对比\"}},[a._v(\"#\")]),a._v(\" 48. 非new生成的Integer变量和new Integer()生成变量 的对比\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"非new生成的对象指的是常量池中的对象\")]),a._v(\" \"),t(\"li\",[a._v(\"new生成的对象指的是堆空间的的对象\")]),a._v(\" \"),t(\"li\",[a._v(\"内存地址不同，结果为\"),t(\"strong\",[a._v(\"false\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_49-两个非new生成的integer对象的对比\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_49-两个非new生成的integer对象的对比\"}},[a._v(\"#\")]),a._v(\" 49. 两个非new生成的Integer对象的对比\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"常量池【-128~127】\")]),a._v(\" \"),t(\"li\",[a._v(\"超出范围，会在堆空间中新建一个对象\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"反射\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射\"}},[a._v(\"#\")]),a._v(\" 反射\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_50-什么是反射\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_50-什么是反射\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"50. 什么是反射\")])],1),a._v(\" \"),t(\"p\",[a._v(\"反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_51-反射机制的优缺点有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_51-反射机制的优缺点有哪些\"}},[a._v(\"#\")]),a._v(\" 51.反射机制的优缺点有哪些？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"优点：能够运行时动态获取类的实例，提高灵活性\")]),a._v(\" \"),t(\"li\",[a._v(\"缺点：性能较低，需要解析字节码，将内存中的对象进行解析\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_52-如何获取反射中的class对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_52-如何获取反射中的class对象\"}},[a._v(\"#\")]),a._v(\" 52. 如何获取反射中的Class对象？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v('Class.forName(\"类名路径\")')])]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"类名.class\")])]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"对象名.getClass()\")])]),a._v(\" \"),t(\"li\",[a._v(\"如果是基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_53-java反射api有几类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_53-java反射api有几类\"}},[a._v(\"#\")]),a._v(\" 53. Java反射API有几类？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"Class类\")]),a._v(\" \"),t(\"li\",[a._v(\"Field类\")]),a._v(\" \"),t(\"li\",[a._v(\"Method类\")]),a._v(\" \"),t(\"li\",[a._v(\"Constructor类\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_54-反射使用的步骤\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_54-反射使用的步骤\"}},[a._v(\"#\")]),a._v(\" 54. 反射使用的步骤\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"获取想要操作的类的Class对象（核心）\")]),a._v(\" \"),t(\"li\",[a._v(\"调用Class类中的方法（使用）\")]),a._v(\" \"),t(\"li\",[a._v(\"使用反射Api操作\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_55-为什么引入反射概念-反射机制的应用有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_55-为什么引入反射概念-反射机制的应用有哪些\"}},[a._v(\"#\")]),a._v(\" 55. 为什么引入反射概念？反射机制的应用有哪些？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"应用\\n\"),t(\"ul\",[t(\"li\",[a._v(\"通过外部类的全路径名创建对象，并使用、扩展\")]),a._v(\" \"),t(\"li\",[a._v(\"枚举出类的全部成员，包括构造函数、属性、方法\")]),a._v(\" \"),t(\"li\",[a._v(\"测试，使用反射api访问类的私有成员\")]),a._v(\" \"),t(\"li\",[a._v(\"jdbc数据库连接、Spring框架的使用\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_56-反射机制的原理是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_56-反射机制的原理是什么\"}},[a._v(\"#\")]),a._v(\" 56. 反射机制的原理是什么？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"反射获取类实例\")]),a._v(\" \"),t(\"li\",[a._v(\"根据Class对象实例获取Constructor对象\")]),a._v(\" \"),t(\"li\",[a._v(\"使用Constructor对象的newInstance()方法获取反射类对象\")]),a._v(\" \"),t(\"li\",[a._v(\"使用Class对象实例获取Method对象\")]),a._v(\" \"),t(\"li\",[a._v(\"接着调用invoke()方法\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"泛型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\"}},[a._v(\"#\")]),a._v(\" 泛型\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_57-java中的泛型是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_57-java中的泛型是什么\"}},[a._v(\"#\")]),a._v(\" 57. Java中的泛型是什么 ?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"将类型参数化，其在\"),t(\"strong\",[a._v(\"编译\")]),a._v(\"时才确定具体的参数\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_58-使用泛型的好处是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_58-使用泛型的好处是什么\"}},[a._v(\"#\")]),a._v(\" 58. 使用泛型的好处是什么?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"类型安全\")]),a._v(\" \"),t(\"li\",[a._v(\"消除强制类型转换\")]),a._v(\" \"),t(\"li\",[a._v(\"潜在的性能收益\")])]),a._v(\" \"),t(\"p\",[a._v(\"泛型最⼤的好处是可以提⾼代码的复⽤性。 以List接⼜为例，我们可以将String、 Integer等类型放⼊List中， 如不⽤泛型， 存放String类型要写⼀个List接口， 存放Integer要写另外⼀个List接口， 泛型可以很好的解决这个问题。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_59-java泛型的原理是什么-什么是类型擦除\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_59-java泛型的原理是什么-什么是类型擦除\"}},[a._v(\"#\")]),a._v(\" 59.Java泛型的原理是什么 ? 什么是类型擦除 ?\")]),a._v(\" \"),t(\"p\",[a._v(\"泛型是一种语法糖，泛型这种语法糖的基本原理是类型擦除。Java中的泛型基本上都是在编译器这个层次来实现的，也就是说：**泛型只存在于编译阶段，而不存在于运行阶段。**在编译后的 class 文件中，是没有泛型这个概念的。\")]),a._v(\" \"),t(\"p\",[a._v(\"类型擦除：使用泛型的时候加上的类型参数，编译器在编译的时候去掉类型参数。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_60-什么是泛型中的限定通配符和非限定通配符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_60-什么是泛型中的限定通配符和非限定通配符\"}},[a._v(\"#\")]),a._v(\" 60. 什么是泛型中的限定通配符和非限定通配符 ?\")]),a._v(\" \"),t(\"p\",[a._v(\"对类型进⾏限制， 泛型中有两种限定通配符：\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"限定通配符\\n\"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"<? extends T>\")]),a._v(\"即类型必须为T类型或者T子类 表示类型的下界\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"<? super T>\")]),a._v(\"即类型必须为T类型或者T的父类\")])])]),a._v(\" \"),t(\"li\",[a._v(\"非限定通配符\\n\"),t(\"ul\",[t(\"li\",[a._v(\"eg\"),t(\"code\",[a._v(\"List<?>\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_61-list-extends-t-和list-supere-t-之间有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_61-list-extends-t-和list-supere-t-之间有什么区别\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"61.List<? extends T>和List<? supere T> 之间有什么区别 \")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"List<? extends T>\")]),a._v(\"可以接受任何继承自T 的类型的List，\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"List<? super T>\")]),a._v(\"可以接受任何T的父类构成的List\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_62-可以把-list-string-传递给一个接受list-object-参数的方法吗-见上面说明\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_62-可以把-list-string-传递给一个接受list-object-参数的方法吗-见上面说明\"}},[a._v(\"#\")]),a._v(\" 62.可以把 \"),t(\"code\",[a._v(\"List<String>\")]),a._v(\"传递给一个接受\"),t(\"code\",[a._v(\"List<Object>\")]),a._v(\"参数的方法吗？(见上面说明)\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不可以，编译错误\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_63-判断arraylist-string-与arraylist-integer-是否相等\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_63-判断arraylist-string-与arraylist-integer-是否相等\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"63.判断\"),t(\"code\",[a._v(\"ArrayList<String>\")]),a._v(\"与\"),t(\"code\",[a._v(\"ArrayList<Integer>\")]),a._v(\"是否相等\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"相等，Class类型都是\"),t(\"code\",[a._v(\"ArrayList.Class\")])]),a._v(\" \"),t(\"li\",[a._v(\"泛型只在编译期\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"序列化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#序列化\"}},[a._v(\"#\")]),a._v(\" 序列化\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_64-java序列化与反序列化是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_64-java序列化与反序列化是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"64.Java序列化与反序列化是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"序列化：将对象转换为字节序列\")]),a._v(\" \"),t(\"p\",[a._v(\"就是说将对象转换为可传输格式的过程。 是一种数据的持久化手段。一般广泛应用于网络传输，RMI和RPC等场景中。\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"反序列化：将字节序列转换成对象\")]),a._v(\" \"),t(\"p\",[a._v(\"就是说将对象转换为可传输格式的过程。\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_65-为什么需要序列化与反序列化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_65-为什么需要序列化与反序列化\"}},[a._v(\"#\")]),a._v(\" 65.为什么需要序列化与反序列化？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"对内存中的对象进行持久化或网络传输\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_66-序列化实现的方式有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_66-序列化实现的方式有哪些\"}},[a._v(\"#\")]),a._v(\" 66.序列化实现的方式有哪些？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"实现\"),t(\"code\",[a._v(\"Serializable\")]),a._v(\"接口或者\"),t(\"code\",[a._v(\"Externalizable\")]),a._v(\"接口\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_67-什么是serialversionuid\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_67-什么是serialversionuid\"}},[a._v(\"#\")]),a._v(\" 67.什么是\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"表明类的不同版本间的兼容性（反序列化）\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_68-为什么还要显示指定serialversionuid的值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_68-为什么还要显示指定serialversionuid的值\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"68.为什么还要显示指定\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"的值\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"持久化（序列化、\"),t(\"strong\",[a._v(\"反序列化\")]),a._v(\"）\")])]),a._v(\" \"),t(\"p\",[a._v(\"但是， 虚拟机是否允许反序列化， 不仅取决于类路径和功能代码是否⼀致， ⼀个⾮常重要的⼀点是两个类的序列化 ID 是否⼀致， 即\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"要求⼀致。\")]),a._v(\" \"),t(\"p\",[a._v(\"在进⾏反序列化时， JVM会把传来的字节流中的\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"与本地相应实体类的\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"进⾏⽐较， 如果相同就认为是⼀致的， 可以进⾏反序列化， 否则就会出现序列化版本不⼀致的异常， 即是\"),t(\"code\",[a._v(\"InvalidCastException\")]),a._v(\"。\")]),a._v(\" \"),t(\"p\",[a._v(\"基于以上原理， 如果我们⼀个类实现了Serializable接口， 但是没有定义\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"， 然后序列化。 在序列化之后， 由于某些原因， 我们对该类做了变更， 重新启动应⽤后， 我们相对之前序列化过的对象进⾏反序列化的话就会报错\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_69-serialversionuid什么时候修改\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_69-serialversionuid什么时候修改\"}},[a._v(\"#\")]),a._v(\" 69.\"),t(\"code\",[a._v(\"serialVersionUID\")]),a._v(\"什么时候修改？\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_70-java序列化中如果有些字段不想进行序列化-怎么办\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_70-java序列化中如果有些字段不想进行序列化-怎么办\"}},[a._v(\"#\")]),a._v(\" 70.Java序列化中如果有些字段不想进行序列化，怎么办？\")]),a._v(\" \"),t(\"p\",[a._v(\"使用\"),t(\"code\",[a._v(\"transient\")]),a._v(\"修饰\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_71-静态变量会被序列化吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_71-静态变量会被序列化吗\"}},[a._v(\"#\")]),a._v(\" 71. 静态变量会被序列化吗?\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"不会，序列化是针对\"),t(\"strong\",[a._v(\"对象\")]),a._v(\"而言的，静态变量。。\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"异常\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常\"}},[a._v(\"#\")]),a._v(\" 异常\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_72-error-和-exception-区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_72-error-和-exception-区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"72. Error 和 Exception 区别是什么\")])],1),a._v(\" \"),t(\"p\",[a._v(\"⼆者都是 Java异常处理的重要⼦类， 各⾃都包含⼤量⼦类。均继承自Throwable类。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[t(\"code\",[a._v(\"Error\")]),a._v(\"非程序异常，指编译或者系统性错误\")]),a._v(\" \"),t(\"p\",[a._v(\"java运⾏环境内部错误或者硬件问题， 不能指望程序来处理这样的问题， 除了退出运⾏外别⽆选择， 它是Java虚拟机抛出的。\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[t(\"code\",[a._v(\"Exception\")]),a._v(\"程序异常，由程序内部产生，又分为运行时异常和非运行时异常、\")]),a._v(\" \"),t(\"p\",[a._v(\"表⽰程序需要捕捉、 需要处理的常， 是由与程序设计的不完善⽽出现的问题， 程序必须处理的问题。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"运行时异常：编译通过，运行时错误\")]),a._v(\" \"),t(\"li\",[a._v(\"非运行时异常：编译不通过，必须捕获或者抛出\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"常见异常\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"NullPointExceprion空指针异常\")]),a._v(\" \"),t(\"li\",[a._v(\"OutOfMemoryError内存异常\")]),a._v(\" \"),t(\"li\",[a._v(\"IOExceptionIO异常\")]),a._v(\" \"),t(\"li\",[a._v(\"FileNotFoundException文件找不到异常\")]),a._v(\" \"),t(\"li\",[a._v(\"ClassNotFoundException类找不到异常\")]),a._v(\" \"),t(\"li\",[a._v(\"ClassCastException类型转换异常\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"关键字特点\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"Try:可能发生的异常\")]),a._v(\" \"),t(\"li\",[a._v(\"Catch：异常类型，一旦其中一条捕获到异常，后面就不执行了,(先写子类异常，再写父类异常)\")]),a._v(\" \"),t(\"li\",[a._v(\"Finaly：通常情况下一定执行，如system.exit,等，前面终止的话finaly就不会执行了\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_73-非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_73-非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"73. 非受检查异常(运行时异常)和受检查异常(一般异常)区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"是否强制要求调用者必须处理此异常（强制要求，受检查异常；非强制要求，非受检查异常）\")]),a._v(\" \"),t(\"li\",[a._v(\"非受检查异常=运行时异常\")]),a._v(\" \"),t(\"li\",[a._v(\"受检查异常 = 非运行时异常（一般异常）\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_74-throw-和-throws-的区别是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_74-throw-和-throws-的区别是什么\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"74. throw 和 throws 的区别是什么\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"Throw （抛出异常）只能抛出一个具体的异常，将异常显示在当段代码\")]),a._v(\" \"),t(\"li\",[a._v(\"Throws（声明异常） 可以抛出多个异常，抛给调用者，用来声明一个方法可能抛出的所有异常信息\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_75-noclassdeffounderror-和-classnotfoundexception-区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_75-noclassdeffounderror-和-classnotfoundexception-区别\"}},[a._v(\"#\")]),a._v(\" 75. NoClassDefFoundError 和 ClassNotFoundException 区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"NoClassDefFoundError\")]),a._v(\"error类型异常\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"ClassNotFoundException\")]),a._v(\"exception类异常中的受检查异常（非运行时异常）\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_76-java常见异常有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_76-java常见异常有哪些\"}},[a._v(\"#\")]),a._v(\" 76. Java常见异常有哪些？\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_77-try-catch-finally-中哪个部分可以省略\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_77-try-catch-finally-中哪个部分可以省略\"}},[a._v(\"#\")]),a._v(\" 77. try-catch-finally 中哪个部分可以省略？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"catch\")])]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"try\")]),a._v(\"运行时异常\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"try+catch\")]),a._v(\"运行时异常+普通异常\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_78-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_78-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗\"}},[a._v(\"#\")]),a._v(\" 78. try-catch-finally 中，如果 catch 中 return 了， finally 还会执行吗？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"会执行，在return之前执行\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_79-jvm-是如何处理异常的\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_79-jvm-是如何处理异常的\"}},[a._v(\"#\")]),a._v(\" 79. JVM 是如何处理异常的？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"抛出异常：创建异常对象，并转交给JVM的过程\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"io\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#io\"}},[a._v(\"#\")]),a._v(\" IO\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_80-java的io-流分为几种\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_80-java的io-流分为几种\"}},[a._v(\"#\")]),a._v(\" 80. Java的IO 流分为几种？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"流的方向：输入流、输出流\")]),a._v(\" \"),t(\"li\",[a._v(\"实现方向：节点流、处理流\")]),a._v(\" \"),t(\"li\",[a._v(\"处理数据的单位：字节流、字符流\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_81-字节流如何转为字符流\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_81-字节流如何转为字符流\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"81. 字节流如何转为字符流？\")])],1),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[a._v(\"InputStreamReader\")]),a._v(\"是Reader的子类，将输入的字节流变为字符流，即将一个字节流的输入对象变为字符流的输入对象。\")]),a._v(\" \"),t(\"li\",[t(\"code\",[a._v(\"OutputStreamWriter\")]),a._v(\"是Writer的子类，将输出的字符流变为字节流，即将一个字符流的输出对象变为字节流输出对象。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_82-字符流与字节流的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_82-字符流与字节流的区别\"}},[a._v(\"#\")]),a._v(\" 82. 字符流与字节流的区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"字符流只适用于纯文本格式（效率大于字节流）\")]),a._v(\" \"),t(\"li\",[a._v(\"字节流适用于所有文件格式\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_83-什么是阻塞io-什么是非阻塞io\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_83-什么是阻塞io-什么是非阻塞io\"}},[a._v(\"#\")]),a._v(\" 83. 什么是阻塞IO？什么是非阻塞IO？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"IO读请求的两个阶段\\n\"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"查看数据是否就绪\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"没有就绪，一直等待，直到数据就绪（阻塞IO）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"没有就绪，返回一个标志信息，告知当前线程数据没有就绪（非阻塞IO）\")]),a._v(\" \"),t(\"p\",[a._v(\"阻塞与非阻塞描述的是调用者的\")]),a._v(\" \"),t(\"p\",[a._v(\"如A调用B：\")]),a._v(\" \"),t(\"p\",[a._v(\"如果是阻塞，A在发出调用后，要一直等待，等着B返回结果。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果是非阻塞，A在发出调用后，不需要等待，可以去做自己的事情。\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"进行数据拷贝\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"同步-异步-和-阻塞-非阻塞之间的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步-异步-和-阻塞-非阻塞之间的区别\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"同步，异步 和 阻塞，非阻塞之间的区别\")])],1),a._v(\" \"),t(\"p\",[a._v(\"同步、异步，是描述被调用方的。\")]),a._v(\" \"),t(\"p\",[a._v(\"阻塞，非阻塞，是描述调用方的。\")]),a._v(\" \"),t(\"p\",[a._v(\"同步不一定阻塞，异步也不一定非阻塞。没有必然关系。\")]),a._v(\" \"),t(\"p\",[a._v(\"举个简单的例子，老张烧水。 1 老张把水壶放到火上，一直在水壶旁等着水开。（同步阻塞） 2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 3 老张把响水壶放到火上，一直在水壶旁等着水开。（异步阻塞） 4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）\")]),a._v(\" \"),t(\"p\",[a._v(\"1和2的区别是，调用方在得到返回之前所做的事情不一行。 1和3的区别是，被调用方对于烧水的处理不一样。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_84-bio、nio、aio的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_84-bio、nio、aio的区别\"}},[a._v(\"#\")]),a._v(\" 84. BIO、NIO、AIO的区别？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"BIO：同步并阻塞\\n\"),t(\"ul\",[t(\"li\",[a._v(\"一个连接一个线程\")])])]),a._v(\" \"),t(\"li\",[a._v(\"NIO：同步并非阻塞\\n\"),t(\"ul\",[t(\"li\",[a._v(\"一个请求一个线程\")])])]),a._v(\" \"),t(\"li\",[a._v(\"AIO：异步并非阻塞\\n\"),t(\"ul\",[t(\"li\",[a._v(\"一个有效请求一个线程\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_85-java-io都有哪些设计模式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_85-java-io都有哪些设计模式\"}},[a._v(\"#\")]),a._v(\" 85. Java IO都有哪些设计模式？\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作\")]),a._v(\" \"),t(\"li\",[a._v(\"装饰器模式：一种动态地往一个类中添加新的行为的设计模式\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"补充\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#补充\"}},[a._v(\"#\")]),a._v(\" 补充\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_86-深拷贝和浅拷贝\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_86-深拷贝和浅拷贝\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"86.深拷贝和浅拷贝\")])],1),a._v(\" \"),t(\"p\",[a._v(\"深拷贝和浅拷贝就是指对象的拷贝，一个对象中存在两种类型的属性，一种是基本数据类型一种是实例对象的引用\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"浅拷贝是指，只会拷贝基本数据类型的值，以及实例对象的引用地址，并不会复制一份引用地址所指向的对象，也就是浅拷贝出来的对象，内部的类属性指向的是同一个对象\")]),a._v(\" \"),t(\"li\",[a._v(\"深拷贝是指，即会拷贝基本数据类型的值，也会针对实例对象的引用地址所指向的对象进行复制，深拷贝出来的对象，内部的属性指向的不是同一个对象\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_87-在java的异常处理机制中-什么时候应该抛出异常-什么时候捕获异常\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_87-在java的异常处理机制中-什么时候应该抛出异常-什么时候捕获异常\"}},[a._v(\"#\")]),a._v(\" \"),t(\"font\",{attrs:{color:\"00dd00\"}},[a._v(\"87.在java的异常处理机制中，什么时候应该抛出异常，什么时候捕获异常？\")])],1),a._v(\" \"),t(\"p\",[a._v(\"异常相当于一种提示，如果我们抛出异常，就相当于告诉上层方法，我抛了一个异常，我处理不了这个异常，交给你来处理，而对于上层方法来说，它也需要决定自己能不能处理这个异常，是否也需要交给它的上层。\\n所以我们在写一个方法时，我们需要考虑的就是，\"),t(\"strong\",[a._v(\"本方法能否合理的处理该异常，如果处理不了就继续向上抛出异常，包括本方法中在调用另外一个方法时，发现出现了异常，如果这个异常应该由自己来处理，那就捕获该异常并进行处理。\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_88-面向对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_88-面向对象\"}},[a._v(\"#\")]),a._v(\" 88.面向对象\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"面向对象中把某一类事物所共有的属性和行为抽象出来之后就形成了一个类，类的一个实际例子就叫对象\")]),a._v(\" \"),t(\"li\",[a._v(\"类是具有共同属性名称和行为的一组对象的抽象，而对象则是一个类的真实例子\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_89-为啥有时会出现-4-0-3-6-0-40000001-这种现象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_89-为啥有时会出现-4-0-3-6-0-40000001-这种现象\"}},[a._v(\"#\")]),a._v(\" 89.为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象？\")]),a._v(\" \"),t(\"p\",[t(\"strong\",[a._v(\"这种舍入误差的主要原因是：\")]),a._v(\" \"),t(\"strong\",[a._v(\"浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。\\n这就好像十进制无法精确地表示分数 1/3—样。\\n如果在数值计算中不允许有任何舍入误差， 就应该使用 BigDecimal类。\")])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}
/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "TypeScript4 文档",
  "description": "TypeScript4 最新官方文档翻译",
  "base": "/learn-ceiling/",
  "headTags": [],
  "pages": [
    {
      "title": "Hello VuePress",
      "frontmatter": {},
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-51fbd8f3",
      "path": "/"
    },
    {
      "title": "Redis",
      "frontmatter": {},
      "regularPath": "/handbook/02-Redis.html",
      "relativePath": "handbook/02-Redis.md",
      "key": "v-14cae3d6",
      "path": "/handbook/02-Redis.html",
      "headers": [
        {
          "level": 2,
          "title": "Redis概述",
          "slug": "redis概述"
        },
        {
          "level": 3,
          "title": "1.Redis是什么？简述它的优缺点？",
          "slug": "_1-redis是什么-简述它的优缺点"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_2-redis为什么这么快"
        },
        {
          "level": 3,
          "title": "3.Redis相比Memcached有哪些优势？",
          "slug": "_3-redis相比memcached有哪些优势"
        },
        {
          "level": 3,
          "title": "4.为什么要用redis做缓存？",
          "slug": "_4-为什么要用redis做缓存"
        },
        {
          "level": 3,
          "title": "5.为什么要用redis而不用map/guava做缓存？",
          "slug": "_5-为什么要用redis而不用map-guava做缓存"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_6-redis的常用场景有哪些"
        },
        {
          "level": 3,
          "title": "7.Redis的数据类型有哪些？",
          "slug": "_7-redis的数据类型有哪些"
        },
        {
          "level": 2,
          "title": "持久化",
          "slug": "持久化"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_8-redis持久化机制"
        },
        {
          "level": 3,
          "title": "9.如何选择合适的持久化方式",
          "slug": "_9-如何选择合适的持久化方式"
        },
        {
          "level": 3,
          "title": "10.Redis持久化数据和缓存怎么做扩容？",
          "slug": "_10-redis持久化数据和缓存怎么做扩容"
        },
        {
          "level": 2,
          "title": "过期键的删除策略、淘汰策略",
          "slug": "过期键的删除策略、淘汰策略"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_11-redis过期键的删除策略"
        },
        {
          "level": 3,
          "title": "12.Redis key的过期时间和永久有效分布怎么设置？",
          "slug": "_12-redis-key的过期时间和永久有效分布怎么设置"
        },
        {
          "level": 3,
          "title": "（缓存过多，内存是有限的，内存被占满了怎么办）",
          "slug": "_13-redis内存淘汰策略-缓存过多-内存是有限的-内存被占满了怎么办"
        },
        {
          "level": 2,
          "title": "缓存异常",
          "slug": "缓存异常"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_14-如何保证缓存与数据库双写时的数据一致性"
        },
        {
          "level": 3,
          "title": "15.先删除缓存，后更新数据库",
          "slug": "_15-先删除缓存-后更新数据库"
        },
        {
          "level": 3,
          "title": "16.先更新数据库，后删除缓存",
          "slug": "_16-先更新数据库-后删除缓存"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_17-什么是缓存击穿"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_18-什么是缓存穿透"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_19-什么是缓存雪崩"
        },
        {
          "level": 3,
          "title": "20.什么是缓存预热",
          "slug": "_20-什么是缓存预热"
        },
        {
          "level": 3,
          "title": "21.什么是缓存降级",
          "slug": "_21-什么是缓存降级"
        },
        {
          "level": 2,
          "title": "线程模型",
          "slug": "线程模型"
        },
        {
          "level": 3,
          "title": "22.Redis为何选择单线程？",
          "slug": "_22-redis为何选择单线程"
        },
        {
          "level": 3,
          "title": "23.Redis真的是单线程？",
          "slug": "_23-redis真的是单线程"
        },
        {
          "level": 3,
          "title": "24.Redis6.0为何引入多线程？",
          "slug": "_24-redis6-0为何引入多线程"
        },
        {
          "level": 3,
          "title": "25.Redis6.0采用多线程后，性能提升效果如何？",
          "slug": "_25-redis6-0采用多线程后-性能提升效果如何"
        },
        {
          "level": 3,
          "title": "26.介绍下Redis的线程模型",
          "slug": "_26-介绍下redis的线程模型"
        },
        {
          "level": 3,
          "title": "27.Redis 6.0 多线程的实现机制？",
          "slug": "_27-redis-6-0-多线程的实现机制"
        },
        {
          "level": 3,
          "title": "28.Redis6.0开启多线程后，是否会存在线程并发安全问题？",
          "slug": "_28-redis6-0开启多线程后-是否会存在线程并发安全问题"
        },
        {
          "level": 3,
          "title": "29.Redis6.0与Memcached多线程模型的对比",
          "slug": "_29-redis6-0与memcached多线程模型的对比"
        },
        {
          "level": 2,
          "title": "事务",
          "slug": "事务"
        },
        {
          "level": 3,
          "title": "30.Redis事务的概念",
          "slug": "_30-redis事务的概念"
        },
        {
          "level": 3,
          "title": "31.Redis事务的三个阶段",
          "slug": "_31-redis事务的三个阶段"
        },
        {
          "level": 3,
          "title": "32.Redis事务相关命令",
          "slug": "_32-redis事务相关命令"
        },
        {
          "level": 3,
          "title": "33.Redis事务支持隔离性吗？",
          "slug": "_33-redis事务支持隔离性吗"
        },
        {
          "level": 3,
          "title": "34.Redis为什么不支持事务回滚？",
          "slug": "_34-redis为什么不支持事务回滚"
        },
        {
          "level": 3,
          "title": "35.Redis事务其他实现",
          "slug": "_35-redis事务其他实现"
        },
        {
          "level": 2,
          "title": "主从、哨兵、集群",
          "slug": "主从、哨兵、集群"
        },
        {
          "level": 3,
          "title": "36.Redis常见使用方式有哪些？",
          "slug": "_36-redis常见使用方式有哪些"
        },
        {
          "level": 3,
          "title": "37.介绍下Redis的单副本",
          "slug": "_37-介绍下redis的单副本"
        },
        {
          "level": 3,
          "title": "38.介绍下Redis多副本（主从）",
          "slug": "_38-介绍下redis多副本-主从"
        },
        {
          "level": 3,
          "title": "39.介绍下Redis Sentinel（哨兵）",
          "slug": "_39-介绍下redis-sentinel-哨兵"
        },
        {
          "level": 3,
          "title": "40.介绍下Redis Cluster",
          "slug": "_40-介绍下redis-cluster"
        },
        {
          "level": 3,
          "title": "41.介绍下Redis自研",
          "slug": "_41-介绍下redis自研"
        },
        {
          "level": 3,
          "title": "42.Redis高可用方案具体怎么实施？",
          "slug": "_42-redis高可用方案具体怎么实施"
        },
        {
          "level": 3,
          "title": "43.了解主从复制原理吗？",
          "slug": "_43-了解主从复制原理吗"
        },
        {
          "level": 3,
          "title": "44.由于主从延迟导致读取到过期数据怎么处理？",
          "slug": "_44-由于主从延迟导致读取到过期数据怎么处理"
        },
        {
          "level": 3,
          "title": "45.主从复制的过程中，如果因为网络原因停止复制了会怎么样？",
          "slug": "_45-主从复制的过程中-如果因为网络原因停止复制了会怎么样"
        },
        {
          "level": 3,
          "title": "46.Redis主从架构数据会丢失吗，为什么？",
          "slug": "_46-redis主从架构数据会丢失吗-为什么"
        },
        {
          "level": 3,
          "title": "47.如何解决主从架构数据丢失的问题？",
          "slug": "_47-如何解决主从架构数据丢失的问题"
        },
        {
          "level": 3,
          "title": "48.Redis哨兵是怎么工作的？",
          "slug": "_48-redis哨兵是怎么工作的"
        },
        {
          "level": 3,
          "title": "49.故障转移时会从剩下的slave选举一个新的master，被选举为master的标准是什么？",
          "slug": "_49-故障转移时会从剩下的slave选举一个新的master-被选举为master的标准是什么"
        },
        {
          "level": 3,
          "title": "50.同步配置的时候其他哨兵根据什么更新自己的配置呢？",
          "slug": "_50-同步配置的时候其他哨兵根据什么更新自己的配置呢"
        },
        {
          "level": 3,
          "title": "51. 为什么Redis哨兵集群只有2个节点无法正常工作？",
          "slug": "_51-为什么redis哨兵集群只有2个节点无法正常工作"
        },
        {
          "level": 3,
          "title": "52.Redis cluster中是如何实现数据分布式的？这种方式有什么优点？",
          "slug": "_52-redis-cluster中是如何实现数据分布式的-这种方式有什么优点"
        },
        {
          "level": 3,
          "title": "53.Redis cluster节点间通信是什么机制？",
          "slug": "_53-redis-cluster节点间通信是什么机制"
        },
        {
          "level": 2,
          "title": "分布式问题",
          "slug": "分布式问题"
        },
        {
          "level": 3,
          "title": "54.什么是分布式锁？为什么用分布式锁？",
          "slug": "_54-什么是分布式锁-为什么用分布式锁"
        },
        {
          "level": 3,
          "title": "55.常见的分布式锁有哪些解决方案？",
          "slug": "_55-常见的分布式锁有哪些解决方案"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_56-redis实现分布式锁"
        },
        {
          "level": 3,
          "title": "57.了解RedLock吗？",
          "slug": "_57-了解redlock吗"
        },
        {
          "level": 3,
          "title": "58.RedLock的原理？",
          "slug": "_58-redlock的原理"
        },
        {
          "level": 2,
          "title": "其他",
          "slug": "其他"
        },
        {
          "level": 3,
          "title": "59.Redis如何做内存优化？",
          "slug": "_59-redis如何做内存优化"
        },
        {
          "level": 3,
          "title": "60.如果现在有个读超高并发的系统，用Redis来抗住大部分读请求，你会怎么设计？",
          "slug": "_60-如果现在有个读超高并发的系统-用redis来抗住大部分读请求-你会怎么设计"
        }
      ]
    },
    {
      "title": "Java-基础",
      "frontmatter": {
        "title": "Java-基础",
        "author": "lxy25122",
        "date": "2023-6-1"
      },
      "regularPath": "/handbook/01-Java%E5%9F%BA%E7%A1%80.html",
      "relativePath": "handbook/01-Java基础.md",
      "key": "v-c3dc4b56",
      "path": "/handbook/01-Java%E5%9F%BA%E7%A1%80.html",
      "headers": [
        {
          "level": 2,
          "title": "Java概述",
          "slug": "java概述"
        },
        {
          "level": 3,
          "title": "1.Java语言有哪些特点？",
          "slug": "_1-java语言有哪些特点"
        },
        {
          "level": 3,
          "title": "2.Java和C++有什么关系，它们有什么区别？",
          "slug": "_2-java和c-有什么关系-它们有什么区别"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_3-jvm、jre和jdk的关系是什么"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_4-什么是字节码-采用字节码的好处是什么"
        },
        {
          "level": 3,
          "title": "5.OracleJDK和OpenJDK的区别是什么？",
          "slug": "_5-oraclejdk和openjdk的区别是什么"
        },
        {
          "level": 2,
          "title": "基础语法",
          "slug": "基础语法"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_6-java有哪些数据类型"
        },
        {
          "level": 3,
          "title": "7.Switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？",
          "slug": "_7-switch是否能作用在byte上-是否能作用在long上-是否能作用在string上"
        },
        {
          "level": 3,
          "title": "8.访问修饰符public、private、protected、以及不写（默认）时的区别？",
          "slug": "_8-访问修饰符public、private、protected、以及不写-默认-时的区别"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_9-break-continue-return的区别及作用"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_10-final、finally、finalize的区别"
        },
        {
          "level": 2,
          "title": "关键字",
          "slug": "关键字"
        },
        {
          "level": 3,
          "title": "11.为什么要用static关键字？",
          "slug": "_11-为什么要用static关键字"
        },
        {
          "level": 3,
          "title": "12.\"static\"关键字是什么意思？Java中是否可以覆盖（override）一个private或者是static的方法？",
          "slug": "_12-static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法"
        },
        {
          "level": 3,
          "title": "13.是否可以在static环境中访问非static变量？",
          "slug": "_13-是否可以在static环境中访问非static变量"
        },
        {
          "level": 3,
          "title": "14.static静态方法能不能引用非静态资源？",
          "slug": "_14-static静态方法能不能引用非静态资源"
        },
        {
          "level": 3,
          "title": "15.static静态方法里面能不能引用静态资源？",
          "slug": "_15-static静态方法里面能不能引用静态资源"
        },
        {
          "level": 3,
          "title": "16.非静态方法里面能不能引用静态资源？",
          "slug": "_16-非静态方法里面能不能引用静态资源"
        },
        {
          "level": 3,
          "title": "17.Static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么？",
          "slug": "_17-static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么"
        },
        {
          "level": 2,
          "title": "面向对象",
          "slug": "面向对象"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_18-面向对象和面向过程的区别"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_19-讲讲面向对象三大特征"
        },
        {
          "level": 3,
          "title": "20.Java语言是如何实现多态的？",
          "slug": "_20-java语言是如何实现多态的"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_21-重载-overload-和重写-override-的区别是什么"
        },
        {
          "level": 3,
          "title": "22.重载的方法能否根据返回值类型进行区分？",
          "slug": "_22-重载的方法能否根据返回值类型进行区分"
        },
        {
          "level": 3,
          "title": "23.构造器（constructor）是否可被重写（override）？",
          "slug": "_23-构造器-constructor-是否可被重写-override"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_24-抽象类和接口的区别是什么"
        },
        {
          "level": 3,
          "title": "25.抽象类能使用final修饰吗？",
          "slug": "_25-抽象类能使用final修饰吗"
        },
        {
          "level": 3,
          "title": "26.java创建对象有哪几种方式？",
          "slug": "_26-java创建对象有哪几种方式"
        },
        {
          "level": 3,
          "title": "27.什么是不可变对象?好处是什么?",
          "slug": "_27-什么是不可变对象-好处是什么"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_28-值传递和引用传递的区别的什么-为什么说java中只有值传递"
        },
        {
          "level": 3,
          "title": "29.能否创建一个包含可变对象的不可变对象?",
          "slug": "_29-能否创建一个包含可变对象的不可变对象"
        },
        {
          "level": 2,
          "title": "对象相等判断",
          "slug": "对象相等判断"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_30-和equals区别是什么"
        },
        {
          "level": 3,
          "title": "31.介绍下hashCode()？",
          "slug": "_31-介绍下hashcode"
        },
        {
          "level": 3,
          "title": "32.为什么要有hashCode?",
          "slug": "_32-为什么要有hashcode"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_33-hashcode-equals-两种方法是什么关系"
        },
        {
          "level": 3,
          "title": "34.为什么重写equals方法必须重写hashcode方法？",
          "slug": "_34-为什么重写equals方法必须重写hashcode方法"
        },
        {
          "level": 2,
          "title": "String相关",
          "slug": "string相关"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_35-string-stringbuffer-stringbuilder的区别是什么"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_36-string为什么要设计成不可变的"
        },
        {
          "level": 3,
          "title": "37.字符型常量和字符串常量的区别？",
          "slug": "_37-字符型常量和字符串常量的区别"
        },
        {
          "level": 3,
          "title": "38.什么是字符串常量池？",
          "slug": "_38-什么是字符串常量池"
        },
        {
          "level": 3,
          "title": "39.String str=\"aaa\"与String str=new String(\"aaa\")一样吗？new String(“aaa”);创建了几个字符串对象?",
          "slug": "_39-string-str-aaa-与string-str-new-string-aaa-一样吗-new-string-aaa-创建了几个字符串对象"
        },
        {
          "level": 3,
          "title": "40.String是最基本的数据类型吗?",
          "slug": "_40-string是最基本的数据类型吗"
        },
        {
          "level": 3,
          "title": "41.String有哪些特性?",
          "slug": "_41-string有哪些特性"
        },
        {
          "level": 3,
          "title": "42. 在使用 HashMap 的时候，用 String 做 key 有什么好处？",
          "slug": "_42-在使用-hashmap-的时候-用-string-做-key-有什么好处"
        },
        {
          "level": 2,
          "title": "包装类型",
          "slug": "包装类型"
        },
        {
          "level": 3,
          "title": "43. 包装类型是什么？基本类型和包装类型有什么区别？",
          "slug": "_43-包装类型是什么-基本类型和包装类型有什么区别"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_44-解释一下自动装箱和自动拆箱"
        },
        {
          "level": 3,
          "title": "45. int 和 Integer 有什么区别?",
          "slug": "_45-int-和-integer-有什么区别"
        },
        {
          "level": 3,
          "title": "46. 两个new生成的Integer变量的对比",
          "slug": "_46-两个new生成的integer变量的对比"
        },
        {
          "level": 3,
          "title": "47. Integer变量和int变量的对比",
          "slug": "_47-integer变量和int变量的对比"
        },
        {
          "level": 3,
          "title": "48. 非new生成的Integer变量和new Integer()生成变量 的对比",
          "slug": "_48-非new生成的integer变量和new-integer-生成变量-的对比"
        },
        {
          "level": 3,
          "title": "49. 两个非new生成的Integer对象的对比",
          "slug": "_49-两个非new生成的integer对象的对比"
        },
        {
          "level": 2,
          "title": "反射",
          "slug": "反射"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_50-什么是反射"
        },
        {
          "level": 3,
          "title": "51.反射机制的优缺点有哪些？",
          "slug": "_51-反射机制的优缺点有哪些"
        },
        {
          "level": 3,
          "title": "52. 如何获取反射中的Class对象？",
          "slug": "_52-如何获取反射中的class对象"
        },
        {
          "level": 3,
          "title": "53. Java反射API有几类？",
          "slug": "_53-java反射api有几类"
        },
        {
          "level": 3,
          "title": "54. 反射使用的步骤",
          "slug": "_54-反射使用的步骤"
        },
        {
          "level": 3,
          "title": "55. 为什么引入反射概念？反射机制的应用有哪些？",
          "slug": "_55-为什么引入反射概念-反射机制的应用有哪些"
        },
        {
          "level": 3,
          "title": "56. 反射机制的原理是什么？",
          "slug": "_56-反射机制的原理是什么"
        },
        {
          "level": 2,
          "title": "泛型",
          "slug": "泛型"
        },
        {
          "level": 3,
          "title": "57. Java中的泛型是什么 ?",
          "slug": "_57-java中的泛型是什么"
        },
        {
          "level": 3,
          "title": "58. 使用泛型的好处是什么?",
          "slug": "_58-使用泛型的好处是什么"
        },
        {
          "level": 3,
          "title": "59.Java泛型的原理是什么 ? 什么是类型擦除 ?",
          "slug": "_59-java泛型的原理是什么-什么是类型擦除"
        },
        {
          "level": 3,
          "title": "60. 什么是泛型中的限定通配符和非限定通配符 ?",
          "slug": "_60-什么是泛型中的限定通配符和非限定通配符"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_61-list-extends-t-和list-supere-t-之间有什么区别"
        },
        {
          "level": 3,
          "title": "62.可以把 List<String>传递给一个接受 List<Object>参数的方法吗？(见上面说明)",
          "slug": "_62-可以把-list-string-传递给一个接受list-object-参数的方法吗-见上面说明"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_63-判断arraylist-string-与arraylist-integer-是否相等"
        },
        {
          "level": 2,
          "title": "序列化",
          "slug": "序列化"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_64-java序列化与反序列化是什么"
        },
        {
          "level": 3,
          "title": "65.为什么需要序列化与反序列化？",
          "slug": "_65-为什么需要序列化与反序列化"
        },
        {
          "level": 3,
          "title": "66.序列化实现的方式有哪些？",
          "slug": "_66-序列化实现的方式有哪些"
        },
        {
          "level": 3,
          "title": "67.什么是serialVersionUID？",
          "slug": "_67-什么是serialversionuid"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_68-为什么还要显示指定serialversionuid的值"
        },
        {
          "level": 3,
          "title": "69.serialVersionUID什么时候修改？",
          "slug": "_69-serialversionuid什么时候修改"
        },
        {
          "level": 3,
          "title": "70.Java序列化中如果有些字段不想进行序列化，怎么办？",
          "slug": "_70-java序列化中如果有些字段不想进行序列化-怎么办"
        },
        {
          "level": 3,
          "title": "71. 静态变量会被序列化吗?",
          "slug": "_71-静态变量会被序列化吗"
        },
        {
          "level": 2,
          "title": "异常",
          "slug": "异常"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_72-error-和-exception-区别是什么"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_73-非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_74-throw-和-throws-的区别是什么"
        },
        {
          "level": 3,
          "title": "75. NoClassDefFoundError 和 ClassNotFoundException 区别？",
          "slug": "_75-noclassdeffounderror-和-classnotfoundexception-区别"
        },
        {
          "level": 3,
          "title": "76. Java常见异常有哪些？",
          "slug": "_76-java常见异常有哪些"
        },
        {
          "level": 3,
          "title": "77. try-catch-finally 中哪个部分可以省略？",
          "slug": "_77-try-catch-finally-中哪个部分可以省略"
        },
        {
          "level": 3,
          "title": "78. try-catch-finally 中，如果 catch 中 return 了， finally 还会执行吗？",
          "slug": "_78-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"
        },
        {
          "level": 3,
          "title": "79. JVM 是如何处理异常的？",
          "slug": "_79-jvm-是如何处理异常的"
        },
        {
          "level": 2,
          "title": "IO",
          "slug": "io"
        },
        {
          "level": 3,
          "title": "80. Java的IO 流分为几种？",
          "slug": "_80-java的io-流分为几种"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_81-字节流如何转为字符流"
        },
        {
          "level": 3,
          "title": "82. 字符流与字节流的区别？",
          "slug": "_82-字符流与字节流的区别"
        },
        {
          "level": 3,
          "title": "83. 什么是阻塞IO？什么是非阻塞IO？",
          "slug": "_83-什么是阻塞io-什么是非阻塞io"
        },
        {
          "level": 3,
          "title": "",
          "slug": "同步-异步-和-阻塞-非阻塞之间的区别"
        },
        {
          "level": 3,
          "title": "84. BIO、NIO、AIO的区别？",
          "slug": "_84-bio、nio、aio的区别"
        },
        {
          "level": 3,
          "title": "85. Java IO都有哪些设计模式？",
          "slug": "_85-java-io都有哪些设计模式"
        },
        {
          "level": 2,
          "title": "补充",
          "slug": "补充"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_86-深拷贝和浅拷贝"
        },
        {
          "level": 3,
          "title": "",
          "slug": "_87-在java的异常处理机制中-什么时候应该抛出异常-什么时候捕获异常"
        },
        {
          "level": 3,
          "title": "88.面向对象",
          "slug": "_88-面向对象"
        },
        {
          "level": 3,
          "title": "89.为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象？",
          "slug": "_89-为啥有时会出现-4-0-3-6-0-40000001-这种现象"
        }
      ]
    },
    {
      "frontmatter": {
        "layout": "Tags",
        "title": "Tags"
      },
      "regularPath": "/tag/",
      "key": "v-b1564aac",
      "path": "/tag/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterKey",
        "title": "Categories"
      },
      "regularPath": "/categories/",
      "key": "v-ef9325c4",
      "path": "/categories/"
    },
    {
      "frontmatter": {
        "layout": "TimeLines",
        "title": "Timeline"
      },
      "regularPath": "/timeline/",
      "key": "v-6319eb4e",
      "path": "/timeline/"
    }
  ],
  "themeConfig": {
    "subSidebar": true,
    "nav": [
      {
        "text": "首页",
        "link": "/"
      },
      {
        "text": "冴羽的 JavaScript 博客",
        "items": [
          {
            "text": "Github",
            "link": "https://github.com/mqyqingfeng"
          },
          {
            "text": "掘金",
            "link": "https://juejin.cn/user/712139234359182/posts"
          }
        ]
      }
    ],
    "sidebar": [
      {
        "title": "欢迎学习",
        "path": "/",
        "collapsable": false,
        "children": [
          {
            "title": "学前必读",
            "path": "/"
          }
        ]
      },
      {
        "title": "基础学习",
        "path": "/handbook/01-Java基础",
        "collapsable": false,
        "children": [
          {
            "title": "Java基础",
            "path": "/handbook/01-Java基础"
          },
          {
            "title": "Redis",
            "path": "/handbook/02-Redis"
          }
        ]
      }
    ]
  },
  "locales": {
    "/": {
      "lang": "zh-CN",
      "path": "/"
    }
  }
}
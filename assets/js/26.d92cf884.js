(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{337:function(v,_,t){"use strict";t.r(_);var a=t(1),l=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"创建者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建者模式"}},[v._v("#")]),v._v(" 创建者模式")]),v._v(" "),_("p",[v._v("创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。")]),v._v(" "),_("p",[v._v("这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。")]),v._v(" "),_("p",[v._v("创建型模式分为：")]),v._v(" "),_("ul",[_("li",[v._v("单例模式")]),v._v(" "),_("li",[v._v("工厂方法模式")]),v._v(" "),_("li",[v._v("抽象工程模式")]),v._v(" "),_("li",[v._v("原型模式")]),v._v(" "),_("li",[v._v("建造者模式")])]),v._v(" "),_("h2",{attrs:{id:"单例模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[v._v("#")]),v._v(" 单例模式")]),v._v(" "),_("p",[v._v("单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。")]),v._v(" "),_("p",[v._v("这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。")]),v._v(" "),_("p",[v._v("单例模式的主要有以下角色：")]),v._v(" "),_("ul",[_("li",[v._v("单例类。只能创建一个实例的类")]),v._v(" "),_("li",[v._v("访问类。使用单例类")])]),v._v(" "),_("p",[v._v("单例设计模式分类两种：")]),v._v(" "),_("p",[v._v("​\t饿汉式：类加载就会导致该单实例对象被创建")]),v._v(" "),_("p",[v._v("​\t懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建")])])}),[],!1,null,null,null);_.default=l.exports}}]);
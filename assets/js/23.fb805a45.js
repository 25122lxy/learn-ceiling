(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{333:function(a,t,r){"use strict";r.r(t);var s=r(1),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"c-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-基础"}},[a._v("#")]),a._v(" C++基础")]),a._v(" "),t("h2",{attrs:{id:"符合数据库类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#符合数据库类型"}},[a._v("#")]),a._v(" 符合数据库类型")]),a._v(" "),t("h3",{attrs:{id:"指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[a._v("#")]),a._v(" 指针")]),a._v(" "),t("p",[a._v("基本语法："),t("code",[a._v("类型* 指针变量")]),a._v("，相比一般的变量声明，看起来指针只是多了一个星号“*”而已")]),a._v(" "),t("p",[a._v("指针的本质，其实就是一个整数表示的内存地址，它本身在内存中所占大小跟系统环境有关，而跟指向的数据类型无关。64位编译环境中，指针统一占8个字节；若是32位系统则占4字节。")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    int* p1;      // p1是指向int类型数据的指针\n    long* p2;     // p2是指向long类型数据的指针\n")])])]),t("h4",{attrs:{id:"用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[a._v("#")]),a._v(" 用法")]),a._v(" "),t("p",[a._v("1、获取对象地址给指针赋值")]),a._v(" "),t("p",[a._v("指针保存的是数据对象的内存地址，所以可以用地址给指针赋值；获取对象地址的方式是使用“取地址操作符”（&）。")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    int a = 12;\n    int b = 100;\n    int* p = &b;           // p是指向b的指针\n")])])]),t("p",[a._v("2、通过指针访问对象")]),a._v(" "),t("p",[a._v("指针指向数据对象后，可以通过指针来访问对象。访问方式是使用“解引用操作符”（*）")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    int a = 12;\n    int b = 100;  \n    int* p;\n\n    p = &a;    // p是指向a的指针\n    cout << "p指向的内存中，存放的值为：" << *p << endl;\n    //在这里由于p指向了a，所以*p可以等同于a。\n')])])]),t("h4",{attrs:{id:"。。。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#。。。"}},[a._v("#")]),a._v(" 。。。")]),a._v(" "),t("h4",{attrs:{id:"指针和数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针和数组"}},[a._v("#")]),a._v(" 指针和数组")]),a._v(" "),t("p",[a._v("1、数组名")]),a._v(" "),t("p",[a._v("用到数组名时，编译器一般都会把它转换成指针，这个指针就指向数组的第一个元素。所以我们也可以用数组名来给指针赋值。")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('  int arr[] = { 1,2,3,4,5 };\n  cout << "arr = " << arr << endl;//指向数组的第一个元素    \n  cout << "&arr[0] = " << &arr[0] << endl;\n \n  int* pia = arr;      // 可以直接用数组名给指针赋值\n  \n  cout << "*pia = " << *pia << endl;    // 指针指向的数据，就是arr[0]，*pia 等于 arr[0]\n  cout << "pia = " << pia << endl;    // pia就是arr[0]的地址，pia 等于 &arr[0] 等于 arr\n')])])]),t("p",[a._v("。。。")]),a._v(" "),t("h3",{attrs:{id:"引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[a._v("#")]),a._v(" 引用")]),a._v(" "),t("p",[a._v("我们可以在C++中为数据对象另外起一个名字，这叫做“引用”（reference）。")]),a._v(" "),t("p",[a._v("在做声明时，我们可以在变量名前加上“&”符号，表示它是另一个变量的引用。引用必须被初始化。")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("int a = 20;\nint& ref = a; //ref是a的引用(别名、快捷方式)。操作ref就相当于操作a\n")])])]),t("p",[a._v("引用本质上就是一个“别名”，它本身不是数据对象，所以本身不会存储数据，而是和初始值“绑定”（bind）在一起，绑定之后就不能再绑定别的对象了。")]),a._v(" "),t("p",[a._v("定义了应用之后，对引用做的所有操作，就像直接操作绑定的原始变量一样。所以，引用也是一种间接访问数据对象的方式。")]),a._v(" "),t("h1",{attrs:{id:"画图理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#画图理解"}},[a._v("#")]),a._v(" 画图理解")])])}),[],!1,null,null,null);t.default=e.exports}}]);
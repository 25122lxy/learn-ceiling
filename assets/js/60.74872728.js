(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{373:function(s,a,t){"use strict";t.r(a);var e=t(1),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"sql语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语法"}},[s._v("#")]),s._v(" SQL语法")]),s._v(" "),a("h2",{attrs:{id:"mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[s._v("#")]),s._v(" Mysql")]),s._v(" "),a("p",[a("strong",[s._v("SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...")])]),s._v(" "),a("h3",{attrs:{id:"_1-基础语法-查询-全表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础语法-查询-全表查询"}},[s._v("#")]),s._v(" 1.基础语法 - 查询 - 全表查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_2-基础语法-查询-选择查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基础语法-查询-选择查询"}},[s._v("#")]),s._v(" 2.基础语法 - 查询 - 选择查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_3-基础语法-查询-别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础语法-查询-别名"}},[s._v("#")]),s._v(" 3.基础语法 - 查询 - 别名")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" username "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户名'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" username "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" 用户名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" username "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户名'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_4-基础语法-查询-常量和运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-基础语法-查询-常量和运算"}},[s._v("#")]),s._v(" 4.基础语法 - 查询 - 常量和运算")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" double_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_5、基础语法-条件查询-where"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、基础语法-条件查询-where"}},[s._v("#")]),s._v(" 5、基础语法 - 条件查询 - where")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_6、基础语法-条件查询-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、基础语法-条件查询-运算符"}},[s._v("#")]),s._v(" 6、基础语法 - 条件查询 - 运算符")]),s._v(" "),a("p",[s._v("运算符是 SQL 中用于在条件查询中进行条件判断的特殊符号，比如 "),a("code",[s._v("=")]),s._v("、 "),a("code",[s._v("!=")]),s._v("、"),a("code",[s._v("<")]),s._v("、"),a("code",[s._v(">")]),s._v(" 等")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" employees "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_7-基于语法-条件查询-空值✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-基于语法-条件查询-空值✔"}},[s._v("#")]),s._v(" 7. 基于语法-条件查询-空值✔")]),s._v(" "),a("ul",[a("li",[s._v('空值表示该字段的值是未知的、不存在的或者没有被填写的。在SQL查询中，我们可以使用 "IS NULL" 和 "IS NOT NULL" 来判断字段是否为空值或非空值。')])]),s._v(" "),a("p",[s._v("eg：从名为 student 的数据表中选择出所有学生的姓名（name）、年龄（age）和成绩（score），要求学生年龄不为空值。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_8、基础语法-条件查询-模糊查询✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、基础语法-条件查询-模糊查询✔"}},[s._v("#")]),s._v(" 8、基础语法-条件查询-模糊查询✔")]),s._v(" "),a("ul",[a("li",[s._v("百分号（%）：表示任意长度的任意字符序列。")]),s._v(" "),a("li",[s._v("下划线（_）：表示任意单个字符。")])]),s._v(" "),a("p",[s._v("eg：从名为 "),a("code",[s._v("student")]),s._v(' 的数据表中选择出所有学生的姓名（name）和成绩（score），要求姓名（name）不包含 "李" 这个字。')]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%李%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_9、基础语法-条件查询-逻辑运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、基础语法-条件查询-逻辑运算"}},[s._v("#")]),s._v(" 9、基础语法-条件查询-逻辑运算")]),s._v(" "),a("p",[s._v("在逻辑运算中，常用的运算符有：")]),s._v(" "),a("ul",[a("li",[s._v("AND：表示逻辑与，要求同时满足多个条件，才返回 true。")]),s._v(" "),a("li",[s._v("OR：表示逻辑或，要求满足其中任意一个条件，就返回 true。")]),s._v(" "),a("li",[s._v("NOT：表示逻辑非，用于否定一个条件（本来是 true，用了 not 后转为 false）")])]),s._v(" "),a("h3",{attrs:{id:"_10、基础语法-去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、基础语法-去重"}},[s._v("#")]),s._v(" 10、基础语法-去重")]),s._v(" "),a("p",[s._v("在 SQL 中，我们可以使用 "),a("code",[s._v("DISTINCT")]),s._v(" 关键字来实现去重操作。")]),s._v(" "),a("h3",{attrs:{id:"_11-基础语法-排序✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-基础语法-排序✔"}},[s._v("#")]),s._v(" 11.基础语法-排序✔")]),s._v(" "),a("ul",[a("li",[s._v("在 SQL 中，我们可以使用 "),a("code",[s._v("ORDER BY")]),s._v(" 关键字来实现排序操作。"),a("code",[s._v("ORDER BY")]),s._v(" 后面跟上需要排序的字段，可以选择升序（ASC）或降序（DESC）排列。默认为升序（ASC）")])]),s._v(" "),a("p",[s._v("eg：从名为 "),a("code",[s._v("student")]),s._v(" 的数据表中选择出学生姓名（name）、年龄（age）和成绩（score），首先按照成绩从大到小排序，如果成绩相同，则按照年龄从小到大排序。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_12-基础语法-截断和偏移-limit✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-基础语法-截断和偏移-limit✔"}},[s._v("#")]),s._v(" 12.基础语法 - 截断和偏移-limit✔")]),s._v(" "),a("p",[s._v("在 SQL 中，我们使用 "),a("code",[s._v("LIMIT")]),s._v(" 关键字来实现数据的截断和偏移。")]),s._v(" "),a("p",[s._v("eg：从名为 "),a("code",[s._v("student")]),s._v(" 的数据表中选择学生姓名（name）和年龄（age），按照年龄从小到大排序，从第 2 条数据开始、截取 3 个学生的信息。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("补充")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" studnet "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#从第3条开始查，查询10行数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查询前5行数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#从第7条开始查，查询3条数据")]),s._v("\n")])])]),a("h3",{attrs:{id:"_13-基础语法-条件分支✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-基础语法-条件分支✔"}},[s._v("#")]),s._v(" 13.基础语法-条件分支✔")]),s._v(" "),a("p",[s._v("条件分支 "),a("code",[s._v("case when")]),s._v(" 是 SQL 中用于根据条件进行分支处理的语法。它类似于其他编程语言中的 if else 条件判断语句，允许我们根据不同的条件选择不同的结果返回。")]),s._v(" "),a("p",[a("code",[s._v("case when")]),s._v(" 支持同时指定多个分支，示例语法如下：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" 结果"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\t   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" 结果"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\t   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\t   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" 其他结果 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v("\n")])])]),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v('（年龄）。请你编写一个 SQL 查询，将学生按照年龄划分为三个年龄等级（age_level）：60 岁以上为 "老同学"，20 岁以上（不包括 60 岁以上）为 "年轻"，20 岁及以下、以及没有年龄信息为 "小同学"。')]),s._v(" "),a("p",[s._v("返回结果应包含学生的姓名（name）和年龄等级（age_level），并按姓名升序排序。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'老同学'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'年轻'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'小同学'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age_level"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_14-函数-时间函数✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-函数-时间函数✔"}},[s._v("#")]),s._v(" 14. 函数-时间函数✔")]),s._v(" "),a("p",[s._v("MySQL 提供了许多用于处理时间和日期的内置函数。以下是一些常用的 MySQL 时间日期函数：")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("NOW()")]),s._v("：返回当前日期和时间。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("CURDATE()")]),s._v("：返回当前日期。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("CURTIME()")]),s._v("：返回当前时间。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CURTIME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("DATE()")]),s._v("：从日期时间值中提取日期部分。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-08-27 15:30:45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("TIME()")]),s._v("：从日期时间值中提取时间部分。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-08-27 15:30:45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("YEAR()")]),s._v("：从日期或日期时间值中提取年份。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-08-27'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("MONTH()")]),s._v("：从日期或日期时间值中提取月份。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MONTH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-08-27'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("DAY()")]),s._v("：从日期或日期时间值中提取日。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DAY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2023-08-27'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("HOUR()")]),s._v("：从时间或日期时间值中提取小时。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HOUR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'15:30:45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("MINUTE()")]),s._v("：从时间或日期时间值中提取分钟。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MINUTE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'15:30:45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("SECOND()")]),s._v("：从时间或日期时间值中提取秒。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SECOND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'15:30:45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])]),s._v(" "),a("p",[s._v("这只是一些常见的 MySQL 时间日期函数示例，还有许多其他函数可用于处理时间和日期。你可以根据具体需求选择合适的函数来进行操作。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("当前时间今年第几周")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" WEEKOFYEAR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CURDATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])])])])]),s._v(" "),a("h3",{attrs:{id:"_15-函数-字符串处理✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-函数-字符串处理✔✔"}},[s._v("#")]),s._v(" 15. 函数-字符串处理✔✔")]),s._v(" "),a("p",[s._v("在 SQL 中，字符串处理是一类用于处理文本数据的函数。它们允许我们对字符串进行各种操作，如转换大小写【"),a("code",[s._v("UPPER(字段属性)、LOWER(字段属性)")]),s._v("】、计算字符串长度"),a("code",[s._v("LENGTH(属性字段)")]),s._v("以及搜索和替换子字符串等。字符串处理函数可以帮助我们在数据库中对字符串进行加工和转换，从而满足不同的需求。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）。请你编写一个 SQL 查询，筛选出姓名为 '热dog' 的学生，展示其学号（id）、姓名（name）及其大写姓名（upper_name）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  upper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" upper_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'热dog'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("当您使用SQL查询时，您可以使用不同的函数来搜索和替换字符串。以下是对这些函数的一些详细解释：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("LIKE运算符：")]),s._v(" "),a("ul",[a("li",[s._v("LIKE运算符用于在查询中进行模糊匹配。它可以与通配符一起使用，例如%和_。")]),s._v(" "),a("li",[s._v("%表示匹配任意字符的任意长度序列，例如'abc%'将匹配以\"abc\"开头的任意长度的字符串。")]),s._v(" "),a("li",[s._v('_表示匹配任意单个字符，例如\'a__c\'将匹配以"a"开头，以"c"结尾的任意两个字符的字符串。')]),s._v(" "),a("li",[s._v("例如，以下查询将返回包含特定模式的所有行：")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" column_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%pattern%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v('这将匹配包含"pattern"子字符串的任何位置的行。')])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("CONTAINS函数")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("CONTAINS函数用于在一个字符串列中搜索另一个字符串。它返回一个逻辑值，如果搜索字符串在列中存在，则返回TRUE，否则返回FALSE。")]),s._v(" "),a("li",[s._v("例如，以下查询将返回包含特定字符串的所有行：")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONTAINS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'search_string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v('这将搜索"column_name"列中是否存在"search_string"，如果存在，返回TRUE，否则返回FALSE。')])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("REPLACE函数")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("REPLACE函数用于在一个字符串中替换指定的子字符串为另一个字符串。")]),s._v(" "),a("li",[s._v("例如，以下查询将把特定字符串替换为新的字符串：")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),s._v(" table_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" column_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REPLACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'old_string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'new_string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v('这将把"column_name"列中的"old_string"替换为"new_string"。')])])]),s._v(" "),a("p",[s._v("这些函数提供了在SQL中搜索和替换字符串的不同方式，可以根据您的需求选择适合的函数来执行相应的操作。请注意，具体的语法和函数名称可能会因使用的数据库系统而有所不同。")]),s._v(" "),a("h3",{attrs:{id:"_16-函数-聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-函数-聚合函数"}},[s._v("#")]),s._v(" 16. 函数-聚合函数")]),s._v(" "),a("p",[s._v("常见的聚合函数包括：")]),s._v(" "),a("ul",[a("li",[s._v("COUNT：计算指定列的行数或非空值的数量。")]),s._v(" "),a("li",[s._v("SUM：计算指定列的数值之和。")]),s._v(" "),a("li",[s._v("AVG：计算指定列的数值平均值。")]),s._v(" "),a("li",[s._v("MAX：找出指定列的最大值。")]),s._v(" "),a("li",[s._v("MIN：找出指定列的最小值。")])]),s._v(" "),a("h3",{attrs:{id:"_17-分组聚合-单字段分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-分组聚合-单字段分组"}},[s._v("#")]),s._v(" 17. 分组聚合-单字段分组")]),s._v(" "),a("p",[s._v("在 SQL 中，通常使用 "),a("code",[s._v("GROUP BY")]),s._v(" 关键字对数据进行分组。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 student，包含以下字段：id（学号）、name（姓名）、class_id（班级编号）、score（成绩）。请你编写一个 SQL 查询，统计学生表中的班级编号（class_id）和每个班级的平均成绩（avg_score）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" avg_score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_18-分组聚合-多字段分组✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-分组聚合-多字段分组✔"}},[s._v("#")]),s._v(" 18.分组聚合-多字段分组✔")]),s._v(" "),a("p",[s._v("多字段分组和单字段分组的实现方式几乎一致，使用 "),a("code",[s._v("GROUP BY")]),s._v(" 语法即可。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("class_id")]),s._v("（班级编号）、"),a("code",[s._v("exam_num")]),s._v("（考试次数）、"),a("code",[s._v("score")]),s._v("（成绩）。请你编写一个 SQL 查询，统计学生表中每个班级每次考试的总学生人数（total_num）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  exam_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" total_num\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  exam_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("blockquote",[a("p",[a("strong",[s._v("注意")])]),s._v(" "),a("p",[s._v("在数据库查询中，COUNT(id)和COUNT(*)有显著的区别。")]),s._v(" "),a("p",[s._v("COUNT(id)用于计算特定列（在这种情况下是id）的非空值的数量。这意味着，它将计算具有非空id值的行数，但不会计算NULL值。")]),s._v(" "),a("p",[s._v("另一方面，COUNT(*)是对所有列的统计，将计算所有行的数量，无论它们是否包含NULL值。换句话说，如果表中的某一行有一个NULL值，那么该行也会被计算在内。")]),s._v(" "),a("p",[s._v("总结来说，COUNT(id)和COUNT("),a("em",[s._v(")的主要区别在于COUNT(id)不会将NULL值计入统计，而COUNT(")]),s._v(")会将NULL值计入统计。")])]),s._v(" "),a("h3",{attrs:{id:"_19-分组聚合-having-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-分组聚合-having-子句"}},[s._v("#")]),s._v(" 19.分组聚合 - having 子句")]),s._v(" "),a("p",[s._v("HAVING 子句与条件查询 WHERE 子句的区别在于，WHERE 子句用于在 "),a("strong",[s._v("分组之前")]),s._v(" 进行过滤，而 HAVING 子句用于在 "),a("strong",[s._v("分组之后")]),s._v(" 进行过滤。（使用聚合函数需要having子句）")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("class_id")]),s._v("（班级编号）、"),a("code",[s._v("score")]),s._v("（成绩）。请你编写一个 SQL 查询，统计学生表中班级的总成绩超过 150 分的班级编号（class_id）和总成绩（total_score）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" total_score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  class_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("having")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_20-查询进阶-关联查询-cross-join✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-查询进阶-关联查询-cross-join✔✔"}},[s._v("#")]),s._v(" 20.查询进阶 - 关联查询 - cross join✔✔")]),s._v(" "),a("p",[s._v("其中，"),a("code",[s._v("CROSS JOIN")]),s._v(" 是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 "),a("strong",[s._v("每一行")]),s._v(" 与右表的 "),a("strong",[s._v("每一行")]),s._v(" 进行组合，返回的结果是两个表的笛卡尔积。（结果集行数是A表行数 x B表行数）")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v(" ，包含以下字段：id（学号）、name（姓名）、age（年龄）、class_id（班级编号）；还有一个班级表 "),a("code",[s._v("class")]),s._v(" ，包含以下字段：id（班级编号）、name（班级名称）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，将学生表和班级表的所有行组合在一起，并返回学生姓名（student_name）、学生年龄（student_age）、班级编号（class_id）以及班级名称（class_name）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name student_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age student_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name class_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student s\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cross")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" class c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_21-查询进阶-关联查询-inner-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-查询进阶-关联查询-inner-join"}},[s._v("#")]),s._v(" 21.查询进阶-关联查询-inner join")]),s._v(" "),a("p",[s._v("注意，INNER JOIN 只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。（JOIN 默认 指 INNER JOIN）")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。还有一个班级表 "),a("code",[s._v("class")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（班级编号）、"),a("code",[s._v("name")]),s._v("（班级名称）、"),a("code",[s._v("level")]),s._v("（班级级别）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，根据学生表和班级表之间的班级编号进行匹配，返回学生姓名（"),a("code",[s._v("student_name")]),s._v("）、学生年龄（"),a("code",[s._v("student_age")]),s._v("）、班级编号（"),a("code",[s._v("class_id")]),s._v("）、班级名称（"),a("code",[s._v("class_name")]),s._v("）、班级级别（"),a("code",[s._v("class_level")]),s._v("）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name student_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age student_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name class_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("level")]),s._v(" class_level\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student s\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" class c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_22-查询进阶-关联查询-outer-join✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-查询进阶-关联查询-outer-join✔"}},[s._v("#")]),s._v(" 22.查询进阶 - 关联查询 - outer join✔")]),s._v(" "),a("p",[s._v("在 SQL 中，OUTER JOIN 是一种关联查询方式，它根据指定的关联条件，将两个表中满足条件的行组合在一起，并 "),a("strong",[s._v("包含没有匹配的行")]),s._v(" 。")]),s._v(" "),a("p",[s._v("在 OUTER JOIN 中，"),a("strong",[s._v("包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，它们分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分")]),s._v("。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。还有一个班级表 "),a("code",[s._v("class")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（班级编号）、"),a("code",[s._v("name")]),s._v("（班级名称）、"),a("code",[s._v("level")]),s._v("（班级级别）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，根据学生表和班级表之间的班级编号进行匹配，返回学生姓名（"),a("code",[s._v("student_name")]),s._v("）、学生年龄（"),a("code",[s._v("student_age")]),s._v("）、班级编号（"),a("code",[s._v("class_id")]),s._v("）、班级名称（"),a("code",[s._v("class_name")]),s._v("）、班级级别（"),a("code",[s._v("class_level")]),s._v("），要求必须返回所有学生的信息（即使对应的班级编号不存在）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name student_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age student_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name class_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("level")]),s._v(" class_level\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student s\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" class c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_23-查询进阶-子查询✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-查询进阶-子查询✔"}},[s._v("#")]),s._v(" 23.查询进阶 - 子查询✔")]),s._v(" "),a("p",[s._v("子查询是指在一个查询语句内部 "),a("strong",[s._v("嵌套")]),s._v(" 另一个完整的查询语句，内层查询被称为子查询。子查询可以用于获取更复杂的查询结果或者用于过滤数据。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。还有一个班级表 "),a("code",[s._v("class")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（班级编号）、"),a("code",[s._v("name")]),s._v("（班级名称）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，使用子查询的方式来获取存在对应班级的学生的所有数据，返回学生姓名（"),a("code",[s._v("name")]),s._v("）、分数（"),a("code",[s._v("score")]),s._v("）、班级编号（"),a("code",[s._v("class_id")]),s._v("）字段。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n      id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n      class\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_24-查询进阶-子查询-exists-✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-查询进阶-子查询-exists-✔✔"}},[s._v("#")]),s._v(" 24.查询进阶 - 子查询 - exists ✔✔")]),s._v(" "),a("p",[s._v('其中，子查询中的一种特殊类型是 "exists" 子查询，用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。')]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。还有一个班级表 "),a("code",[s._v("class")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（班级编号）、"),a("code",[s._v("name")]),s._v("（班级名称）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，使用 exists 子查询的方式来获取 "),a("strong",[s._v("不存在对应班级的")]),s._v(" 学生的所有数据，返回学生姓名（"),a("code",[s._v("name")]),s._v("）、年龄（"),a("code",[s._v("age")]),s._v("）、班级编号（"),a("code",[s._v("class_id")]),s._v("）字段。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("exists")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n      class_id "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#无所谓")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n      class\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n      class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#关键")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_25-查询进阶-组合查询✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-查询进阶-组合查询✔"}},[s._v("#")]),s._v(" 25.查询进阶 - 组合查询✔")]),s._v(" "),a("p",[s._v("包括两种常见的组合查询操作：UNION 和 UNION ALL。")]),s._v(" "),a("ol",[a("li",[s._v("UNION 操作：它用于将两个或多个查询的结果集合并， "),a("strong",[s._v("并去除重复的行")]),s._v(" 。即如果两个查询的结果有相同的行，则只保留一行。")]),s._v(" "),a("li",[s._v("UNION ALL 操作：它也用于将两个或多个查询的结果集合并， "),a("strong",[s._v("但不去除重复的行")]),s._v(" 。即如果两个查询的结果有相同的行，则全部保留。")])]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。还有一个新学生表 "),a("code",[s._v("student_new")]),s._v("，包含的字段和学生表完全一致。")]),s._v(" "),a("p",[s._v("请编写一条 SQL 语句，获取所有学生表和新学生表的学生姓名（"),a("code",[s._v("name")]),s._v("）、年龄（"),a("code",[s._v("age")]),s._v("）、分数（"),a("code",[s._v("score")]),s._v("）、班级编号（"),a("code",[s._v("class_id")]),s._v("）字段，要求保留重复的学生记录。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student_new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_26-查询进阶-开窗函数-sum-over✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-查询进阶-开窗函数-sum-over✔✔"}},[s._v("#")]),s._v(" 26.查询进阶 - 开窗函数 - sum over✔✔")]),s._v(" "),a("p",[s._v("在 SQL 中，开窗函数是一种强大的查询工具，它允许我们在查询中进行对分组数据进行计算、 "),a("strong",[s._v("同时保留原始行的详细信息")]),s._v(" 。")]),s._v(" "),a("p",[s._v("开窗函数可以与聚合函数（如 SUM、AVG、COUNT 等）结合使用，但与普通聚合函数不同，开窗函数不会导致结果集的行数减少。")]),s._v(" "),a("p",[s._v("该函数用法为：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("计算字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 分组字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，返回"),a("strong",[s._v("每个学生的详细信息")]),s._v("（字段顺序和原始表的字段顺序一致），并计算每个班级的学生平均分（class_avg_score）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      class_id\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" class_avg_score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#每个班")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#select ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#id,name,age,score,class_id,avg(score) class_avg(score)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#from student")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#group by class_id;")]),s._v("\n")])])]),a("h3",{attrs:{id:"_27-查询进阶-开窗函数-sum-over-order-by✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-查询进阶-开窗函数-sum-over-order-by✔✔"}},[s._v("#")]),s._v(" 27.查询进阶 - 开窗函数 - sum over order by✔✔")]),s._v(" "),a("p",[s._v("sum over order by，可以实现同组内数据的 "),a("strong",[s._v("累加求和")]),s._v(" 。示例用法如下：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("计算字段名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 分组字段名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 排序字段 排序规则"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("举一个应用场景：老师在每个班级里依次点名，每点到一个学生，老师都会记录当前已点到的学生们的分数总和。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数升序的方式"),a("strong",[s._v("累加计算")]),s._v("每个班级的学生总分（class_sum_score）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#注意字段")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      class_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#注意字段")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" class_sum_score\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_28-查询进阶-开窗函数-rank✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-查询进阶-开窗函数-rank✔✔"}},[s._v("#")]),s._v(" 28.查询进阶 - 开窗函数 - rank✔✔")]),s._v(" "),a("p",[a("code",[s._v("RANK()")]),s._v("函数会为相同数值的行分配相同的排名，并跳过下一个排名。"),a("code",[s._v("ROW_NUMBER()")]),s._v("函数则会为每一行分配唯一的行号。")]),s._v(" "),a("p",[s._v("Rank 开窗函数的常见用法是在查询结果中查找前几名（Top N）或排名最高的行。")]),s._v(" "),a("p",[s._v("Rank 开窗函数的语法如下：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("RANK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 可选，用于指定分组列")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 用于指定排序列及排序方式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" rank_column\n")])])]),a("p",[s._v("其中，"),a("code",[s._v("PARTITION BY")]),s._v(" 子句可选，用于指定分组列，将结果集按照指定列进行分组；"),a("code",[s._v("ORDER BY")]),s._v(" 子句用于指定排序列及排序方式，决定了计算 Rank 时的排序规则。"),a("code",[s._v("AS rank_column")]),s._v(" 用于指定生成的 Rank 排名列的别名。")]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数降序的方式计算每个班级内的学生的分数排名（ranking）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  rank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      class_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ranking\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_29-查询进阶-开窗函数-row-number✔✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-查询进阶-开窗函数-row-number✔✔"}},[s._v("#")]),s._v(" 29.查询进阶 - 开窗函数-row_number✔✔")]),s._v(" "),a("p",[a("code",[s._v("RANK()")]),s._v("函数会为相同数值的行分配相同的排名，并跳过下一个排名。"),a("code",[s._v("ROW_NUMBER()")]),s._v("函数则会为每一行分配唯一的行号。")]),s._v(" "),a("p",[s._v("Row_Number 开窗函数是 SQL 中的一种用于为查询结果集中的每一行 "),a("strong",[s._v("分配唯一连续排名")]),s._v(" 的开窗函数。")]),s._v(" "),a("p",[s._v("Row_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("ROW_NUMBER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" column1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" column2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 可选，用于指定分组列")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" column3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" column4 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 用于指定排序列及排序方式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" row_number_column\n")])])]),a("p",[s._v("其中，"),a("code",[s._v("PARTITION BY")]),s._v("子句可选，用于指定分组列，将结果集按照指定列进行分组。"),a("code",[s._v("ORDER BY")]),s._v(" 子句用于指定排序列及排序方式，决定了计算 Row_Number 时的排序规则。"),a("code",[s._v("AS row_number_column")]),s._v(" 用于指定生成的行号列的别名。")]),s._v(" "),a("blockquote",[a("p",[s._v("对于具有相同值的行，"),a("code",[s._v("RANK()")]),s._v(" 函数将为它们分配相同的排名，并跳过下一个排名。例如，在以下数据集中：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+------+------+-------+\n| Name | Exam | Score |\n+------+------+-------+\n| Amy  |   1  |   95  |\n| Bob  |   1  |   90  |\n| John |   2  |   85  |\n| Kate |   2  |   85  |\n+------+------+-------+\n")])])]),a("p",[s._v("使用 "),a("code",[s._v("RANK()")]),s._v(" 函数：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sqlCopy CodeSELECT Name, Exam, Score, RANK() OVER (PARTITION BY Exam ORDER BY Score DESC) AS Rank\nFROM scores;\n")])])]),a("p",[s._v("结果：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+------+------+-------+------+\n| Name | Exam | Score | Rank |\n+------+------+-------+------+\n| Amy  |   1  |   95  |  1   |\n| Bob  |   1  |   90  |  2   |\n| John |   2  |   85  |  1   |\n| Kate |   2  |   85  |  1   |\n+------+------+-------+------+\n")])])]),a("p",[s._v("在这里，John 和 Kate 的成绩相同，它们被分配了相同的排名 1，并且下一个排名是 2。")]),s._v(" "),a("p",[s._v("对于 "),a("code",[s._v("ROW_NUMBER()")]),s._v(" 函数，它将为每一行分配唯一的行号，即使存在相同值的行。所以结果是：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+------+------+-------+-----------+\n| Name | Exam | Score | RowNumber |\n+------+------+-------+-----------+\n| Amy  |   1  |   95  |     1     |\n| Bob  |   1  |   90  |     2     |\n| John |   2  |   85  |     3     |\n| Kate |   2  |   85  |     4     |\n+------+------+-------+-----------+\n")])])]),a("p",[s._v("因此，在具有相同值的行的情况下，"),a("code",[s._v("RANK()")]),s._v(" 函数和 "),a("code",[s._v("ROW_NUMBER()")]),s._v(" 函数将会有不同的结果。感谢您的指正，我非常抱歉给您带来了混淆。")])]),s._v(" "),a("h3",{attrs:{id:"_30-查询进阶-开窗函数-lag-lead✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-查询进阶-开窗函数-lag-lead✔"}},[s._v("#")]),s._v(" 30.查询进阶 - 开窗函数 - lag / lead✔")]),s._v(" "),a("p",[s._v("开窗函数 Lag 和 Lead 的作用是获取在当前行之前或之后的行的值，这两个函数通常在需要比较相邻行数据或进行时间序列分析时非常有用。")]),s._v(" "),a("p",[s._v("1）Lag 函数")]),s._v(" "),a("p",[s._v("Lag 函数用于获取 "),a("strong",[s._v("当前行之前")]),s._v(" 的某一列的值。它可以帮助我们查看上一行的数据。")]),s._v(" "),a("p",[s._v("Lag 函数的语法如下：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("LAG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" default_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" partition_column "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" sort_column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("参数解释：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("column_name")]),s._v("：要获取值的列名。")]),s._v(" "),a("li",[a("code",[s._v("offset")]),s._v("：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。")]),s._v(" "),a("li",[a("code",[s._v("default_value")]),s._v("：可选参数，用于指定当没有前一行时的默认值。")]),s._v(" "),a("li",[a("code",[s._v("PARTITION BY")]),s._v("和"),a("code",[s._v("ORDER BY")]),s._v("子句可选，用于分组和排序数据。")])]),s._v(" "),a("p",[s._v("2）Lead 函数")]),s._v(" "),a("p",[s._v("Lead 函数用于获取 "),a("strong",[s._v("当前行之后")]),s._v(" 的某一列的值。它可以帮助我们查看下一行的数据。")]),s._v(" "),a("p",[s._v("Lead 函数的语法如下：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("LEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" default_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" partition_column "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" sort_column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("参数解释：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("column_name")]),s._v("：要获取值的列名。")]),s._v(" "),a("li",[a("code",[s._v("offset")]),s._v("：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。")]),s._v(" "),a("li",[a("code",[s._v("default_value")]),s._v("：可选参数，用于指定当没有后一行时的默认值。")]),s._v(" "),a("li",[a("code",[s._v("PARTITION BY")]),s._v("和"),a("code",[s._v("ORDER BY")]),s._v("子句可选，用于分组和排序数据。")])]),s._v(" "),a("p",[s._v("eg：假设有一个学生表 "),a("code",[s._v("student")]),s._v("，包含以下字段："),a("code",[s._v("id")]),s._v("（学号）、"),a("code",[s._v("name")]),s._v("（姓名）、"),a("code",[s._v("age")]),s._v("（年龄）、"),a("code",[s._v("score")]),s._v("（分数）、"),a("code",[s._v("class_id")]),s._v("（班级编号）。")]),s._v(" "),a("p",[s._v("请你编写一个 SQL 查询，返回每个学生的详细信息（字段顺序和原始表的字段顺序一致），并且按照分数降序的方式获取每个班级内的学生的前一名学生姓名（prev_name）、后一名学生姓名（next_name）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  lag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      class_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" prev_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  lead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      class_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" next_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_31-补充题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-补充题目"}},[s._v("#")]),s._v(" 31.补充题目")]),s._v(" "),a("p",[s._v("1、假设有一家冒险者公会，他们有一张名为 "),a("code",[s._v("rewards")]),s._v(" 的表格，用于记录每个冒险者在各个任务中获得的金币奖励情况。")]),s._v(" "),a("p",[s._v("表格字段如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("adventurer_id")]),s._v("：冒险者ID，唯一标识每个冒险者。")]),s._v(" "),a("li",[a("code",[s._v("adventurer_name")]),s._v("：冒险者姓名。")]),s._v(" "),a("li",[a("code",[s._v("task_id")]),s._v("：任务ID，唯一标识每个任务。")]),s._v(" "),a("li",[a("code",[s._v("task_name")]),s._v("：任务名称。")]),s._v(" "),a("li",[a("code",[s._v("reward_coins")]),s._v("：冒险者在该任务中获得的金币奖励数量。")])]),s._v(" "),a("p",[s._v("请你编写一条 SQL 查询语句，依次输出每个冒险者的 id（"),a("code",[s._v("adventurer_id")]),s._v("）、冒险者姓名（"),a("code",[s._v("adventurer_name")]),s._v("）、获得的总金币奖励（"),a("code",[s._v("total_reward_coins")]),s._v("），并按照总金币奖励从高到低排序，其中只列出总金币奖励排名前 3 的冒险者。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  adventurer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  adventurer_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reward_coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" total_reward_coins\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  rewards\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  adventurer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  adventurer_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n  total_reward_coins "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("2、假设有一家魔法学院，里面有许多学员在不同科目上进行学习和考试。请你设计一张名为"),a("code",[s._v("magic_scores")]),s._v("的表格，用于记录每位学员在不同科目中的考试成绩情况。表格字段如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("student_id")]),s._v("：学员ID，唯一标识每位学员。")]),s._v(" "),a("li",[a("code",[s._v("student_name")]),s._v("：学员姓名。")]),s._v(" "),a("li",[a("code",[s._v("subject_id")]),s._v("：科目ID，唯一标识每个科目。")]),s._v(" "),a("li",[a("code",[s._v("subject_name")]),s._v("：科目名称。")]),s._v(" "),a("li",[a("code",[s._v("score")]),s._v("：学员在该科目的考试成绩。")])]),s._v(" "),a("p",[s._v("请你编写一条 SQL 查询语句，依次输出每位学员的学院 ID（"),a("code",[s._v("student_id")]),s._v("）、学员姓名（"),a("code",[s._v("student_name")]),s._v("）、科目 ID（"),a("code",[s._v("subject_id")]),s._v("）、科目名称（"),a("code",[s._v("subject_name")]),s._v("）、学员在该科目的考试成绩（"),a("code",[s._v("score")]),s._v("）、该学员在每个科目中的成绩排名（"),a("code",[s._v("score_rank")]),s._v("），并将结果按照成绩从高到低进行排序。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  student_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  student_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  subject_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  subject_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  rank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("over")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("partition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      subject_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("\n      score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" score_rank\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  magic_scores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("3、在神秘的海岛上，有一只传说中的大浪淘鸡，它身躯高大威武，羽毛闪烁着神秘的光芒。岛上的居民都传说大浪淘鸡是海洋之神的化身，它能够操纵海浪，带来平静或狂暴的海洋。为了验证这个传说是否属实，岛上的居民决定对大浪淘鸡进行观测和记录。")]),s._v(" "),a("p",[s._v("有一张 "),a("code",[s._v("chicken_observation")]),s._v(" 的表格，用于记录居民观测大浪淘鸡的信息。表格字段如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("observation_id")]),s._v("：观测记录ID，唯一标识每条观测记录")]),s._v(" "),a("li",[a("code",[s._v("observer_name")]),s._v("：观测者姓名")]),s._v(" "),a("li",[a("code",[s._v("observation_date")]),s._v("：观测日期")]),s._v(" "),a("li",[a("code",[s._v("observation_location")]),s._v("：观测地点")]),s._v(" "),a("li",[a("code",[s._v("wave_intensity")]),s._v("：观测到的海浪强度，用整数表示，数值越大，海浪越狂暴")])]),s._v(" "),a("p",[s._v('请你编写一条 SQL 查询语句，找出观测地点包含 "大浪淘鸡" 且海浪强度超过 5 的观测记录，并依次输出每位观测者的姓名（'),a("code",[s._v("observer_name")]),s._v("）、观测日期（"),a("code",[s._v("observation_date")]),s._v("）以及观测到的海浪强度（"),a("code",[s._v("wave_intensity")]),s._v("）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v("\n  observer_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  observation_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  wave_intensity\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("\n  chicken_observation\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("\n  observation_location "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%大浪淘鸡%'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" wave_intensity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{336:function(t,a,s){"use strict";s.r(a);var n=s(1),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"java基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[t._v("#")]),t._v(" Java基础")]),t._v(" "),a("h3",{attrs:{id:"对象的创建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建过程"}},[t._v("#")]),t._v(" 对象的创建过程")]),t._v(" "),a("ol",[a("li",[t._v("类加载：当程序引用一个类时，Java虚拟机（JVM）会通过类加载器查找并加载该类的字节码文件。类加载是将类的字节码文件加载到内存，并在方法区中创建类的Class对象的过程。")]),t._v(" "),a("li",[t._v("分配内存：在内存中为对象分配一块连续的内存空间，用于存储对象的实例变量。")]),t._v(" "),a("li",[t._v("初始化零值：在内存中分配的空间被初始化为默认值，基本类型的实例变量被初始化为0或false，引用类型的实例变量被初始化为null。")]),t._v(" "),a("li",[t._v("设置对象头信息：在对象头中存储对象的元数据，如哈希码、GC 信息、锁状态等。")]),t._v(" "),a("li",[a("strong",[t._v("执行构造方法")]),t._v("：根据对象所属类的构造方法，执行相应的构造逻辑，完成对象的初始化。构造方法的执行会对对象的实例变量进行赋值操作，可以进行自定义的初始化逻辑。")]),t._v(" "),a("li",[a("strong",[t._v("返回对象的引用")]),t._v("：对象创建完成后，返回一个指向该对象的引用，可以通过该引用来访问和操作对象的实例变量和方法。")])]),t._v(" "),a("p",[t._v("值得注意的是，Java 中的对象创建是在堆内存中完成的，而不是栈内存。栈内存只存储了对象的引用，而真正的对象实例及其数据是分配在堆内存中的。")]),t._v(" "),a("p",[t._v("另外，如果对象是通过关键字 "),a("code",[t._v("new")]),t._v(" 创建的，则会在堆内存中分配新的对象；如果是通过反射或克隆等方式创建的对象，则会相应地调用不同的机制来完成对象的创建过程。")]),t._v(" "),a("h3",{attrs:{id:"string为什么要设计成不可变的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string为什么要设计成不可变的"}},[t._v("#")]),t._v(" String为什么要设计成不可变的")]),t._v(" "),a("p",[t._v("保证数据的完整性、线程安全性、缓存的利用、安全性、效率优化")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("保护数据的完整性")]),t._v("：")]),t._v(" "),a("p",[t._v("不可变性确保了字符串对象的内容不会被修改。这是因为字符串被广泛用作映射关键字、缓存哈希码和网络传输中的标识符等，若可变，可能会导致数据的不一致性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("线程安全性")]),t._v("：")]),t._v(" "),a("p",[t._v("由于 String 对象的不可变性，多个线程可以共享同一个字符串对象，而无需担心静态条件和并发修改问题。这样简化了在多线程环境下对字符串的使用和处理，提高了线程安全性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("缓存的利用")]),t._v("：")]),t._v(" "),a("p",[t._v("由于 String 的不可变性，字符串对象可以被缓存，以便在需要时重复使用。例如，Java 中的字符串常量池就可以通过缓存相同的字符串值来提高内存利用率和性能。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("安全性")]),t._v("：")]),t._v(" "),a("p",[t._v("在 Java 中，String 类作为参数传递给其他方法时，由于不可变性，你无需担心参数的值会被修改，从而增加了程序的可靠性和安全性。例如， 网络连接地址URL，文件路径path，反射机制所需要的String参数")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("效率优化")]),t._v("：")]),t._v(" "),a("p",[t._v("字符串不可变性允许进行一些额外的优化，加快了字符串的处理速度。例如，可以使用字符串的哈希值进行缓存、通过共享相同的字符串实例来节省内存，并且可以避免重复计算。")])])]),t._v(" "),a("p",[t._v("因为字符串不可变，所以可以用字符串池缓存，可以大大节省堆内存。而且还可以提前对hashcode进行缓存，更加高效")]),t._v(" "),a("p",[t._v("由于字符串是应用最广泛的数据结构，提高字符串的性能对提高整个应用程序的总体性能有相当大的影响。")]),t._v(" "),a("h3",{attrs:{id:"反射机制的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的原理是什么"}},[t._v("#")]),t._v(" 反射机制的原理是什么")]),t._v(" "),a("p",[t._v("1、获取目标类的Class对象")]),t._v(" "),a("p",[t._v("2、根据Class对象实例获取Construct对象")]),t._v(" "),a("p",[t._v("3、使用Construct对象的newInstance()方法获取反射类对象")]),t._v(" "),a("p",[t._v("4、使用Class对象实例获取Method对象")]),t._v(" "),a("p",[t._v("5、根据Method实例调用invoke()方法")]),t._v(" "),a("h3",{attrs:{id:"实现序列化和反序列化为什么要实现serializable接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现序列化和反序列化为什么要实现serializable接口"}},[t._v("#")]),t._v(" 实现序列化和反序列化为什么要实现Serializable接口")]),t._v(" "),a("p",[t._v("在Java中实现Serializable这个接口是为了"),a("strong",[t._v("支持对象的序列化和反序列化操作")]),t._v("，Serializable是Java提供的一个标记接口，它没有定义任何方法，只是起到一个标记的作用，当一个类实现了Serializable接口的时候，"),a("strong",[t._v("表明这个类的对象可以被序列化成字节流，或者从字节流反序列化还原成对象")]),t._v("。")]),t._v(" "),a("p",[t._v("之所以要对序列化对象实现Serializable这个接口，有以下原因")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("可以确保只有那些被设计为可序列化的类的对象才能被序列化")]),t._v("，这是一种类型安全性的保障，防止对不可序列化对象进行序列化操作")]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("它规范了类的行为，表示该类的对象可以被序列化")]),t._v("，通过判断对象是否实现了Serializable这个接口，可以遵循该规范，确保对象的序列化操作是否是合法的。")]),t._v(" "),a("h2",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),a("h3",{attrs:{id:"如何保证缓存与数据库双写时的数据一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证缓存与数据库双写时的数据一致性"}},[t._v("#")]),t._v(" 如何保证缓存与数据库双写时的数据一致性")]),t._v(" "),a("p",[t._v("当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致")]),t._v(" "),a("p",[t._v("读操作：")]),t._v(" "),a("ul",[a("li",[t._v("缓存命中，直接返回；缓存未命中查询数据库，写入缓存，设定超时时间")])]),t._v(" "),a("p",[t._v("写操作：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("延迟双删【有脏数据风险】")]),t._v(" "),a("p",[t._v("延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Redisson读写锁【强一致、性能低】")])]),t._v(" "),a("p",[t._v("在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。\n排他锁底层使用也是setnx，保证了同时只能有一个线程操锁住的方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("强一致性的，采用Redisson提供的读写锁")]),t._v(" "),a("p",[t._v("①共享锁：读锁readLock，加锁之后，其他线程可以共享读操作")]),t._v(" "),a("p",[t._v("②排他锁：独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("异步的方案同步的数据")]),t._v("【最终一致】")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("允许延时一致的业务，采用异步通知")]),t._v(" "),a("p",[t._v("①使用MQ中间件，更新数据之后，通知缓存删除")]),t._v(" "),a("ul",[a("li",[t._v("数据库写入：当需要对数据库进行写操作时，首先更新数据库中的数据。")]),t._v(" "),a("li",[t._v("发送消息：在数据库数据写入成功后，发送一条消息到消息队列。消息中包含了被更新的数据的标识符或其他必要信息。")]),t._v(" "),a("li",[t._v("消费消息：消息队列中有一个消费者，负责监听并消费这些消息。一旦消费者接收到消息，它将根据消息中的信息执行相应的操作。")]),t._v(" "),a("li",[t._v("更新 Redis 缓存：消费者从消息中获取到被更新的数据标识符后，它将根据标识符从数据库中读取最新的数据，并将这个数据更新到 Redis 缓存中，确保缓存与数据库保持一致。")])]),t._v(" "),a("p",[t._v("通过以上步骤，可以将 Redis 缓存与数据库的数据保持同步。当数据库数据发生变化时，消息队列中的消息将触发消费者执行相应的操作，以更新 Redis 缓存中对应的数据。")]),t._v(" "),a("p",[t._v("②利用canal中间件，不需要修改业务代码，部署一个canal服务。canal服务把自己伪装成mysql的一个从节点，当mysql数据更新以后，canal会读取binlog数据，然后在通过canal的客户端获取到数据， 更新缓存即可。")])])])])]),t._v(" "),a("h3",{attrs:{id:"缓存穿透、雪崩、击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透、雪崩、击穿"}},[t._v("#")]),t._v(" 缓存穿透、雪崩、击穿")]),t._v(" "),a("h4",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[t._v("#")]),t._v(" 缓存穿透")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缓存中不存在，数据库中也不存在")]),t._v(" "),a("p",[t._v("就是说查询一个不存在的数据，mysql查询不到数据也不会直接写入缓存，就会导致每次请求查数据库")])]),t._v(" "),a("li",[a("p",[t._v("解决方案")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("缓存空数据")]),t._v(" "),a("ul",[a("li",[t._v("查询返回的数据为空，仍把这个空结果进行缓存，将无效的key存放进redis中")]),t._v(" "),a("li",[t._v("优点：实现简单，")]),t._v(" "),a("li",[t._v("缺点：销毁内存，可能发送不一致的问题")])])]),t._v(" "),a("li",[a("p",[t._v("使用布隆过滤器")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("查询布隆过滤器，不存在，直接返回，存在（缓存预热时，预热布隆过滤器）查Redis，命中直接放回结果，查不到，查数据库，查到结果，存到Redis并返回结果。")]),t._v(" "),a("p",[t._v("布隆过滤器主要是用于检索一个元素是否在一个集合中。")])]),t._v(" "),a("li",[a("p",[t._v("优点：内存占用较小，没有多余key")])]),t._v(" "),a("li",[a("p",[t._v("缺点：实现复制，存在误判")])])])])])])]),t._v(" "),a("h4",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[t._v("#")]),t._v(" 缓存雪崩")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("某一个时刻出现大规模的key失效或Redis宕机，导致大量请求到达数据库，带来巨大压力")]),t._v(" "),a("p",[t._v("就是说设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB 瞬时压力过重雪崩。与缓存击穿的区别： 雪崩是很多key，击穿是某一个key缓存。")])]),t._v(" "),a("li",[a("p",[t._v("解决方案")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("给不同的key的TTL添加随机值")]),t._v("（主要）\n"),a("ul",[a("li",[t._v("缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件")])])]),t._v(" "),a("li",[t._v("利用Redis集群提高服务的可用性")]),t._v(" "),a("li",[t._v("给缓存业务添加降级限流策略")]),t._v(" "),a("li",[t._v("给业务添加多级缓存")])])])]),t._v(" "),a("p",[t._v("注意："),a("strong",[t._v("降级限流可做为系统的保底策略，适用于穿透、击穿、雪崩")])]),t._v(" "),a("h4",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[t._v("#")]),t._v(" 缓存击穿")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("高并发访问，某个热点的key失效，无数的请求访问，引起数据库的压力并发。")]),t._v(" "),a("p",[t._v("就是说给某一个key设置了过期时间，当key过期的时候，恰好这时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。")])]),t._v(" "),a("li",[a("p",[t._v("解决方案")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("互斥锁")]),t._v(" "),a("ul",[a("li",[t._v("当缓存失效时，不立即去load db，先使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时再进行 load db的操作并回设缓存，否则重试get缓存的方法")]),t._v(" "),a("li",[t._v("优点：强一致")]),t._v(" "),a("li",[t._v("缺点：性能差")])])]),t._v(" "),a("li",[a("p",[t._v("设置永不过期")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("物理不过期，针对热点key不设置过期时间")])]),t._v(" "),a("li",[a("p",[t._v("逻辑过期")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("①：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前 key设置过期时间")]),t._v(" "),a("p",[t._v("②：当查询的时候，从redis取出数据后判断时间是否过期")]),t._v(" "),a("p",[t._v("③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据， 这个数据不是最新")])]),t._v(" "),a("li",[a("p",[t._v("优点：高可用，性能优")])]),t._v(" "),a("li",[a("p",[t._v("缺点：不能保证数据绝对一致")])])])])])])])])]),t._v(" "),a("h3",{attrs:{id:"redis主从复制的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis主从复制的原理"}},[t._v("#")]),t._v(" Redis主从复制的原理")]),t._v(" "),a("ol",[a("li",[t._v("主从架构的核心原理\n"),a("ul",[a("li",[t._v("master会启动一个后台线程，开始生成一份RDB快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB文件生成完毕之后，master会将这个RDB发送给 slave，slave会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后master会将内存中缓存的写命令发送给slave，slave也会同步这些数据。")])])]),t._v(" "),a("li",[t._v("主从复制的断点续传")]),t._v(" "),a("li",[t._v("无磁盘化复制")]),t._v(" "),a("li",[t._v("过期key处理\n"),a("ul",[a("li",[t._v("slave不会过期key，只会等待master过期key。如果master过期了一个key，或者通过LRU淘汰了一个key，那么会模拟一条del命令发送给slave。")])])])]),t._v(" "),a("h2",{attrs:{id:"mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" MySQL")]),t._v(" "),a("h3",{attrs:{id:"hash索引和b-树索引的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash索引和b-树索引的区别"}},[t._v("#")]),t._v(" Hash索引和B+树索引的区别")]),t._v(" "),a("h3",{attrs:{id:"为什么索引结构默认使用b-tree-而不是b-tree-hash-二叉树-红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么索引结构默认使用b-tree-而不是b-tree-hash-二叉树-红黑树"}},[t._v("#")]),t._v(" 为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树")]),t._v(" "),a("h3",{attrs:{id:"建索引的原则有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建索引的原则有哪些"}},[t._v("#")]),t._v(" 建索引的原则有哪些")]),t._v(" "),a("h2",{attrs:{id:"mysql-微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-微服务"}},[t._v("#")]),t._v(" ==mysql-微服务==")]),t._v(" "),a("h1",{attrs:{id:"java基础-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基础-2"}},[t._v("#")]),t._v(" Java基础")]),t._v(" "),a("h2",{attrs:{id:"java概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java概述"}},[t._v("#")]),t._v(" Java概述")]),t._v(" "),a("h3",{attrs:{id:"_1-java语言有哪些特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java语言有哪些特点"}},[t._v("#")]),t._v(" 1.Java语言有哪些特点")]),t._v(" "),a("ul",[a("li",[t._v("面向对象（封装、继承、多态）")]),t._v(" "),a("li",[t._v("平台无关性（跨平台、一次编写，到处运行）")]),t._v(" "),a("li",[t._v("支持多线程")]),t._v(" "),a("li",[t._v("支持网络编程")]),t._v(" "),a("li",[t._v("编译与解释共存")]),t._v(" "),a("li",[a("strong",[t._v("可靠性、安全性")])])]),t._v(" "),a("h3",{attrs:{id:"_2-java和c-有什么关系-它们有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-java和c-有什么关系-它们有什么区别"}},[t._v("#")]),t._v(" 2.Java和C++有什么关系，它们有什么区别")]),t._v(" "),a("ul",[a("li",[t._v("1、Java没有明确的指针概念；而C++存在指针")]),t._v(" "),a("li",[t._v("2、Java支持单继承、多实现；而C++支持多继承")]),t._v(" "),a("li",[t._v("3、Java有自动回收垃圾机制；C++需要开发人员手动管理内存")]),t._v(" "),a("li",[a("strong",[t._v("4、Java不支持操作符重载；C++支持操作符重载")])]),t._v(" "),a("li",[t._v("5、Java没有goto语句")]),t._v(" "),a("li",[t._v("6、Java是完全面向对象；C++更加偏向面向过程")])]),t._v(" "),a("h3",{attrs:{id:"_3-jvm、jre和jdk的关系是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jvm、jre和jdk的关系是什么✔"}},[t._v("#")]),t._v(" 3.JVM、JRE和JDK的关系是什么✔")]),t._v(" "),a("ul",[a("li",[t._v("JDK=JRE+开发工具集（例如javac编译工具等【将java代码编译成字节码】）")]),t._v(" "),a("li",[t._v("JRE=JVM【执行Java字节码】+JavaSE标准类库")])]),t._v(" "),a("h3",{attrs:{id:"_4-什么是字节码-采用字节码的好处是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是字节码-采用字节码的好处是什么✔"}},[t._v("#")]),t._v(" 4.什么是字节码？采用字节码的好处是什么✔")]),t._v(" "),a("p",[t._v("编译器（javac）将Java源文件（.java）文件编译成字节码文件（.class）")]),t._v(" "),a("ul",[a("li",[t._v("1、"),a("strong",[t._v("编译生成固定格式的字节码（.class文件）供JVM使用")]),t._v("，一次编译，到处运行（实现了跨平台）")]),t._v(" "),a("li",[t._v("2、提高了代码执行的性能")])]),t._v(" "),a("h3",{attrs:{id:"_5-oraclejdk和openjdk的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-oraclejdk和openjdk的区别是什么"}},[t._v("#")]),t._v(" 5.OracleJDK和OpenJDK的区别是什么")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OracleJDK")]),t._v(" "),a("th",[t._v("OpenJDK")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("三年发布一次")])],1)]),t._v(" "),a("td",[t._v("三个月发布一次")])]),t._v(" "),a("tr",[a("td",[t._v("不是完全开源")]),t._v(" "),a("td",[t._v("完全开源")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("性能更好、更稳定")])]),t._v(" "),a("td",[t._v("相对来说，性能没有OracleJDK好，没有OracelJDK稳定")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("不提供长期支持，每次必须更新到最新版本")])]),t._v(" "),a("td",[t._v("提供长期支持")])])])]),t._v(" "),a("h2",{attrs:{id:"基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),a("h3",{attrs:{id:"_6-java有哪些数据类型✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-java有哪些数据类型✔"}},[t._v("#")]),t._v(" 6.Java有哪些数据类型✔")]),t._v(" "),a("p",[t._v("基本数据类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数值型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("整型")]),t._v(" "),a("p",[t._v("1、字节型"),a("code",[t._v("byte")]),t._v("1")]),t._v(" "),a("p",[t._v("2、短整型"),a("code",[t._v("short")]),t._v("2")]),t._v(" "),a("p",[t._v("3、整型"),a("code",[t._v("int")]),t._v("4")]),t._v(" "),a("p",[t._v("4、长整型"),a("code",[t._v("long")]),t._v("8")])]),t._v(" "),a("li",[a("p",[t._v("浮点型")]),t._v(" "),a("p",[t._v("5、单精度"),a("code",[t._v("float")]),t._v("4")]),t._v(" "),a("p",[t._v("6、双精度"),a("code",[t._v("double")]),t._v("8")])])])]),t._v(" "),a("li",[a("p",[t._v("7、字符型**"),a("code",[t._v("char")]),t._v("2**")])]),t._v(" "),a("li",[a("p",[t._v("8、布尔型**"),a("code",[t._v("Boolean")]),t._v("1**")])])]),t._v(" "),a("p",[t._v("引用数据类型")]),t._v(" "),a("ul",[a("li",[t._v("1、类 "),a("code",[t._v("class")])]),t._v(" "),a("li",[t._v("2、接口 "),a("code",[t._v("interface")])]),t._v(" "),a("li",[t._v("3、数组 "),a("code",[t._v("[]")])])]),t._v(" "),a("h3",{attrs:{id:"_7-char型变量中能不能存贮一个中文汉字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-char型变量中能不能存贮一个中文汉字"}},[t._v("#")]),t._v(" 7.char型变量中能不能存贮一个中文汉字")]),t._v(" "),a("p",[t._v("在Java中，char类型占2个字节，而且Java默认采用Unicode编码，一个Unicode码是16位，所以一个Unicode码占两个字节，Java中无论汉字还是英文字母都是用Unicode编码来表示的。所以，在Java中，char类型变量可以存储一个中文汉字。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 'hello "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Java")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_8-switch是否能作用在byte上-是否能作用在long上-是否能作用在string上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-switch是否能作用在byte上-是否能作用在long上-是否能作用在string上"}},[t._v("#")]),t._v(" 8.Switch是否能作用在byte上，是否能作用在long上，是否能作用在String上")]),t._v(" "),a("ul",[a("li",[t._v("java5之前byte、short、char、int")]),t._v(" "),a("li",[t._v("java5开始+enum")]),t._v(" "),a("li",[a("strong",[t._v("java7开始+String")])]),t._v(" "),a("li",[t._v("长整型(long)在目前所有的版本中都是不可以的。")])]),t._v(" "),a("h3",{attrs:{id:"_9-访问修饰符public、private、protected、以及不写-默认-时的区别❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-访问修饰符public、private、protected、以及不写-默认-时的区别❗"}},[t._v("#")]),t._v(" 9.访问修饰符public、private、protected、以及不写（默认）时的区别❗")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("private")]),t._v("当前类")]),t._v(" "),a("li",[a("code",[t._v("default")]),t._v("当前类、同一包（+同一包子类）")]),t._v(" "),a("li",[a("code",[t._v("protected")]),t._v("当前类、同一包（+同一包子类）、不同包的子类")]),t._v(" "),a("li",[a("code",[t._v("public")]),t._v("当前类、同一包（+同一包子类）、不同包的子类、同一工程")])]),t._v(" "),a("h3",{attrs:{id:"_10-break-continue-return的区别及作用✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-break-continue-return的区别及作用✔"}},[t._v("#")]),t._v(" 10.break，continue，return的区别及作用✔")]),t._v(" "),a("ul",[a("li",[t._v("break：结束当前循环体")]),t._v(" "),a("li",[t._v("continue：结束正在执行的循环体，进入下一个循环条件")]),t._v(" "),a("li",[t._v("return：结束当前的方法，直接返回")])]),t._v(" "),a("h3",{attrs:{id:"_11-final、finally、finalize的区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-final、finally、finalize的区别✔"}},[t._v("#")]),t._v(" 11.final、finally、finalize的区别✔")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("final")]),t._v("：修饰类（不可被继承）、方法（不可被重写）、变量（不能改变）")]),t._v(" "),a("li",[a("code",[t._v("finally")]),t._v("：异常处理的一部分，通常情况一定执行")]),t._v(" "),a("li",[a("code",[t._v("finalize")]),t._v("：是"),a("code",[t._v("java.lang.Object")]),t._v("里定义的方法，在gc启动，垃圾回收时调用")])]),t._v(" "),a("h3",{attrs:{id:"_12-我们能将int强制转换为-byte类型的变量吗-如果该值大于byte-类型的范围-将会出现什么现象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-我们能将int强制转换为-byte类型的变量吗-如果该值大于byte-类型的范围-将会出现什么现象"}},[t._v("#")]),t._v(" 12.我们能将int强制转换为 byte类型的变量吗？如果该值大于byte 类型的范围，将会出现什么现象")]),t._v(" "),a("p",[t._v("可以，我们可以做强制转换，但是在Java中，int是32位，byte是8位，如果强制做转化，int类型的高24位将会被丢弃。")]),t._v(" "),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),a("h3",{attrs:{id:"_13-为什么要用static关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-为什么要用static关键字"}},[t._v("#")]),t._v(" 13.为什么要用static关键字")]),t._v(" "),a("p",[t._v("只想为特定域分配单一存储空间，不考虑要创建多少对象或者说根本不创建任何对象，再就是我们想在没有创建对象的情况下也想调用方法")]),t._v(" "),a("h3",{attrs:{id:"_14-static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法"}},[t._v("#")]),t._v(' 14."static"关键字是什么意思？Java中是否可以覆盖（override）一个private或者是static的方法')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问")])]),t._v(" "),a("li",[t._v("不可以覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。")])]),t._v(" "),a("h3",{attrs:{id:"_15-是否可以在static环境中访问非static变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-是否可以在static环境中访问非static变量"}},[t._v("#")]),t._v(" 15.是否可以在static环境中访问非static变量")]),t._v(" "),a("ul",[a("li",[t._v("不可以，非static变量可能还没有创建出来")])]),t._v(" "),a("h3",{attrs:{id:"_16-static静态方法能不能引用非静态资源✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-static静态方法能不能引用非静态资源✔"}},[t._v("#")]),t._v(" 16.static静态方法能不能引用非静态资源✔")]),t._v(" "),a("p",[t._v("不能，new的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它")]),t._v(" "),a("ul",[a("li",[t._v("非static方法是要与对象实例息息相关的，必须在创建一个对象后，才可以在该对象上进行非static方法调用，而static方法跟类相关的，不需要创建对象，可以由类直接调用。")]),t._v(" "),a("li",[t._v("当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑是不成立的")]),t._v(" "),a("li",[t._v("因此，一个static方法内部不可以发出对非static方法的调用。")])]),t._v(" "),a("h3",{attrs:{id:"_17-static静态方法里面能不能引用静态资源-非静态方法里面能不能引用静态资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-static静态方法里面能不能引用静态资源-非静态方法里面能不能引用静态资源"}},[t._v("#")]),t._v(" 17.static静态方法里面能不能引用静态资源？非静态方法里面能不能引用静态资源")]),t._v(" "),a("p",[t._v("都可以")]),t._v(" "),a("h3",{attrs:{id:"_18-static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么✔"}},[t._v("#")]),t._v(" 18.Static静态代码块、构造代码块、普通代码块、构造函数的执行顺序是什么✔")]),t._v(" "),a("ul",[a("li",[t._v("基本上代码块分为三种：Static静态代码块、构造代码块、普通代码块")]),t._v(" "),a("li",[t._v("代码块执行顺序"),a("strong",[t._v("静态代码块——> 构造代码块 ——> 构造函数——> 普通代码块")])]),t._v(" "),a("li",[t._v("继承中代码块执行顺序："),a("strong",[t._v("父类静态代码块——>子类静态代码块——>父类构造代码块——>父类构造函数——>子类构造代码块——>子类构造函数——>父类普通代码块——>子类普通代码块")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"静态代码块"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"构造代码块"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"构造器"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"普通代码块"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("构造代码块是在类中定义的一段代码块，用于在对象创建时执行某些操作")]),t._v("。每次创建对象时，构造代码块会自动执行，并且在所有构造方法之前执行，可以用来初始化实例变量或执行其它必要的操作。")]),t._v(" "),a("p",[a("strong",[t._v("普通代码块是在方法或类中定义的一段代码块")]),t._v("，用于在程序运行时执行某些操作。普通代码块可以在方法内部定义，也可以在类中定义，但不能单独定义。普通代码块在定义后会在程序运行时被执行，可以用来初始化局部变量或执行其它必要的操作。")])]),t._v(" "),a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),a("h3",{attrs:{id:"_19-面向对象和面向过程的区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-面向对象和面向过程的区别✔"}},[t._v("#")]),t._v(" 19.面向对象和面向过程的区别✔")]),t._v(" "),a("p",[a("strong",[t._v("面向对象")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("简单来说，面向对象的开发范式中，程序员将问题分解成一个一个步骤，对每个步骤进行相应的抽象，形成对象，通过不同对象之间的调用，组合解决问题。")]),t._v(" "),a("p",[t._v("就是说，在进行面向对象进行编程的时候，要把属性、行为等封装成对象，然后基于这些对象及对象的能力进行业务逻辑的实现。")]),t._v(" "),a("ul",[a("li",[t._v("面向对象中把某一类事物所共有的属性和行为抽象出来之后就形成了一个类，类的一个实际例子就叫对象")]),t._v(" "),a("li",[t._v("类是具有共同属性名称和行为的一组对象的抽象，而对象则是一个类的真实例子")])])]),t._v(" "),a("li",[a("p",[t._v("优点：易维护、易复用")]),t._v(" "),a("p",[t._v("缺点：性能比面向过程低")])])]),t._v(" "),a("p",[a("strong",[t._v("面向过程")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("面向过程(Procedure Oriented)是一种以过程为中心的编程思想，是一种自顶而下的编程模式。最典型的面向过程的编程语言就是C语言。")]),t._v(" "),a("p",[t._v("简单来说，面向过程的开发范式中，程序员需要把问题分解成一个一个步骤，每个步骤用函数实现，依次调用即可。")])]),t._v(" "),a("li",[a("p",[t._v("优点：性能比面向对象高")]),t._v(" "),a("p",[t._v("缺点：没有面向对象易维护、易复用")])])]),t._v(" "),a("h3",{attrs:{id:"_20-讲讲面向对象三大特征✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-讲讲面向对象三大特征✔"}},[t._v("#")]),t._v(" 20.讲讲面向对象三大特征✔")]),t._v(" "),a("p",[a("strong",[t._v("封装")])]),t._v(" "),a("ul",[a("li",[t._v("把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏")]),t._v(" "),a("li",[t._v("简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。"),a("strong",[t._v("在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("继承")])]),t._v(" "),a("ul",[a("li",[t._v("继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。")]),t._v(" "),a("li",[t._v("通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。")]),t._v(" "),a("li",[t._v("子类可以通过继承获得父类的非私有属性和非私有方法")])]),t._v(" "),a("p",[a("strong",[t._v("多态")])]),t._v(" "),a("ul",[a("li",[t._v("父类中定义的属性和方法被子类继承之后，具有不同的行为，或者说在各个子类中具有不同的含义的行为")]),t._v(" "),a("li",[t._v("多态机制使具有不同内部结构的对象可以共享相同的外部接口。")])]),t._v(" "),a("h3",{attrs:{id:"_21-java语言是如何实现多态的✔❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-java语言是如何实现多态的✔❗"}},[t._v("#")]),t._v(" 21.Java语言是如何实现多态的✔❗")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("多态机制包括静态多态（编译时多态）和动态多态（运行时多态）")]),t._v(" "),a("p",[t._v("静态多态比如说重载，动态多态一般指在运行时才能确定调用哪个方法。")])]),t._v(" "),a("li",[a("p",[t._v("多态实现方式：子类继承父类（extends）和类实现接口（implements）")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("多态核心之处就在于对父类方法的改写或对接口方法的实现，以取得在运行时不同的执行效果。")])])]),t._v(" "),a("li",[a("p",[t._v("Java 里对象方法的调用是依靠类信息里的方法表实现的，对象方法引用调用和接口方法引用调用的大致思想是一样的。当调用对象的某个方法时，JVM查找该对象类的方法表以确定该方法的直接引用地址，有了地址后才真正调用该方法。")])])]),t._v(" "),a("p",[a("strong",[t._v("我们通常所说的多态指的都是运行时多态，也就是编译时不确定究竟调用哪个具体方法，一直延迟到运行时才能确定。")])]),t._v(" "),a("p",[t._v("Java实现多态有 3 个必要条件："),a("strong",[t._v("继承、重写和向上转型")]),t._v("。只有满足这 3 个条件，开发人员才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而执行不同的行为。")]),t._v(" "),a("ul",[a("li",[t._v("继承：在多态中必须存在有继承关系的子类和父类。")]),t._v(" "),a("li",[t._v("重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。")]),t._v(" "),a("li",[t._v("向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才既能可以调用父类的方法，又能调用子类的方法。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"im Parent"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.有类继承或者接口实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.子类要重写父类的方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"im Son"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Daughter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.有类继承或者接口实现")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.子类要重写父类的方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"im Daughter"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.父类的引用指向子类的对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Daughter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.父类的引用指向子类的对象")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n *这样，就实现了多态，同样是Parent类的实例，p.call 调用的是Son类的实现、p1.call调用的是Daughter的实现。\n *\n *有人说，你自己定义的时候不就已经知道p是son，p1是Daughter了么。但是，有些时候你用到的对象并不都是自己声明的。\n *\n *比如Spring 中的IOC出来的对象，你在使用的时候就不知道他是谁，或者说你可以不用关心他是谁。根据具体情况而定。\n */")]),t._v("\n")])])]),a("h3",{attrs:{id:"_22-重载-overload-和重写-override-的区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-重载-overload-和重写-override-的区别是什么✔"}},[t._v("#")]),t._v(" 22.重载（Overload）和重写（Override）的区别是什么✔")]),t._v(" "),a("p",[a("strong",[t._v("重载")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在同一个类中，同一个方法名，参数个数不同，参数类型不同，顺序不同")]),t._v(" "),a("p",[t._v("就是说在同一个类中，多个函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。")])])]),t._v(" "),a("p",[a("strong",[t._v("重写")])]),t._v(" "),a("ul",[a("li",[t._v("子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作")]),t._v(" "),a("li",[t._v("返回值范围小于等于父类，抛出异常范围小于等于父类，因为不能坑die~~")]),t._v(" "),a("li",[a("strong",[t._v("访问修饰符范围大于等于父类")]),t._v("；"),a("strong",[t._v("如果父类方法访问修饰符为private则子类就不能重写该方法")])])]),t._v(" "),a("h3",{attrs:{id:"_23-重载的方法能否根据返回值类型进行区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-重载的方法能否根据返回值类型进行区分"}},[t._v("#")]),t._v(" 23.重载的方法能否根据返回值类型进行区分")]),t._v(" "),a("p",[t._v("不能，因为调用时不指定类型信息")]),t._v(" "),a("h3",{attrs:{id:"_24-构造器-constructor-是否可被重写-override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-构造器-constructor-是否可被重写-override"}},[t._v("#")]),t._v(" 24.构造器（constructor）是否可被重写（override）")]),t._v(" "),a("p",[t._v("不能被继承，因此不能被重写")]),t._v(" "),a("h3",{attrs:{id:"_25-抽象类和接口的区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-抽象类和接口的区别是什么✔"}},[t._v("#")]),t._v(" 25.抽象类和接口的区别是什么✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内部方法细节")]),t._v(" "),a("ul",[a("li",[t._v("抽象类中可以作方法声明，也可以做方法实现。")]),t._v(" "),a("li",[t._v("接口中只能存在"),a("code",[t._v("public static final")]),t._v("方法，因此接口只能做方法声明，不能做方法的实现")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("成员变量类型")])]),t._v(" "),a("ul",[a("li",[t._v("抽象类中成员变量可以是各种类型，")]),t._v(" "),a("li",[t._v("接口中的成员变量只能是"),a("code",[t._v("public static final")])])])]),t._v(" "),a("li",[a("p",[t._v("继承、实现")]),t._v(" "),a("ul",[a("li",[t._v("抽象类要被子类继承，抽象类只能继承一个。")]),t._v(" "),a("li",[t._v("接口要被子类实现，接口可以实现多个")])])]),t._v(" "),a("li",[a("p",[t._v("关键字")]),t._v(" "),a("ul",[a("li",[t._v("抽象类的关键字是abstract")]),t._v(" "),a("li",[t._v("接口的关键字是interface")])])]),t._v(" "),a("li",[a("p",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("接口中不能含有静态代码块和静态方法，而抽象类可以有静态代码块和静态方法；")])],1)])]),t._v(" "),a("li",[a("p",[t._v("抽象类可以有构造方法，接口中不能有构造方法。")])]),t._v(" "),a("li",[a("p",[t._v("抽象级别（从高到低）：接口>抽象类>实现类。")])]),t._v(" "),a("li",[a("p",[t._v("抽象类主要是用来抽象类别，接口主要是用来抽象方法功能。")])])]),t._v(" "),a("h3",{attrs:{id:"_26-抽象类能使用final修饰吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-抽象类能使用final修饰吗"}},[t._v("#")]),t._v(" 26.抽象类能使用final修饰吗")]),t._v(" "),a("ul",[a("li",[t._v("不能，因为需要用其他类进行继承")])]),t._v(" "),a("h3",{attrs:{id:"_27-java创建对象有哪几种方式✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-java创建对象有哪几种方式✔"}},[t._v("#")]),t._v(" 27.java创建对象有哪几种方式✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、new 创建新对象")]),t._v(" "),a("p",[t._v("使用类的构造函数和 "),a("code",[t._v("new")]),t._v(" 关键字来创建对象，例如："),a("code",[t._v("ClassName object = new ClassName();")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("2、通过反射机制")]),t._v(" "),a("p",[t._v("通过使用 Java 的反射 API，可以在运行时动态地创建对象。这种方式通常用于需要在运行时动态确定类名的情况。")])]),t._v(" "),a("li",[a("p",[t._v("3、采用 clone 机制")]),t._v(" "),a("p",[t._v("如果一个类实现了 "),a("code",[t._v("Cloneable")]),t._v(" 接口，就可以使用 "),a("code",[t._v("clone()")]),t._v(" 方法创建该类的副本。")])]),t._v(" "),a("li",[a("p",[t._v("4、通过序列化机制")]),t._v(" "),a("p",[t._v("通过将对象写入流中并从流中读取对象来创建对象。这种方式可以将对象保存到磁盘或通过网络传输。")])]),t._v(" "),a("li",[a("p",[t._v("5、使用 "),a("code",[t._v("newInstance()")]),t._v(" 方法：对于那些提供默认构造函数的类，可以使用 "),a("code",[t._v("Class")]),t._v(" 对象的 "),a("code",[t._v("newInstance()")]),t._v(" 方法来创建对象。")])])]),t._v(" "),a("h3",{attrs:{id:"_28-对象的创建过程✔❤❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-对象的创建过程✔❤❗"}},[t._v("#")]),t._v(" 28.对象的创建过程✔❤❗")]),t._v(" "),a("ul",[a("li",[t._v("1、类加载：当程序引用一个类时，Java虚拟机（JVM）会通过类加载器查找并加载该类的字节码文件。类加载是将类的字节码文件加载到内存，并在方法区中创建类的Class对象的过程。")]),t._v(" "),a("li",[t._v("2、分配内存：在内存中为对象分配一块连续的内存空间，用于存储对象的实例变量。")]),t._v(" "),a("li",[t._v("3、初始化零值：在内存中分配的空间被初始化为默认值，基本类型的实例变量被初始化为0或false，引用类型的实例变量被初始化为null。")]),t._v(" "),a("li",[t._v("4、设置对象头信息：在对象头中存储对象的元数据，如哈希码、GC 信息、锁状态等。")]),t._v(" "),a("li",[t._v("5、"),a("strong",[t._v("执行构造方法")]),t._v("：根据对象所属类的构造方法，执行相应的构造逻辑，完成对象的初始化。构造方法的执行会对对象的实例变量进行赋值操作，可以进行自定义的初始化逻辑。")]),t._v(" "),a("li",[t._v("6、"),a("strong",[t._v("返回对象的引用")]),t._v("：对象创建完成后，返回一个指向该对象的引用，可以通过该引用来访问和操作对象的实例变量和方法。")])]),t._v(" "),a("p",[t._v("值得注意的是，Java 中的对象创建是在堆内存中完成的，而不是栈内存。栈内存只存储了对象的引用，而真正的对象实例及其数据是分配在堆内存中的。")]),t._v(" "),a("p",[t._v("另外，如果对象是通过关键字 "),a("code",[t._v("new")]),t._v(" 创建的，则会在堆内存中分配新的对象；如果是通过反射或克隆等方式创建的对象，则会相应地调用不同的机制来完成对象的创建过程。")]),t._v(" "),a("h3",{attrs:{id:"_29-什么是不可变对象-好处是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-什么是不可变对象-好处是什么"}},[t._v("#")]),t._v(" 29.什么是不可变对象?好处是什么")]),t._v(" "),a("ul",[a("li",[t._v("任何修改都会创建一个新的对象（如：String、Integer）")]),t._v(" "),a("li",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("线程安全")])],1)])]),t._v(" "),a("h3",{attrs:{id:"_30-值传递和引用传递的区别的什么-为什么说java中只有值传递✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-值传递和引用传递的区别的什么-为什么说java中只有值传递✔"}},[t._v("#")]),t._v(" 30.值传递和引用传递的区别的什么？为什么说Java中只有值传递✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("值传递：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。")])]),t._v(" "),a("li",[a("p",[t._v("引用传递：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的是引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("举例：你有一把钥匙，当你的朋友想要去你家的时候，如果你"),a("code",[t._v("直接")]),t._v("把你的钥匙给他了，这就是引用传递。")]),t._v(" "),a("p",[t._v("这种情况下，如果他对这把钥匙做了什么事情，比如他在钥匙上刻下了自己名字，那么这把钥匙还给你的时候，你自己的钥匙上也会多出他刻的名字。")]),t._v(" "),a("p",[t._v("你有一把钥匙，当你的朋友想要去你家的时候，你"),a("code",[t._v("复刻")]),t._v("了一把新钥匙给他，自己的还在自己手里，这就是值传递。")]),t._v(" "),a("p",[t._v("这种情况下，他对这把钥匙做什么都不会影响你手里的这把钥匙。")])]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("值传递和引用传递最大的区别是传递的过程中有没有复制出一个副本来，如果是传递副本，那就是值传递，否则就是引用传递")]),t._v("。")],1)]),t._v(" "),a("p",[t._v("在Java中，其实是通过值传递实现的参数传递，只不过对于Java对象的传递，传递的内容是对象的引用")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断输出结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 引用传递")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 堆栈内存分析")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("operater")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("operater")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果：AB A")]),t._v("\n")])])]),a("h3",{attrs:{id:"_31-能否创建一个包含可变对象的不可变对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-能否创建一个包含可变对象的不可变对象"}},[t._v("#")]),t._v(" 31.能否创建一个包含可变对象的不可变对象")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("final Person[] persons = new Persion[]{}")])])]),t._v(" "),a("h3",{attrs:{id:"_32-java支持多继承么-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-java支持多继承么-为什么"}},[t._v("#")]),t._v(" 32.Java支持多继承么,为什么")]),t._v(" "),a("p",[t._v("不支持多继承，原因：")]),t._v(" "),a("ul",[a("li",[t._v("安全性的考虑，如果子类继承的多个父类里面有相同的方法或者属性，子类将不知道具体要继承哪个。")]),t._v(" "),a("li",[t._v("Java提供了接口和内部类以达到实现多继承功能，弥补单继承的缺陷。")])]),t._v(" "),a("h3",{attrs:{id:"_33-接口是否可继承接口-抽象类是否可实现接口-抽象类是否可继承实体类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-接口是否可继承接口-抽象类是否可实现接口-抽象类是否可继承实体类"}},[t._v("#")]),t._v(" 33.接口是否可继承接口？抽象类是否可实现接口？抽象类是否可继承实体类")]),t._v(" "),a("p",[t._v("都可以的")]),t._v(" "),a("h2",{attrs:{id:"对象相等判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象相等判断"}},[t._v("#")]),t._v(" 对象相等判断")]),t._v(" "),a("h3",{attrs:{id:"_34-和equals区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-和equals区别是什么✔"}},[t._v("#")]),t._v(" 34.==和equals区别是什么✔")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("==")]),t._v("：如果是基本数据类型，比较是值，如果是引用类型，比较的是引用地址")]),t._v(" "),a("li",[a("code",[t._v("equals")]),t._v("：具体看各个类重写"),a("code",[t._v("equals")]),t._v("方法之后的比较逻辑，比如String类，虽然是引用类型，但是String类中重写了"),a("code",[t._v("equals()")]),t._v("方法，方法内部比较的是字符串中的各个字符是否全部相等\n"),a("ul",[a("li",[t._v("没有重写，相当于“==”")]),t._v(" "),a("li",[t._v("重写后，一般比较对象内容")])])])]),t._v(" "),a("h3",{attrs:{id:"_35-介绍下hashcode-hashcode的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-介绍下hashcode-hashcode的作用是什么"}},[t._v("#")]),t._v(" 35.介绍下hashCode()？hashCode的作用是什么")]),t._v(" "),a("ul",[a("li",[t._v("hashCode()->哈希值(散列码)->确定该对象在哈希表中的索引位置")])]),t._v(" "),a("p",[t._v("作用：")]),t._v(" "),a("ul",[a("li",[t._v("hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；")]),t._v(" "),a("li",[t._v("如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；")]),t._v(" "),a("li",[t._v("如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；")]),t._v(" "),a("li",[t._v("两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中.")])]),t._v(" "),a("h3",{attrs:{id:"_36-为什么要有hashcode❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-为什么要有hashcode❗"}},[t._v("#")]),t._v(" 36.为什么要有hashCode❗")]),t._v(" "),a("ul",[a("li",[t._v("比较对象是否重复")]),t._v(" "),a("li",[t._v("比较对象时候，大大减少了equals()的次数，相应就大大提高了执行速度")]),t._v(" "),a("li",[t._v("【先比较hashCode，在比较equals()】")])]),t._v(" "),a("h3",{attrs:{id:"_37-hashcode-equals-两种方法是什么关系✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-hashcode-equals-两种方法是什么关系✔"}},[t._v("#")]),t._v(" 37.hashCode(),equals()两种方法是什么关系✔")]),t._v(" "),a("ul",[a("li",[t._v("若重写"),a("code",[t._v("equals()")]),t._v("方法，必须重写"),a("code",[t._v("hashcode()")]),t._v(" 方法，确保"),a("code",[t._v("equals()")]),t._v("方法判断结果为true的两个对象具备相等的"),a("code",[t._v("hashcode()")]),t._v("方法返回值【如果两个对象相同，那么他们的hashcode应该相同】")]),t._v(" "),a("li",[t._v("如果两个对象不相同，他们的hashcode可能相同")])]),t._v(" "),a("h3",{attrs:{id:"_38-为什么重写equals方法必须重写hashcode方法✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-为什么重写equals方法必须重写hashcode方法✔"}},[t._v("#")]),t._v(" 38.为什么重写equals方法必须重写hashcode方法✔")]),t._v(" "),a("p",[t._v("如果只重写equals方法，不重写hashCode方法。就有可能导致"),a("code",[t._v("a.equals(b)")]),t._v("这个表达式成立，但是hashCode却不同")]),t._v(" "),a("p",[t._v("那么这个只重写equals方法的对象在使用散列集合进行存储的时候就会出现问题，因为散列集合是使用HashCode来计算key的存储位置，如果存储两个完全相同的对象，但是有不同的hashCode，就会导致这两个对象存储在hash表的不同位置，我们想要根据这个对象去获取数据的时候，就会出现一个悖论，"),a("strong",[t._v("一个完全相同的对象会存储在hash表的两个位置")]),t._v("，就会破坏约定俗成的规则，使得在程序中出现一些不可预料的错误。")]),t._v(" "),a("h3",{attrs:{id:"_39-两个对象的hashcode-相同-则-equals-是否也一定为-true"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-两个对象的hashcode-相同-则-equals-是否也一定为-true"}},[t._v("#")]),t._v(" 39.两个对象的hashCode()相同，则 equals()是否也一定为 true")]),t._v(" "),a("p",[t._v("两个对象equals相等，则它们的hashcode必须相等，如果两个对象的hashCode()相同，则equals()不一定为true。")]),t._v(" "),a("p",[a("strong",[t._v("hashCode 的常规协定：")])]),t._v(" "),a("ul",[a("li",[t._v("在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。")]),t._v(" "),a("li",[t._v("两个对象的equals()相等，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。")]),t._v(" "),a("li",[t._v("两个对象的equals()不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不要求一定生成不同的整数结果。但是，为不相等的对象生成不同整数结果可以提高哈希表的性能。")])]),t._v(" "),a("h2",{attrs:{id:"string相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string相关"}},[t._v("#")]),t._v(" String相关")]),t._v(" "),a("h3",{attrs:{id:"_40-string-stringbuffer-stringbuilder的区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-string-stringbuffer-stringbuilder的区别是什么✔"}},[t._v("#")]),t._v(" 40.String,StringBuffer,StringBuilder的区别是什么✔")]),t._v(" "),a("p",[t._v("String、StringBuffer和StringBuilder都是在 Java 中用于处理字符串的类，底层是"),a("code",[t._v("char[]")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("不可变性")]),t._v(":\n"),a("ul",[a("li",[t._v("String 类是不可变的，一旦创建了一个String对象，就不能更改其内容。"),a("strong",[t._v("每次对字符串进行修改时，都会创建一个新的字符串对象，存在内存开销")]),t._v("。String是final类，不能被继承")]),t._v(" "),a("li",[t._v("StringBuffer 和 StringBuilder 类是可变的，它们可以通过修改现有对象来实现字符串的操作。继承自AbstractStringBuilder")])])]),t._v(" "),a("li",[a("strong",[t._v("线程安全性")]),t._v("：\n"),a("ul",[a("li",[t._v("String 是线程安全的，因为它的不可变性保证了多个线程操作同一个字符串对象时不会产生问题。")]),t._v(" "),a("li",[t._v("StringBuffer 是线程安全的，它的方法使用了"),a("strong",[t._v("同步锁")]),t._v("来确保在多线程环境下的线程安全性。")]),t._v(" "),a("li",[t._v("StringBuilder 不是线程安全的，它的方法没有使用同步锁，因此在多线程环境下使用时需要自行处理同步问题。")])])]),t._v(" "),a("li",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("性能")]),t._v("：")],1),t._v(" "),a("ul",[a("li",[t._v("由于 String 是不可变的，每次对字符串进行修改都会创建一个新的字符串对象，这会带来较大的内存开销。")]),t._v(" "),a("li",[t._v("StringBuffer 的方法使用同步锁，保证了线程安全性，但可能会影响性能。")]),t._v(" "),a("li",[t._v("StringBuilder 不考虑线程安全，方法未使用同步锁，因此在单线程环境下执行性能更好。")])])])]),t._v(" "),a("h3",{attrs:{id:"_41-string为什么要设计成不可变的✔❤❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-string为什么要设计成不可变的✔❤❗"}},[t._v("#")]),t._v(" 41.String为什么要设计成不可变的✔❤❗")]),t._v(" "),a("p",[t._v("保证数据的完整性、线程安全性、缓存的利用、安全性、效率优化")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("保护数据的完整性")]),t._v("：")]),t._v(" "),a("p",[t._v("不可变性确保了字符串对象的内容不会被修改。这是因为字符串被广泛用作映射关键字、缓存哈希码和网络传输中的标识符等，若可变，可能会导致数据的不一致性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("线程安全性")]),t._v("：")]),t._v(" "),a("p",[t._v("由于 String 对象的不可变性，多个线程可以共享同一个字符串对象，而无需担心静态条件和并发修改问题。这样简化了在多线程环境下对字符串的使用和处理，提高了线程安全性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("缓存的利用")]),t._v("：")]),t._v(" "),a("p",[t._v("由于 String 的不可变性，字符串对象可以被缓存，以便在需要时重复使用。例如，Java 中的字符串常量池就可以通过缓存相同的字符串值来提高内存利用率和性能。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("安全性")]),t._v("：")]),t._v(" "),a("p",[t._v("在 Java 中，String 类作为参数传递给其他方法时，由于不可变性，你无需担心参数的值会被修改，从而增加了程序的可靠性和安全性。例如， 网络连接地址URL，文件路径path，反射机制所需要的String参数")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("效率优化")]),t._v("：")]),t._v(" "),a("p",[t._v("字符串不可变性允许进行一些额外的优化，加快了字符串的处理速度。例如，可以使用字符串的哈希值进行缓存、通过共享相同的字符串实例来节省内存，并且可以避免重复计算。")])])]),t._v(" "),a("p",[t._v("因为字符串不可变，所以可以用字符串池缓存，可以大大节省堆内存。而且还可以提前对hashcode进行缓存，更加高效")]),t._v(" "),a("p",[t._v("由于字符串是应用最广泛的数据结构，提高字符串的性能对提高整个应用程序的总体性能有相当大的影响。")]),t._v(" "),a("h3",{attrs:{id:"_42-字符型常量和字符串常量的区别❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-字符型常量和字符串常量的区别❕"}},[t._v("#")]),t._v(" 42.字符型常量和字符串常量的区别❕")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("形式上：字符常量是单引号引起的一个字符，字符串常量是双引号引起的若干个字符；")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("含义上")]),t._v("：字符常量相当于一个整型值( ASCII 值),可以参加表达式运算；字符串常量代表一个地址值(该字符串在内存中存放位置，相当于对象；")])]),t._v(" "),a("li",[a("p",[t._v("占内存上：字符常量只占2个字节；字符串常量占若干个字节(至少一个字符结束标志) (注意: char 在Java中占两个字节)。")])])]),t._v(" "),a("h3",{attrs:{id:"_43-什么是字符串常量池❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-什么是字符串常量池❕"}},[t._v("#")]),t._v(" 43.什么是字符串常量池❕")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("避免字符的重复创建，其维护了一块特殊的内存空间")])]),t._v(" "),a("li",[t._v("当需要使用字符串时，先去字符串池中查看该字符串是否已经存在，如果存在，则可以直接使用，如果不存在，初始化，并将该字符串放入字符串常量池中。")])]),t._v(" "),a("h3",{attrs:{id:"_44-string-str-aaa-与string-str-new-string-aaa-一样吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-string-str-aaa-与string-str-new-string-aaa-一样吗"}},[t._v("#")]),t._v(' 44.String str="aaa"与String str=new String("aaa")一样吗')]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v('String b = new String("aaa");')]),t._v("，"),a("strong",[t._v("程序会在堆内存中开辟一片新空间存放新对象")]),t._v("，"),a("strong",[t._v("同时会将”aaa”字符串放入常量池")]),t._v("，相当于创建了两个对象，无论常量池中有没有”aaa”字符串，程序都会在堆内存中开辟一片新空间存放新对象。 （"),a("strong",[t._v('考虑常量池中是否有"aaa"')]),t._v("）")])]),t._v(" "),a("h3",{attrs:{id:"_45-new-string-abc-到底创建了几个对象✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-new-string-abc-到底创建了几个对象✔"}},[t._v("#")]),t._v(' 45.new String("abc")到底创建了几个对象✔')]),t._v(" "),a("p",[t._v("当使用"),a("code",[t._v("new")]),t._v('关键字创建字符串对象时，无论常量池中是否存在相同值的字符串，都会在堆内存中创建一个新的字符串对象。因此，即使常量池中已经存在字符串"abc"，这个语句也会创建一个新的堆对象，该对象包含与常量池中的字符串相同的值。')]),t._v(" "),a("p",[t._v("如果常量池中不存在相同字符串时：")]),t._v(" "),a("ol",[a("li",[t._v('在堆内存中创建了一个新的字符串对象，该对象包含值为"abc"的字符串。')]),t._v(" "),a("li",[t._v('在常量池中存在一个字符串"abc"的对象。')])]),t._v(" "),a("p",[t._v("因此，如果常量池中不存在相同字符串时，总共创建了两个对象：一个位于堆中，另一个位于常量池中。")]),t._v(" "),a("p",[t._v('总结：如果 "abc" 的这个字符串常量在常量池中不存在，需要创建'),a("strong",[t._v("abc 这个字符串常量、new String 实例对象")]),t._v('；如果 "abc" 字符串存在，只会创建一个 String 对象')]),t._v(" "),a("h3",{attrs:{id:"_46-string是最基本的数据类型吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-string是最基本的数据类型吗"}},[t._v("#")]),t._v(" 46.String是最基本的数据类型吗")]),t._v(" "),a("p",[t._v("不是")]),t._v(" "),a("h3",{attrs:{id:"_47-string有哪些特性❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-string有哪些特性❕"}},[t._v("#")]),t._v(" 47.String有哪些特性❕")]),t._v(" "),a("ul",[a("li",[t._v("不变性（只读）")]),t._v(" "),a("li",[a("strong",[t._v("常量池优化")])]),t._v(" "),a("li",[t._v("final（不能被继承，提高安全性）")])]),t._v(" "),a("h3",{attrs:{id:"_48-在使用-hashmap-的时候-用-string-做-key-有什么好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-在使用-hashmap-的时候-用-string-做-key-有什么好处"}},[t._v("#")]),t._v(" 48.在使用 HashMap 的时候，用 String 做 key 有什么好处")]),t._v(" "),a("ul",[a("li",[t._v("String 不可变，创建字符串时候（Hashcode值已经被缓存），不需要再次计算，相比于其他对象更快")])]),t._v(" "),a("h3",{attrs:{id:"_49-string类能被继承吗-为什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-string类能被继承吗-为什么✔"}},[t._v("#")]),t._v(" 49.String类能被继承吗，为什么✔")]),t._v(" "),a("p",[t._v("首先，String是一个final修饰的类，final修饰的类不可以被继承。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),a("p",[a("strong",[t._v("String类为什么不能被继承呢？")])]),t._v(" "),a("p",[t._v("有两个原因：")]),t._v(" "),a("ul",[a("li",[t._v("效率性，String 类作为最常用的类之一，禁止被继承和重写，可以提高效率。")]),t._v(" "),a("li",[t._v("安全性，String 类中有很多调用底层的本地方法，调用了操作系统的 API，如果方法可以重写，可能被植入恶意代码，破坏程序。")])]),t._v(" "),a("h3",{attrs:{id:"_50-string-类的常用方法都有那些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-string-类的常用方法都有那些"}},[t._v("#")]),t._v(" 50.String 类的常用方法都有那些")]),t._v(" "),a("ul",[a("li",[t._v("indexOf()：返回指定字符的索引。")]),t._v(" "),a("li",[t._v("charAt()：返回指定索引处的字符。")]),t._v(" "),a("li",[t._v("replace()：字符串替换。")]),t._v(" "),a("li",[t._v("trim()：去除字符串两端空白。")]),t._v(" "),a("li",[t._v("split()：分割字符串，返回一个分割后的字符串数组。")]),t._v(" "),a("li",[t._v("getBytes()：返回字符串的 byte 类型数组。")]),t._v(" "),a("li",[t._v("length()：返回字符串长度。")]),t._v(" "),a("li",[t._v("toLowerCase()：将字符串转成小写字母。")]),t._v(" "),a("li",[t._v("toUpperCase()：将字符串转成大写字符。")]),t._v(" "),a("li",[t._v("substring()：截取字符串。")]),t._v(" "),a("li",[t._v("equals()：字符串比较。")])]),t._v(" "),a("h3",{attrs:{id:"_51-如何将字符串反转呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-如何将字符串反转呢"}},[t._v("#")]),t._v(" 51.如何将字符串反转呢")]),t._v(" "),a("ul",[a("li",[t._v("使用 StringBuilder 或 StringBuffer 的 reverse 方法，本质都调用了它们的父类 AbstractStringBuilder 的 reverse 方法实现。（JDK1.8）")]),t._v(" "),a("li",[t._v("使用chatAt函数，倒过来输出；")])]),t._v(" "),a("h2",{attrs:{id:"包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包装类型"}},[t._v("#")]),t._v(" 包装类型")]),t._v(" "),a("h3",{attrs:{id:"_52-包装类型是什么-基本类型和包装类型有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-包装类型是什么-基本类型和包装类型有什么区别"}},[t._v("#")]),t._v(" 52.包装类型是什么？基本类型和包装类型有什么区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("基本数据类型")]),t._v(" "),a("th",[t._v("包装类")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("byte")]),t._v(" "),a("td",[t._v("Byte")])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("Boolean")])]),t._v(" "),a("tr",[a("td",[t._v("short")]),t._v(" "),a("td",[t._v("Short")])]),t._v(" "),a("tr",[a("td",[t._v("char")]),t._v(" "),a("td",[t._v("Character")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("Integer")])]),t._v(" "),a("tr",[a("td",[t._v("long")]),t._v(" "),a("td",[t._v("Long")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("Float")])]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td",[t._v("Double")])])])]),t._v(" "),a("p",[t._v("在这八个类名中，除了 Integer 和 Character 类以后，其它六个类的类名和基本数据类型一致，只是类名的第一个字母大写即可。")]),t._v(" "),a("ul",[a("li",[t._v("包装类型可以为null，基本数据类型不可以")]),t._v(" "),a("li",[a("strong",[t._v("包装类型可用于泛型，而基本数据类型不可以")])]),t._v(" "),a("li",[a("strong",[t._v("基本类型比包装类型更高效")])]),t._v(" "),a("li",[t._v("自动装箱都是通过包装类的 "),a("code",[t._v("valueOf()")]),t._v(" 方法来实现的.自动拆箱都是通过包装类对象的 "),a("code",[t._v("xxxValue()")]),t._v(" 来实现的。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"基本数据类型<==>包装类"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动装箱 基本数据类型->包装类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动拆箱 包装类->基本数据类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("age1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"基本数据类型、包装类==>String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//基本数据类型->String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//包装类->String")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String==> 基本数据类型、包装类"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String->基本数据类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//int age3 = Integer.parseIns(s);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String->包装类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Integer age4 = Integer.valueOf(s); //String->包装类")]),t._v("\n")])])]),a("h3",{attrs:{id:"_53-解释一下自动装箱和自动拆箱✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-解释一下自动装箱和自动拆箱✔"}},[t._v("#")]),t._v(" 53.解释一下自动装箱和自动拆箱✔")]),t._v(" "),a("ul",[a("li",[t._v("自动装箱：基本数据类型--\x3e对象，就是将基本数据类型自动转换成对应的包装类。")]),t._v(" "),a("li",[t._v("自动拆箱：对象 --\x3e 基本数据类型，就是将包装类自动转换成对应的基本数据类型。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动装箱")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动拆箱")]),t._v("\n")])])]),a("h3",{attrs:{id:"_54-int-和-integer-有什么区别✔❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-int-和-integer-有什么区别✔❗"}},[t._v("#")]),t._v(" 54.int 和 Integer 有什么区别✔❗")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据类型：Integer是int的包装类，int则是java的一种基本的数据类型；")])]),t._v(" "),a("li",[a("p",[t._v("使用：Integer变量必须实例化后才能使用；int变量不需要")])]),t._v(" "),a("li",[a("p",[t._v("本质：Integer实际是对象的引用，当new一个Integer时，实际上生成一个指针指向对象，而int则直接存储数值")])]),t._v(" "),a("li",[a("p",[t._v("默认值：Integer的默认值是null，Interger使用需要判空处理。而int的默认值是0。")])]),t._v(" "),a("li",[a("p",[t._v("存储位置：Integer存储在堆内存中，int类型是直接存储在栈空间")])]),t._v(" "),a("li",[a("p",[t._v("Integer的缓存机制：为了节省内存和提高性能，Integer类在内部通过使用相同的对象引用实现缓存和重用，Integer类默认在-128 ~ 127 之间，可以通过 -XX:AutoBoxCacheMax进行修改，且这种机制仅在自动装箱的时候有用，在使用构造器创建Integer对象时无用。")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("211")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于Integer a = Integer.valueOf(211);")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("211")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于Integer b = Integer.valueOf(211);")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//比较的是对象地址，不相等")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_55-java为什么设计封装类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55-java为什么设计封装类"}},[t._v("#")]),t._v(" 55.Java为什么设计封装类")]),t._v(" "),a("p",[t._v("如：Integer、Long")]),t._v(" "),a("p",[t._v("Java本身是面向对象的语言，一切操作都是以对象作为基础。比如说集合里面存元素，也只支持Object类型，普通类型是无法通过集合来存储的")]),t._v(" "),a("h3",{attrs:{id:"_56-两个new生成的integer变量的对比-integer变量和int变量的对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56-两个new生成的integer变量的对比-integer变量和int变量的对比"}},[t._v("#")]),t._v(" 56.两个new生成的Integer变量的对比，Integer变量和int变量的对比")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、永远不相等")])]),t._v(" "),a("li",[a("p",[t._v("2、会自动拆箱")])])]),t._v(" "),a("h3",{attrs:{id:"_57-非new生成的integer变量和new-integer-生成变量的对比-❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57-非new生成的integer变量和new-integer-生成变量的对比-❕"}},[t._v("#")]),t._v(" 57.非new生成的Integer变量和new Integer()生成变量的对比 ❕")]),t._v(" "),a("ul",[a("li",[t._v("非new生成的对象指的是常量池中的对象")]),t._v(" "),a("li",[t._v("new生成的对象指的是堆空间的的对象")]),t._v(" "),a("li",[t._v("内存地址不同，结果为"),a("strong",[t._v("false")])])]),t._v(" "),a("h3",{attrs:{id:"_58-两个非new生成的integer对象的对比✔❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58-两个非new生成的integer对象的对比✔❕"}},[t._v("#")]),t._v(" 58.两个非new生成的Integer对象的对比✔❕")]),t._v(" "),a("ul",[a("li",[t._v("常量池【-128~127】")]),t._v(" "),a("li",[a("strong",[t._v("超出范围，会在堆空间中新建一个对象")])])]),t._v(" "),a("p",[t._v("Integer是一个封装类型，对应的是一个int类型的包装，Integer对象类型对-128到127之间的数据做了一层缓存，也就是说如果Integer类型的目标值在-128到127之间，就之间从缓存中去获取Integer这样一个对象实例，并且返回，否则会创建应该新的Integer对象，这样做是减少频繁创建Integer带来的消耗，从而去提升性能，如果两个Integer类型在-128到127之间，用==判断，返回的结果则是true，否则是false。")]),t._v(" "),a("h3",{attrs:{id:"_59-为什么阿里巴巴强制要求使用包装类型定义属性❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59-为什么阿里巴巴强制要求使用包装类型定义属性❕"}},[t._v("#")]),t._v(" 59.为什么阿里巴巴强制要求使用包装类型定义属性❕")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("默认值的问题")])]),t._v(" "),a("p",[t._v("使用基本数据类型定义属性的时候，如果没有给属性赋予初始值，会使用默认值")])]),t._v(" "),a("li",[a("p",[t._v("拆箱问题")]),t._v(" "),a("p",[t._v("一些场景下，如果使用基本数据类型定义属性，需要进行多次拆箱和装箱操作，会带来额外的性能开销和代码复杂度，使用包装类型可以避免这个问题，提高代码效率和可读性")])]),t._v(" "),a("li",[a("p",[t._v("java中泛型只能使用对象来存储")]),t._v(" "),a("p",[t._v("如果要在泛型编程中使用基本类型，就必须使用对应的包装类型")])]),t._v(" "),a("li",[a("p",[t._v("包装类型提供了基本类型不具备的方法属性，比如"),a("code",[t._v("hashCode()")]),t._v("，"),a("code",[t._v("equals()")]),t._v("，"),a("code",[t._v("toString()")]),t._v("等")])])]),t._v(" "),a("h2",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),a("h3",{attrs:{id:"_60-什么是反射✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60-什么是反射✔"}},[t._v("#")]),t._v(" 60.什么是反射✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；")])]),t._v(" "),a("li",[a("p",[t._v("对于任意一个对象，都能够调用它的任意一个方法和属性；")])])]),t._v(" "),a("p",[t._v("这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。")]),t._v(" "),a("h3",{attrs:{id:"_61-反射机制的优缺点有哪些✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61-反射机制的优缺点有哪些✔"}},[t._v("#")]),t._v(" 61.反射机制的优缺点有哪些✔")]),t._v(" "),a("p",[t._v("优点：能够运行时动态获取类的实例，提高灵活性")]),t._v(" "),a("ul",[a("li",[t._v("1、增加程序的灵活性，可以在运行的过程中动态对类进行修改和操作")]),t._v(" "),a("li",[t._v("2、提高代码的复用率，比如动态代理，就是用到了反射来实现")]),t._v(" "),a("li",[t._v("3、可以在运行时轻松获取任意一个类的方法、属性，并且还能通过反射进行动态调用")])]),t._v(" "),a("p",[t._v("缺点："),a("strong",[t._v("性能较低，需要解析字节码，将内存中的对象进行解析")])]),t._v(" "),a("ul",[a("li",[t._v("1、反射会涉及到动态类型的解析，所以无法对这些代码进行优化，导致性能要比非反射调用更低。")]),t._v(" "),a("li",[t._v("2、使用反射以后，代码的可读性会下降")]),t._v(" "),a("li",[t._v("3、反射可以绕过一些限制访问的属性或者方法，可能会导致破坏了代码本身的抽象性")])]),t._v(" "),a("h3",{attrs:{id:"_62-如何获取反射中的class对象✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_62-如何获取反射中的class对象✔"}},[t._v("#")]),t._v(" 62.如何获取反射中的Class对象✔")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v('Class.forName("类名路径")')])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("类名.class")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("对象名.getClass()")])])]),t._v(" "),a("li",[a("p",[t._v("如果是基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象。")]),t._v(" "),a("p",[t._v("eg:"),a("code",[t._v("Class intClass = Integer.TYPE;")])])])]),t._v(" "),a("h3",{attrs:{id:"_63-java反射api有几类❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_63-java反射api有几类❕"}},[t._v("#")]),t._v(" 63.Java反射API有几类❕")]),t._v(" "),a("ul",[a("li",[t._v("Class类")]),t._v(" "),a("li",[t._v("Field类")]),t._v(" "),a("li",[t._v("Method类")]),t._v(" "),a("li",[t._v("Constructor类")])]),t._v(" "),a("h3",{attrs:{id:"_64-反射使用的步骤❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64-反射使用的步骤❕"}},[t._v("#")]),t._v(" 64.反射使用的步骤❕")]),t._v(" "),a("p",[t._v("1、获取目标类的Class对象（三种方式）")]),t._v(" "),a("p",[t._v("2、调用Class类中的方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("getFields()")]),t._v("：获取类的公共字段")]),t._v(" "),a("li",[a("code",[t._v("getDeclaredFields()")]),t._v("：获取类的所有字段（包括私有字段）")]),t._v(" "),a("li",[a("code",[t._v("getMethods()")]),t._v("：获取类的公共方法")]),t._v(" "),a("li",[a("code",[t._v("getDeclaredMethods()")]),t._v("：获取类的所有方法（包括私有方法）")])]),t._v(" "),a("p",[t._v("3、使用反射Api进行操作")]),t._v(" "),a("ul",[a("li",[t._v("实例化对象：调用Class对象的"),a("code",[t._v("newInstance()")]),t._v("方法")]),t._v(" "),a("li",[t._v("调用方法：使用Method对象的"),a("code",[t._v("invoke()")]),t._v("方法")]),t._v(" "),a("li",[t._v("访问字段：使用Field对象的"),a("code",[t._v("set()")]),t._v("和"),a("code",[t._v("get()")]),t._v("方法")])]),t._v(" "),a("h3",{attrs:{id:"_65-为什么引入反射概念-反射机制的应用有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_65-为什么引入反射概念-反射机制的应用有哪些"}},[t._v("#")]),t._v(" 65.为什么引入反射概念？反射机制的应用有哪些")]),t._v(" "),a("p",[t._v("反射机制允许程序在运行时"),a("strong",[t._v("获取和操作")]),t._v("其自身的信息，包括类、对象、属性、方法等")]),t._v(" "),a("p",[t._v("1、动态获取类和对象的信息")]),t._v(" "),a("p",[t._v("2、动态加载类和对象的方法")]),t._v(" "),a("p",[t._v("3、运行时注解处理：反射机制可以与注解配合使用，动态地读取类和方法上的注解信息，并根据注解信息做出相应的处理。这在很多框架和库中广泛应用，比如JUnit测试框架中的@Test注解，Spring框架中的依赖注入等。")]),t._v(" "),a("p",[t._v("4、动态代理：通过反射，可以在运行时生成代理对象，使得可以在不修改原有代码的情况下增加额外的处理逻辑。这在AOP编程中经常使用，可以实现诸如日志记录、性能监控等横切关注点的统一处理")]),t._v(" "),a("p",[t._v("5、jdbc数据库连接、Spring框架的使用")]),t._v(" "),a("h3",{attrs:{id:"_66-反射机制的原理是什么❤❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_66-反射机制的原理是什么❤❗"}},[t._v("#")]),t._v(" 66.反射机制的原理是什么❤❗")]),t._v(" "),a("p",[t._v("1、获取目标类的Class对象")]),t._v(" "),a("p",[t._v("2、根据Class对象实例获取Construct对象")]),t._v(" "),a("p",[t._v("3、使用Construct对象的newInstance()方法获取反射类对象")]),t._v(" "),a("p",[t._v("4、使用Class对象实例获取Method对象")]),t._v(" "),a("p",[t._v("5、根据Method实例调用invoke()方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constructor")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReflectionExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取Class对象实例")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clazz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据Class对象实例获取Constructor对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constructor")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用Constructor对象的newInstance()方法获取反射类对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据Class对象实例获取Method对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" printMessageMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"printMessage"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" printMessageWithNameMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"printMessage"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用invoke()方法")]),t._v("\n        printMessageMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        printMessageWithNameMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在上面的示例中，首先通过MyClass.class获取了对应的Class对象实例。接着使用getConstructor()方法获取默认的构造函数的Constructor对象。然后可以使用newInstance()方法创建一个MyClass的实例对象。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//之后，通过getMethod()方法分别获取了printMessage()和printMessage(String)这两个方法的Method对象。最后，通过invoke()方法调用这两个方法，并传入对应的参数。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运行上述代码，将会输出以下结果：")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Hello, World!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Hello, Alice!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这样就完成了通过反射获取类实例、构造函数和方法，并进行调用的过程。")]),t._v("\n")])])]),a("h2",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),a("h3",{attrs:{id:"_67-java中的泛型是什么✔❗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_67-java中的泛型是什么✔❗"}},[t._v("#")]),t._v(" 67.Java中的泛型是什么✔❗")]),t._v(" "),a("ul",[a("li",[t._v("将类型参数化，其在"),a("strong",[t._v("编译")]),t._v("时才确定具体的参数")])]),t._v(" "),a("blockquote",[a("p",[t._v("在Java中，编译是指将源代码文件(.java)转换为可执行的字节码文件(.class)的过程，而运行则是指执行已编译的字节码文件。编译过程通常由编译器完成，Java中的编译器是javac。")]),t._v(" "),a("p",[t._v("在IntelliJ IDEA中，编译Java代码通常是自动完成的，当你保存文件时，IDEA会自动编译相应的Java文件。如果没有出现编译错误，你可以直接点击运行按钮来运行程序。如果有编译错误，则需要先解决这些错误才能成功运行程序。当程序成功运行后，你可以在控制台窗口中看到输出结果。")])]),t._v(" "),a("h3",{attrs:{id:"_58-使用泛型的好处是什么❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58-使用泛型的好处是什么❕"}},[t._v("#")]),t._v(" 58. 使用泛型的好处是什么❕")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("类型安全")]),t._v(" "),a("p",[t._v("在编译时编译器并不知道类型转换是否正常，运行时才知道，不安全。")])]),t._v(" "),a("li",[a("p",[t._v("消除强制类型转换")]),t._v(" "),a("p",[t._v("每次使用时都需要强制转换成想要的类型")])]),t._v(" "),a("li",[a("p",[t._v("潜在的性能收益")]),t._v(" "),a("ul",[a("li",[t._v("由于泛型的实现方式，支持泛型（几乎）不需要 JVM 或类文件更改")]),t._v(" "),a("li",[t._v("所有工作都在编译器中完成")]),t._v(" "),a("li",[t._v("编译器生成的代码跟不使用泛型（和强制类型转换）时所写的代码几乎一致，只是更能确保类型安全而已")])])])]),t._v(" "),a("p",[t._v("泛型最⼤的好处是可以提⾼代码的复⽤性。 以List接⼜为例，我们可以将String、 Integer等类型放⼊List中， 如不⽤泛型， 存放String类型要写⼀个List接口， 存放Integer要写另外⼀个List接口， 泛型可以很好的解决这个问题。")]),t._v(" "),a("h3",{attrs:{id:"_59-java泛型的原理是什么-什么是类型擦除✔❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59-java泛型的原理是什么-什么是类型擦除✔❕"}},[t._v("#")]),t._v(" 59.Java泛型的原理是什么? 什么是类型擦除✔❕")]),t._v(" "),a("p",[t._v("泛型是一种语法糖，泛型这种语法糖的基本原理是类型擦除。Java中的泛型基本上都是在编译器这个层次来实现的，也就是说："),a("strong",[t._v("泛型只存在于编译阶段，而不存在于运行阶段")]),t._v("。在编译后的 class 文件中，是没有泛型这个概念的。")]),t._v(" "),a("p",[t._v("类型擦除：使用泛型的时候加上的类型参数，编译器在编译的时候去掉类型参数。")]),t._v(" "),a("p",[t._v("eg：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Output\ntrue\n*/")]),t._v("\n")])])]),a("p",[a("code",[t._v("ArrayList <Integer>")]),t._v(" 和"),a("code",[t._v("ArrayList <String>")]),t._v(" 很容易被认为是不同的类型。但是这里输出结果是true，这是因为Java泛型是使用擦除实现的，不管是"),a("code",[t._v("ArrayList<Integer>()")]),t._v(" 还是"),a("code",[t._v("new ArrayList<String>()")]),t._v("，在编译生成的字节码中都不包含泛型中的类型参数，即都擦除成了ArrayList，也就是被擦除成“原生类型”，这就是泛型擦除")]),t._v(" "),a("h3",{attrs:{id:"_60-什么是泛型中的限定通配符和非限定通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60-什么是泛型中的限定通配符和非限定通配符"}},[t._v("#")]),t._v(" 60. 什么是泛型中的限定通配符和非限定通配符")]),t._v(" "),a("p",[t._v("对类型进⾏限制， 泛型中有两种限定通配符：")]),t._v(" "),a("ul",[a("li",[t._v("限定通配符\n"),a("ul",[a("li",[a("code",[t._v("<? extends T>")]),t._v("即类型必须为T类型或者T子类，表示类型的下界")]),t._v(" "),a("li",[a("code",[t._v("<? super T>")]),t._v("即类型必须为T类型或者T的父类")])])]),t._v(" "),a("li",[t._v("非限定通配符\n"),a("ul",[a("li",[t._v("eg"),a("code",[t._v("List<?>")])])])])]),t._v(" "),a("h3",{attrs:{id:"_61-list-extends-t-和list-supere-t-之间有什么区别-✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61-list-extends-t-和list-supere-t-之间有什么区别-✔"}},[t._v("#")]),t._v(" 61.List<? extends T>和List<? supere T> 之间有什么区别 ✔")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("List<? extends T>")]),t._v("可以接受任何继承自T 的类型的List，")]),t._v(" "),a("li",[a("code",[t._v("List<? super T>")]),t._v("可以接受任何T的父类构成的List")])]),t._v(" "),a("h3",{attrs:{id:"_62-可以把-list-string-传递给一个接受list-object-参数的方法吗✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_62-可以把-list-string-传递给一个接受list-object-参数的方法吗✔"}},[t._v("#")]),t._v(" 62.可以把 "),a("code",[t._v("List<String>")]),t._v("传递给一个接受"),a("code",[t._v("List<Object>")]),t._v("参数的方法吗✔")]),t._v(" "),a("ul",[a("li",[t._v("不可以，编译错误，真这样做的话会导致编译错误。因为"),a("code",[t._v("List<Object>")]),t._v("可以存储任何类型的对象包括String, Integer等等，而 "),a("code",[t._v("List<String>")]),t._v("却只能用来存储String。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" objectList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobjectList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//compilation error incompatible types")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//------------------------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stringList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" objectList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stringList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设允许这种赋值")]),t._v("\n\nobjectList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 试图将 Integer 添加到一个实际上是 List<String> 的列表中")]),t._v("\n\n")])])]),a("p",[t._v("在上述代码中，如果我们成功将 "),a("code",[t._v("List<String>")]),t._v(" 赋值给 "),a("code",[t._v("List<Object>")]),t._v("，然后向 "),a("code",[t._v("objectList")]),t._v(" 中添加一个整数，这将导致类型不匹配的错误。因为实际上的 "),a("code",[t._v("objectList")]),t._v(" 引用的是一个 "),a("code",[t._v("List<String>")]),t._v(" 对象，而不是一个能够容纳任意类型对象的 "),a("code",[t._v("List<Object>")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_63-判断arraylist-string-与arraylist-integer-是否相等✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_63-判断arraylist-string-与arraylist-integer-是否相等✔"}},[t._v("#")]),t._v(" 63.判断"),a("code",[t._v("ArrayList<String>")]),t._v("与"),a("code",[t._v("ArrayList<Integer>")]),t._v("是否相等✔")]),t._v(" "),a("ul",[a("li",[t._v("相等，Class类型都是"),a("code",[t._v("ArrayList.Class")])]),t._v(" "),a("li",[a("strong",[a("font",{attrs:{color:"red"}},[t._v("泛型只在编译期")])],1)])]),t._v(" "),a("h2",{attrs:{id:"序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[t._v("#")]),t._v(" 序列化")]),t._v(" "),a("h3",{attrs:{id:"_64-java序列化与反序列化是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64-java序列化与反序列化是什么✔"}},[t._v("#")]),t._v(" 64.Java序列化与反序列化是什么✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("序列化：将对象转换为字节序列")]),t._v(" "),a("p",[t._v("就是说将对象转换为可传输格式的过程。 是一种数据的持久化手段。一般广泛应用于网络传输，RMI和RPC等场景中。")])]),t._v(" "),a("li",[a("p",[t._v("反序列化：将字节序列转换成对象，以便能够重新恢复对象的状态。")])])]),t._v(" "),a("h3",{attrs:{id:"_65-为什么需要序列化与反序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_65-为什么需要序列化与反序列化"}},[t._v("#")]),t._v(" 65.为什么需要序列化与反序列化")]),t._v(" "),a("ul",[a("li",[t._v("对内存中的对象进行持久化或网络传输")])]),t._v(" "),a("h3",{attrs:{id:"_66-序列化实现的方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_66-序列化实现的方式有哪些"}},[t._v("#")]),t._v(" 66.序列化实现的方式有哪些")]),t._v(" "),a("ul",[a("li",[t._v("实现"),a("code",[t._v("Serializable")]),t._v("接口或者"),a("code",[t._v("Externalizable")]),t._v("接口")])]),t._v(" "),a("h3",{attrs:{id:"实现序列化和反序列化为什么要实现serializable接口✔❤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现序列化和反序列化为什么要实现serializable接口✔❤"}},[t._v("#")]),t._v(" 实现序列化和反序列化为什么要实现Serializable接口✔❤")]),t._v(" "),a("p",[t._v("在Java中实现Serializable这个接口是为了"),a("strong",[t._v("支持对象的序列化和反序列化操作")]),t._v("，Serializable是Java提供的一个标记接口，它没有定义任何方法，只是起到一个标记的作用，当一个类实现了Serializable接口的时候，"),a("strong",[t._v("表明这个类的对象可以被序列化成字节流，或者从字节流反序列化还原成对象")]),t._v("。")]),t._v(" "),a("p",[t._v("之所以要对序列化对象实现Serializable这个接口，有以下原因")]),t._v(" "),a("p",[t._v("1、"),a("strong",[t._v("可以确保只有那些被设计为可序列化的类的对象才能被序列化")]),t._v("，这是一种类型安全性的保障，防止对不可序列化对象进行序列化操作")]),t._v(" "),a("p",[t._v("2、"),a("strong",[t._v("它规范了类的行为，表示该类的对象可以被序列化")]),t._v("，通过判断对象是否实现了Serializable这个接口，可以遵循该规范，确保对象的序列化操作是否是合法的。")]),t._v(" "),a("h3",{attrs:{id:"_67-什么是serialversionuid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_67-什么是serialversionuid"}},[t._v("#")]),t._v(" 67.什么是"),a("code",[t._v("serialVersionUID")])]),t._v(" "),a("ul",[a("li",[t._v("表明类的"),a("strong",[t._v("不同版本间的兼容性")]),t._v("（反序列化）")])]),t._v(" "),a("h3",{attrs:{id:"_68-为什么还要显示指定serialversionuid的值✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_68-为什么还要显示指定serialversionuid的值✔"}},[t._v("#")]),t._v(" 68.为什么还要显示指定"),a("code",[t._v("serialVersionUID")]),t._v("的值✔")]),t._v(" "),a("ul",[a("li",[t._v("持久化（序列化、"),a("strong",[t._v("反序列化")]),t._v("）")])]),t._v(" "),a("p",[t._v("但是，"),a("strong",[t._v("虚拟机是否允许反序列化")]),t._v("， 不仅取决于类路径和功能代码是否⼀致， ⼀个⾮常重要的⼀点是两个类的"),a("strong",[t._v("序列化 ID")]),t._v(" 是否⼀致， 即"),a("code",[t._v("serialVersionUID")]),t._v("要求⼀致。")]),t._v(" "),a("p",[t._v("在进⾏反序列化时， JVM会把传来的字节流中的"),a("code",[t._v("serialVersionUID")]),t._v("与本地相应实体类的"),a("code",[t._v("serialVersionUID")]),t._v("进⾏⽐较， 如果相同就认为是⼀致的， 可以进⾏反序列化， 否则就会出现序列化版本不⼀致的异常， 即是"),a("code",[t._v("InvalidCastException")]),t._v("。")]),t._v(" "),a("p",[t._v("基于以上原理， 如果我们⼀个类实现了Serializable接口， 但是没有定义"),a("code",[t._v("serialVersionUID")]),t._v("， 然后序列化。 在序列化之后， 由于某些原因， 我们对该类做了变更， 重新启动应⽤后， 我们相对之前序列化过的对象进⾏反序列化的话就会报错")]),t._v(" "),a("h3",{attrs:{id:"_69-serialversionuid什么时候修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_69-serialversionuid什么时候修改"}},[t._v("#")]),t._v(" 69."),a("code",[t._v("serialVersionUID")]),t._v("什么时候修改")]),t._v(" "),a("h3",{attrs:{id:"_70-java序列化中如果有些字段不想进行序列化-怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_70-java序列化中如果有些字段不想进行序列化-怎么办"}},[t._v("#")]),t._v(" 70.Java序列化中如果有些字段不想进行序列化，怎么办")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("transient")]),t._v("修饰")]),t._v(" "),a("h3",{attrs:{id:"_71-静态变量会被序列化吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_71-静态变量会被序列化吗"}},[t._v("#")]),t._v(" 71. 静态变量会被序列化吗")]),t._v(" "),a("ul",[a("li",[t._v("不会，序列化是针对"),a("strong",[t._v("对象")]),t._v("而言的，静态变量。。")])]),t._v(" "),a("h2",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("h3",{attrs:{id:"_72-error-和-exception-区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_72-error-和-exception-区别是什么✔"}},[t._v("#")]),t._v(" 72. Error 和 Exception 区别是什么✔")]),t._v(" "),a("p",[t._v("⼆者都是 Java异常处理的重要⼦类， 各⾃都包含⼤量⼦类。均继承自Throwable类。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Error")]),t._v("非程序异常，指编译或者系统性错误")]),t._v(" "),a("p",[t._v("java运⾏环境内部错误或者硬件问题， 不能指望程序来处理这样的问题， 除了退出运⾏外别⽆选择， 它是Java虚拟机抛出的。如OOM")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Exception")]),t._v("程序异常，由程序内部产生，又分为运行时异常和非运行时异常、")]),t._v(" "),a("p",[t._v("表⽰程序需要捕捉、 需要处理的异常， 是由与程序设计的不完善⽽出现的问题， 程序必须处理的问题。")]),t._v(" "),a("ul",[a("li",[t._v("运行时异常：编译通过，运行时错误")]),t._v(" "),a("li",[t._v("非运行时异常：编译不通过，必须捕获或者抛出")])])]),t._v(" "),a("li",[a("p",[t._v("常见异常")]),t._v(" "),a("ul",[a("li",[t._v("NullPointExceprion空指针异常")]),t._v(" "),a("li",[t._v("OutOfMemoryError内存异常")]),t._v(" "),a("li",[t._v("IOExceptionIO异常")]),t._v(" "),a("li",[t._v("FileNotFoundException文件找不到异常")]),t._v(" "),a("li",[t._v("ClassNotFoundException类找不到异常")]),t._v(" "),a("li",[t._v("ClassCastException类型转换异常")])])]),t._v(" "),a("li",[a("p",[t._v("关键字特点")]),t._v(" "),a("ul",[a("li",[t._v("Try：可能发生的异常")]),t._v(" "),a("li",[t._v("Catch：异常类型，一旦其中一条捕获到异常，后面就不执行了,(先写子类异常，再写父类异常)")]),t._v(" "),a("li",[t._v("Finaly：通常情况下一定执行，如system.exit,等，前面终止的话finaly就不会执行了")])])])]),t._v(" "),a("h3",{attrs:{id:"_73-非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_73-非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么✔"}},[t._v("#")]),t._v(" 73. 非受检查异常(运行时异常)和受检查异常(一般异常)区别是什么✔")]),t._v(" "),a("p",[t._v("所谓受检查异常表示是在编译的时候，要强制检查的异常，这个异常需要通过 try/catch 来进行捕捉，或者通过 throws 抛出去，否则程序是无法通过编译的，而非受检查异常表示编译器可以不需要去强制检查异常，不需要去捕获。")]),t._v(" "),a("p",[t._v("Throw 有两个直接子类，一个是 error，一个是 exception，error表示的是程序底层或者硬件层面的一些错误，和程序本身没有什么关系，比如 OOM，不需要去检查，属于非受检查异常。而Exception 表示程序里的一些异常，是由于程序不严谨导致，比如 NullPointerException。")]),t._v(" "),a("p",[t._v("Exception 派生了两种异常，一种是 RuntimeException 和其他 Exception，其中 RuntimeException  是属于运行时异常，属于非受检异常，"),a("strong",[t._v("所以除了 error，以及RuntimeException  的派生类以外，其他异常都是受检异常")])]),t._v(" "),a("ul",[a("li",[t._v("是否强制要求调用者必须处理此异常（强制要求，受检查异常；非强制要求，非受检查异常）")]),t._v(" "),a("li",[t._v("非受检查异常=运行时异常")]),t._v(" "),a("li",[t._v("受检查异常 = 非运行时异常（一般异常）")])]),t._v(" "),a("h3",{attrs:{id:"_74-throw-和-throws-的区别是什么✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_74-throw-和-throws-的区别是什么✔"}},[t._v("#")]),t._v(" 74. throw 和 throws 的区别是什么✔")]),t._v(" "),a("ul",[a("li",[t._v("Throw （抛出异常）只能抛出一个具体的异常，将异常显示在当段代码")]),t._v(" "),a("li",[t._v("Throws（声明异常） 可以抛出多个异常，抛给调用者，用来声明一个方法可能抛出的所有异常信息")])]),t._v(" "),a("h3",{attrs:{id:"_75-noclassdeffounderror-和-classnotfoundexception-区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_75-noclassdeffounderror-和-classnotfoundexception-区别✔"}},[t._v("#")]),t._v(" 75. NoClassDefFoundError 和 ClassNotFoundException 区别✔")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("NoClassDefFoundError")]),t._v("error类型异常")]),t._v(" "),a("p",[t._v("这个异常表示在编译时存在对某个类的引用，但在运行时找不到该类的定义")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ClassNotFoundException")]),t._v("exception类异常中的受检查异常（非运行时异常）")]),t._v(" "),a("p",[t._v("这个异常表示在运行时试图使用 "),a("code",[t._v("Class.forName()")]),t._v(" 或 "),a("code",[t._v("ClassLoader.loadClass()")]),t._v(" 来加载类时，找不到对应名称的类")])])]),t._v(" "),a("h3",{attrs:{id:"_76-java常见异常有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_76-java常见异常有哪些"}},[t._v("#")]),t._v(" 76. Java常见异常有哪些")]),t._v(" "),a("h3",{attrs:{id:"_77-try-catch-finally-中哪个部分可以省略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_77-try-catch-finally-中哪个部分可以省略"}},[t._v("#")]),t._v(" 77. try-catch-finally 中哪个部分可以省略")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("catch")])]),t._v(" "),a("li",[a("code",[t._v("try")]),t._v("运行时异常")]),t._v(" "),a("li",[a("code",[t._v("try+catch")]),t._v("运行时异常+普通异常")])]),t._v(" "),a("h3",{attrs:{id:"finally块一定会执行吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finally块一定会执行吗"}},[t._v("#")]),t._v(" finally块一定会执行吗")]),t._v(" "),a("p",[t._v("finally在两种情况下不会执行")]),t._v(" "),a("ul",[a("li",[t._v("程序没有进入到try语句块因为异常导致程序终止，这个问题主要是开发人员在编写代码的时候，异常捕获的范围不够")]),t._v(" "),a("li",[t._v("在try或者cache语句块中，执行了System.exit(O)语句，导致JVM直接退出")])]),t._v(" "),a("h3",{attrs:{id:"_78-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_78-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[t._v("#")]),t._v(" 78. try-catch-finally 中，如果 catch 中 return 了， finally 还会执行吗")]),t._v(" "),a("ul",[a("li",[t._v("会执行，在return之前执行")])]),t._v(" "),a("h3",{attrs:{id:"_79-jvm-是如何处理异常的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_79-jvm-是如何处理异常的"}},[t._v("#")]),t._v(" 79. JVM 是如何处理异常的")]),t._v(" "),a("ul",[a("li",[t._v("抛出异常：创建异常对象，并转交给JVM的过程")])]),t._v(" "),a("h3",{attrs:{id:"异常代码分析✔❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常代码分析✔❕"}},[t._v("#")]),t._v(" 异常代码分析✔❕")]),t._v(" "),a("p",[a("strong",[t._v("代码一")]),t._v("：")]),t._v(" "),a("p",[t._v("关键点：")]),t._v(" "),a("ol",[a("li",[t._v("异常会阻断正常代码运行")]),t._v(" "),a("li",[t._v("finally 一定会执行")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("答： 1 2 异常")]),t._v(" "),a("p",[a("strong",[t._v("代码二")]),t._v("：")]),t._v(" "),a("p",[t._v("关键点：")]),t._v(" "),a("ol",[a("li",[t._v("在finally中return 后不再执行后续代码")]),t._v(" "),a("li",[t._v("catch中return 不影响finally的执行")]),t._v(" "),a("li",[t._v("try catch 后的finally一定会执行")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//output += "4"; //不注释无法运行，看关键点1')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * foo(0); try中不符合条件，直接finally输出 3\n * foo(1); try中符合条件，进行抛出异常，在catch中捕获，输出 2，再进入finally中，输出 3\n *\n")])])])]),a("p",[t._v("答：323")]),t._v(" "),a("h3",{attrs:{id:"try-catch-finally-return执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally-return执行顺序"}},[t._v("#")]),t._v(" try-catch-finally-return执行顺序")]),t._v(" "),a("p",[t._v("try-catch-finally-return 执行描述:")]),t._v(" "),a("ul",[a("li",[t._v("如果不发生异常，不会执行catch部分。")]),t._v(" "),a("li",[t._v("不管有没有发生异常，finally都会执行到。")]),t._v(" "),a("li",[t._v("即使try和catch中有return时，finally仍然会执行")]),t._v(" "),a("li",[t._v("finally是在return后面的表达式运算完后再执行的。（此时并没有返回运算后的值，而是先把要返回的值保存起来，若finally中无return，则不管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），该情况下函数返回值是在finally执行前确定的)")]),t._v(" "),a("li",[t._v("finally部分就不要return了，要不然，就回不去try或者catch的return了。")])]),t._v(" "),a("h3",{attrs:{id:"在java的异常处理机制中-什么时候应该抛出异常-什么时候捕获异常✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在java的异常处理机制中-什么时候应该抛出异常-什么时候捕获异常✔"}},[t._v("#")]),t._v(" 在java的异常处理机制中，什么时候应该抛出异常，什么时候捕获异常✔")]),t._v(" "),a("p",[t._v("异常相当于一种提示，如果我们抛出异常，就相当于告诉上层方法，我抛了一个异常，我处理不了这个异常，交给你来处理，而对于上层方法来说，它也需要决定自己能不能处理这个异常，是否也需要交给它的上层。")]),t._v(" "),a("p",[t._v("所以我们在写一个方法时，我们需要考虑的就是，"),a("strong",[t._v("本方法能否合理的处理该异常，如果处理不了就继续向上抛出异常，包括本方法中在调用另外一个方法时，发现出现了异常，如果这个异常应该由自己来处理，那就捕获该异常并进行处理。")])]),t._v(" "),a("h2",{attrs:{id:"io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[t._v("#")]),t._v(" IO")]),t._v(" "),a("h3",{attrs:{id:"_80-java的io-流分为几种✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_80-java的io-流分为几种✔"}},[t._v("#")]),t._v(" 80. Java的IO 流分为几种✔")]),t._v(" "),a("ul",[a("li",[t._v("流的方向：输入流、输出流")]),t._v(" "),a("li",[t._v("实现方向：节点流、处理流")]),t._v(" "),a("li",[t._v("处理数据的单位：字节流、字符流")])]),t._v(" "),a("p",[t._v("根据输入和输出的不同组合，可以得到四种基本的IO流类型：")]),t._v(" "),a("ul",[a("li",[t._v("字节输入流（"),a("code",[t._v("InputStream")]),t._v("）：从源读取字节数据。")]),t._v(" "),a("li",[t._v("字节输出流（"),a("code",[t._v("OutputStream")]),t._v("）：向目标写入字节数据。")]),t._v(" "),a("li",[t._v("字符输入流（"),a("code",[t._v("Reader")]),t._v("）：从源读取字符数据。")]),t._v(" "),a("li",[t._v("字符输出流（"),a("code",[t._v("Writer")]),t._v("）：向目标写入字符数据。")])]),t._v(" "),a("h3",{attrs:{id:"_81-字节流如何转为字符流✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_81-字节流如何转为字符流✔"}},[t._v("#")]),t._v(" 81. 字节流如何转为字符流✔")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("InputStreamReader")]),t._v("是Reader的子类，将输入的字节流变为字符流，即将一个字节流的输入对象变为字符流的输入对象。")]),t._v(" "),a("li",[a("code",[t._v("OutputStreamWriter")]),t._v("是Writer的子类，将输出的字符流变为字节流，即将一个字符流的输出对象变为字节流输出对象。")])]),t._v(" "),a("h3",{attrs:{id:"_82-字符流与字节流的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_82-字符流与字节流的区别"}},[t._v("#")]),t._v(" 82. 字符流与字节流的区别")]),t._v(" "),a("ul",[a("li",[t._v("字符流只适用于纯文本格式（效率大于字节流）")]),t._v(" "),a("li",[t._v("字节流适用于所有文件格式")])]),t._v(" "),a("h3",{attrs:{id:"_83-什么是阻塞io-什么是非阻塞io✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_83-什么是阻塞io-什么是非阻塞io✔"}},[t._v("#")]),t._v(" 83. 什么是阻塞IO？什么是非阻塞IO✔")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("IO读请求的两个阶段")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("查看数据是否就绪")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("没有就绪，一直等待，直到数据就绪（阻塞IO）")])]),t._v(" "),a("li",[a("p",[t._v("没有就绪，返回一个标志信息，告知当前线程数据没有就绪（非阻塞IO）")]),t._v(" "),a("p",[t._v("阻塞与非阻塞描述的是调用者的")]),t._v(" "),a("p",[t._v("如A调用B：")]),t._v(" "),a("p",[t._v("如果是阻塞，A在发出调用后，要一直等待，等着B返回结果。")]),t._v(" "),a("p",[t._v("如果是非阻塞，A在发出调用后，不需要等待，可以去做自己的事情。")])])])]),t._v(" "),a("li",[a("p",[t._v("进行数据拷贝")])])])])]),t._v(" "),a("h3",{attrs:{id:"同步-异步-和-阻塞-非阻塞之间的区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步-异步-和-阻塞-非阻塞之间的区别✔"}},[t._v("#")]),t._v(" 同步，异步 和 阻塞，非阻塞之间的区别✔")]),t._v(" "),a("p",[t._v("同步：指的是任务按照顺序依次执行，每个任务必须等待上一个任务完成后才能开始执行。在同步模式下，"),a("strong",[t._v("任务之间存在依赖关系，后续任务必须等待前一任务完成后才能执行")]),t._v("。")]),t._v(" "),a("p",[t._v("异步：指的是任务可以独立于主线程按照预定的顺序进行执行，不需要等待上一个任务完成。在异步模式下，"),a("strong",[t._v("任务之间相互独立，可以并发地执行")]),t._v("。")]),t._v(" "),a("p",[t._v("同步、异步，是描述被调用方的。")]),t._v(" "),a("p",[t._v("阻塞，非阻塞，是描述调用方的。")]),t._v(" "),a("p",[t._v("同步不一定阻塞，异步也不一定非阻塞。没有必然关系。")]),t._v(" "),a("p",[t._v("举个简单的例子，老张烧水。 1 老张把水壶放到火上，一直在水壶旁等着水开。（同步阻塞） 2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 3 老张把响水壶放到火上，一直在水壶旁等着水开。（异步阻塞） 4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）")]),t._v(" "),a("p",[t._v("1和2的区别是，调用方在得到返回之前所做的事情不一行。 1和3的区别是，被调用方对于烧水的处理不一样。")]),t._v(" "),a("h3",{attrs:{id:"_84-bio、nio、aio的区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_84-bio、nio、aio的区别✔"}},[t._v("#")]),t._v(" 84. BIO、NIO、AIO的区别✔")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("BIO：线程发起 IO 请求，不管内核是否准备好 IO 操作，从发起请求起，线程一直阻塞，直到操作完成。")]),t._v(" "),a("li",[t._v("NIO：线程发起 IO 请求，立即返回；内核在做好 IO 操作的准备之后，通过调用注册的回调函数通知线程做 IO 操作，线程开始阻塞，直到操作完成。")]),t._v(" "),a("li",[t._v("AIO：线程发起 IO 请求，立即返回；内存做好 IO 操作的准备之后，做 IO 操作，直到操作完成或者失败，通过调用注册的回调函数通知线程做 IO 操作完成或者失败。")])])]),t._v(" "),a("p",[t._v("BIO 是一个连接一个线程。,NIO 是一个请求一个线程。,AIO 是一个有效请求一个线程。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("BIO：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。")]),t._v(" "),a("li",[t._v("NIO：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。")]),t._v(" "),a("li",[t._v("AIO：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的 IO 请求都是由 OS 先完成了再通知服务器应用去启动线程进行处理。")])])]),t._v(" "),a("h3",{attrs:{id:"_85-java-io都有哪些设计模式❕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_85-java-io都有哪些设计模式❕"}},[t._v("#")]),t._v(" 85. Java IO都有哪些设计模式❕")]),t._v(" "),a("ul",[a("li",[t._v("适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作")]),t._v(" "),a("li",[t._v("装饰器模式：一种动态地往一个类中添加新的行为的设计模式")])]),t._v(" "),a("h2",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),a("h3",{attrs:{id:"谈谈自定义注解的场景及实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈自定义注解的场景及实现"}},[t._v("#")]),t._v(" 谈谈自定义注解的场景及实现")]),t._v(" "),a("ul",[a("li",[t._v("之前我这边有这么一个业务场景，用Redis控制接口调用频率，有使用过自定义注解。")]),t._v(" "),a("li",[t._v("通过 AOP（动态代理机制）给方法添加切面，通过反射来获取方法包含的注解，如果包含自定义关键字注解，就通过Redis进行校验拦截请求。")])]),t._v(" "),a("h3",{attrs:{id:"用最有效率的方法计算2乘以8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用最有效率的方法计算2乘以8"}},[t._v("#")]),t._v(" 用最有效率的方法计算2乘以8？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2 << 3\n")])])]),a("ul",[a("li",[t._v("将一个数左移n位，就相当于这个数乘以了2的n次方。")]),t._v(" "),a("li",[t._v("那么，一个数乘以8只要将其左移3位即可。")]),t._v(" "),a("li",[t._v("而cpu直接支持位移运算，且效率最高。")])]),t._v(" "),a("h3",{attrs:{id:"object中定义了哪些方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object中定义了哪些方法"}},[t._v("#")]),t._v(" object中定义了哪些方法？")]),t._v(" "),a("ul",[a("li",[t._v("getClass(); 获取类结构信息")]),t._v(" "),a("li",[t._v("hashCode() 获取哈希码")]),t._v(" "),a("li",[t._v("equals(Object) 默认比较对象的地址值是否相等，子类可以重写比较规则")]),t._v(" "),a("li",[t._v("clone() 用于对象克隆")]),t._v(" "),a("li",[t._v("toString() 把对象转变成字符串")]),t._v(" "),a("li",[t._v("notify() 多线程中唤醒功能")]),t._v(" "),a("li",[t._v("notifyAll() 多线程中唤醒所有等待线程的功能")]),t._v(" "),a("li",[t._v("wait()  让持有对象锁的线程进入等待")]),t._v(" "),a("li",[t._v("wait(long timeout) 让持有对象锁的线程进入等待，设置超时毫秒数时间")]),t._v(" "),a("li",[t._v("wait(long timeout, int nanos) 让持有对象锁的线程进入等待，设置超时纳秒数时间")]),t._v(" "),a("li",[t._v("finalize() 垃圾回收前执行的方法")])]),t._v(" "),a("h3",{attrs:{id:"在自己的代码中-如果创建一个java-lang-string类-这个类是否可以被类加载器加载-为什么。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在自己的代码中-如果创建一个java-lang-string类-这个类是否可以被类加载器加载-为什么。"}},[t._v("#")]),t._v(" 在自己的代码中，如果创建一个java.lang.String类，这个类是否可以被类加载器加载？为什么。")]),t._v(" "),a("p",[t._v("不可以。因为JDK处于安全性的考虑，基于双亲委派模型，优先加载JDK的String类，如果java.lang.String已经加载，便不会再次被加载。")]),t._v(" "),a("h3",{attrs:{id:"java8的新特性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java8的新特性。"}},[t._v("#")]),t._v(" java8的新特性。")]),t._v(" "),a("ul",[a("li",[t._v("Lambda 表达式：Lambda允许把函数作为一个方法的参数")]),t._v(" "),a("li",[t._v("Stream API ：新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中")]),t._v(" "),a("li",[t._v("方法引用：方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。")]),t._v(" "),a("li",[t._v("默认方法：默认方法就是一个在接口里面有了一个实现的方法。")]),t._v(" "),a("li",[t._v("Optional 类 ：Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。")]),t._v(" "),a("li",[t._v("Date Time API ：加强对日期与时间的处理。")])]),t._v(" "),a("h3",{attrs:{id:"匿名内部类是什么-如何访问在其外面定义的变量呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类是什么-如何访问在其外面定义的变量呢"}},[t._v("#")]),t._v(" 匿名内部类是什么？如何访问在其外面定义的变量呢？")]),t._v(" "),a("p",[t._v("匿名内部类就是没有名字的内部类，日常开发中使用的比较多。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"匿名内部类"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匿名内部类必须继承或实现一个已有的接口 ")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("匿名内部类还有以下特点：")]),t._v(" "),a("ul",[a("li",[t._v("没有名字")]),t._v(" "),a("li",[t._v("匿名内部类必须继承一个抽象类或者实现一个接口。")]),t._v(" "),a("li",[t._v("匿名内部类不能定义任何静态成员和静态方法。")]),t._v(" "),a("li",[t._v("当所在的方法的形参需要被匿名内部类使用时，必须声明为 final。")]),t._v(" "),a("li",[t._v("匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。")]),t._v(" "),a("li",[t._v("匿名内部类不能访问外部类方法中的局部变量，除非该变量被声明为final类型")])]),t._v(" "),a("h3",{attrs:{id:"简述一下面向对象的-六原则一法则-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述一下面向对象的-六原则一法则-。"}},[t._v("#")]),t._v(" 简述一下面向对象的”六原则一法则”。")]),t._v(" "),a("ul",[a("li",[t._v("单一职责原则:一个类只做它该做的事情。")]),t._v(" "),a("li",[t._v("开闭原则：软件实体应当对扩展开放，对修改关闭。")]),t._v(" "),a("li",[t._v("依赖倒转原则：面向接口编程。")]),t._v(" "),a("li",[t._v("接口隔离原则：接口要小而专，绝不能大而全。")]),t._v(" "),a("li",[t._v("合成聚合复用原则：优先使用聚合或合成关系复用代码。")]),t._v(" "),a("li",[t._v("迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。")])]),t._v(" "),a("h3",{attrs:{id:"数组有没有length-方法-string有没有length-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组有没有length-方法-string有没有length-方法"}},[t._v("#")]),t._v(" 数组有没有length()方法？String有没有length()方法")]),t._v(" "),a("ul",[a("li",[t._v("数组没有length()方法，而是length；")]),t._v(" "),a("li",[t._v("String有length()方法")])]),t._v(" "),a("p",[t._v("要获取集合的长度，可以使用 "),a("code",[t._v("size()")]),t._v(" 方法")]),t._v(" "),a("h3",{attrs:{id:"this和super关键字的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this和super关键字的作用"}},[t._v("#")]),t._v(" this和super关键字的作用")]),t._v(" "),a("p",[t._v("this：")]),t._v(" "),a("ul",[a("li",[t._v("对象内部指代自身的引用")]),t._v(" "),a("li",[t._v("解决成员变量和局部变量同名问题")]),t._v(" "),a("li",[t._v("可以调用成员变量，不能调用局部变量")]),t._v(" "),a("li",[t._v("可以调用成员方法")]),t._v(" "),a("li",[t._v("在普通方法中可以省略 this")]),t._v(" "),a("li",[t._v("在静态方法当中不允许出现 this 关键字")])]),t._v(" "),a("p",[t._v("super：")]),t._v(" "),a("ul",[a("li",[t._v("调用父类 的成员或者方法")]),t._v(" "),a("li",[t._v("调用父类的构造函数")])]),t._v(" "),a("h3",{attrs:{id:"列举出java中6个比较常用的包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列举出java中6个比较常用的包"}},[t._v("#")]),t._v(" 列举出JAVA中6个比较常用的包")]),t._v(" "),a("ul",[a("li",[t._v("java.lang;")]),t._v(" "),a("li",[t._v("java.util;")]),t._v(" "),a("li",[t._v("java.io;")]),t._v(" "),a("li",[t._v("java.sql;")]),t._v(" "),a("li",[t._v("java.awt;")]),t._v(" "),a("li",[t._v("java.net;")])]),t._v(" "),a("h3",{attrs:{id:"jdk-7有哪些新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-7有哪些新特性"}},[t._v("#")]),t._v(" JDK 7有哪些新特性")]),t._v(" "),a("ul",[a("li",[t._v("Try-with-resource语句")]),t._v(" "),a("li",[t._v("NIO2 文件处理Files")]),t._v(" "),a("li",[t._v("switch可以支持字符串判断条件")]),t._v(" "),a("li",[t._v("泛型推导")]),t._v(" "),a("li",[t._v("多异常统一处理")])]),t._v(" "),a("h3",{attrs:{id:"_64-位-jvm-中-int-的长度是多数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64-位-jvm-中-int-的长度是多数"}},[t._v("#")]),t._v(" 64 位 JVM 中，int 的长度是多数？")]),t._v(" "),a("p",[t._v("int数据类型占4个字节 32位，跟JVM位数没关系的")]),t._v(" "),a("h3",{attrs:{id:"_20-如何将gb2312编码的字符串转换为iso-8859-1编码的字符串呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-如何将gb2312编码的字符串转换为iso-8859-1编码的字符串呢"}},[t._v("#")]),t._v(" 20. 如何将GB2312编码的字符串转换为ISO-8859-1编码的字符串呢？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnsupportedEncodingException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"书中自有黄金屋"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" strIso "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GB2312"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ISO-8859-1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strIso"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"守护线程是什么-用什么方法实现守护线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护线程是什么-用什么方法实现守护线程"}},[t._v("#")]),t._v(" 守护线程是什么？用什么方法实现守护线程")]),t._v(" "),a("ul",[a("li",[t._v("守护线程是运行在后台的一种特殊进程。")]),t._v(" "),a("li",[t._v("它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。")]),t._v(" "),a("li",[t._v("在 Java 中垃圾回收线程就是特殊的守护线程。")])]),t._v(" "),a("h3",{attrs:{id:"和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" &和&&的区别")]),t._v(" "),a("ul",[a("li",[t._v("按位与, a&b 表示把a和b都转换成二进制数，再进行与的运算；")]),t._v(" "),a("li",[t._v("&和&&都是逻辑运算符号，&&又叫短路运算符")]),t._v(" "),a("li",[t._v("逻辑与，a&& b ，a&b 都表示当且仅当两个操作数均为 true时，其结果才为 true，否则为false。")]),t._v(" "),a("li",[t._v("逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true，整个表达式的值才是true。但是，&&之所以称为短路运算，是因为如果&&左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。")])]),t._v(" "),a("h3",{attrs:{id:"comparator与comparable有什么区别✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparator与comparable有什么区别✔"}},[t._v("#")]),t._v(" Comparator与Comparable有什么区别✔")]),t._v(" "),a("ul",[a("li",[t._v("Comparable & Comparator 都是用来实现集合中元素的比较、排序的，只是 Comparable 是在集合内部定义的方法实现的排序，Comparator 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义 Comparator 接口的方法或在集合内实现Comparable 接口的方法。")]),t._v(" "),a("li",[t._v("Comparator位于包java.util下，而Comparable位于包 java.lang下。")]),t._v(" "),a("li",[t._v("Comparable 是一个对象本身就已经支持自比较所需要实现的接口（如 String、Integer 自己就可以完成比较大小操作，已经实现了Comparable接口） 自定义的类要在加入list容器中后能够排序，可以实现Comparable接口，在用Collections类的sort方法排序时，如果不指定Comparator，那么就以自然顺序排序， 这里的自然顺序就是实现Comparable接口设定的排序方式。")]),t._v(" "),a("li",[t._v("而 Comparator 是一个专用的比较器，当这个对象不支持自比较或者自比较函数不能满足你的要求时，你可以写一个比较器来完成两个对象之间大小的比较。")]),t._v(" "),a("li",[t._v("可以说一个是自已完成比较，一个是外部程序实现比较的差别而已。 用 Comparator 是策略模式（strategy design pattern），就是不改变对象自身，而用一个策略对象（strategy object）来改变它的行为。 比如：你想对整数采用绝对值大小来排序，Integer 是不符合要求的，你不需要去修改 Integer 类（实际上你也不能这么做）去改变它的排序行为，只要使用一个实现了 Comparator 接口的对象来实现控制它的排序就行了。")])]),t._v(" "),a("h3",{attrs:{id:"深拷贝和浅拷贝✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝✔"}},[t._v("#")]),t._v(" 深拷贝和浅拷贝✔")]),t._v(" "),a("p",[t._v("深拷贝和浅拷贝就是指对象的拷贝，一个对象中存在两种类型的属性，"),a("strong",[t._v("一种是基本数据类型一种是实例对象的引用")])]),t._v(" "),a("ul",[a("li",[t._v("浅拷贝是指，"),a("strong",[t._v("只会拷贝基本数据类型的值，以及实例对象的引用地址")]),t._v("，并不会复制一份引用地址所指向的对象，也就是浅拷贝出来的对象，内部的类属性指向的是同一个对象")]),t._v(" "),a("li",[t._v("深拷贝是指，"),a("strong",[t._v("即会拷贝基本数据类型的值，也会针对实例对象的引用地址所指向的对象进行复制")]),t._v("，"),a("strong",[t._v("深拷贝出来的对象")]),t._v("，内部的属性指向的不是同一个对象")])]),t._v(" "),a("h3",{attrs:{id:"java-spi-是什么-有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-spi-是什么-有什么作用"}},[t._v("#")]),t._v(" Java SPI 是什么，有什么作用")]),t._v(" "),a("p",[t._v("Java SPI 是Java提供的一种接口的扩展机制，作用有以下两个")]),t._v(" "),a("ul",[a("li",[t._v("把标准定义和接口实现分离，在模块化开发中很好的实现了解耦")]),t._v(" "),a("li",[t._v("实现功能的扩展，更好的满足定制化的需求")])]),t._v(" "),a("h3",{attrs:{id:"什么是零拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是零拷贝"}},[t._v("#")]),t._v(" 什么是零拷贝")]),t._v(" "),a("p",[t._v("零拷贝就是指应用程序可以直接把磁盘的数据从内核层面之间传输给socket，而不需要经过应用程序所在的用户空间，零拷贝通过DMA技术，把文件内容复制到内核空间的Read Buffer，接着把包含数据位置和长度信息的文件描述加载到是Socket Buffer里面，DMA直接可以把数据从内核空间传递到网卡设备，在这个流程中，数据只需要经过两次拷贝，就发送到网卡里面，减少了两次CPU的上下文切换，对效率有非常大的提高")]),t._v(" "),a("h3",{attrs:{id:"java中的math-round-1-5-等于多少呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的math-round-1-5-等于多少呢"}},[t._v("#")]),t._v(" java中的Math.round(-1.5) 等于多少呢？")]),t._v(" "),a("p",[t._v("JDK 中的 java.lang.Math 类:")]),t._v(" "),a("ul",[a("li",[t._v("round() ：返回四舍五入，负 .5 小数返回较大整数，如 -1.5 返回 -1。")]),t._v(" "),a("li",[t._v("ceil() ：返回小数所在两整数间的较大值，如 -1.5 返回 -1.0。")]),t._v(" "),a("li",[t._v("floor() ：返回小数所在两整数间的较小值，如 -1.5 返回 -2.0。")])]),t._v(" "),a("h3",{attrs:{id:"为啥有时会出现-4-0-3-6-0-40000001-这种现象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为啥有时会出现-4-0-3-6-0-40000001-这种现象"}},[t._v("#")]),t._v(" 为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象")]),t._v(" "),a("p",[a("strong",[t._v("这种舍入误差的主要原因是：")]),t._v(" "),a("strong",[t._v("浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。\n这就好像十进制无法精确地表示分数 1/3—样。\n如果在数值计算中不允许有任何舍入误差， 就应该使用 BigDecimal类。")])]),t._v(" "),a("h3",{attrs:{id:"jdk动态代理为什么只能代理有接口的类✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理为什么只能代理有接口的类✔"}},[t._v("#")]),t._v(" JDK动态代理为什么只能代理有接口的类✔")]),t._v(" "),a("p",[t._v("动态代理需要传入被动态代理的一个接口类，之所以要传入接口而不能传入类，还是取决于JDK动态代理的一个底层实现，JDK 动态代理会在程序的运行期间去动态生成一个代理类，"),a("strong",[t._v("动态生成的代理类会去继承一个 java.lang.reflect.Proxy这样一个类，同时还会去实现被代理类的接口，在Java里面不支持多种继承，所以只能代理接口")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"描述动态代理的几种实现方式-它们分别有什么优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述动态代理的几种实现方式-它们分别有什么优缺点"}},[t._v("#")]),t._v(" 描述动态代理的几种实现方式，它们分别有什么优缺点")]),t._v(" "),a("ul",[a("li",[t._v("JDK动态代理")]),t._v(" "),a("li",[t._v("CGLIB动态代理")]),t._v(" "),a("li",[t._v("JDK原声动态代理时java原声支持的、不需要任何外部依赖、但是它只能基于接口进行代理")]),t._v(" "),a("li",[t._v("CGLIB通过继承的方式进行代理、无论目标对象没有没实现接口都可以代理，但是无法处理final的情况")])]),t._v(" "),a("h3",{attrs:{id:"java有几种拷贝方式-哪一种效率最高✔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java有几种拷贝方式-哪一种效率最高✔"}},[t._v("#")]),t._v(" Java有几种拷贝方式，哪一种效率最高✔")]),t._v(" "),a("p",[t._v("1、使用java.io包下的库，使用FilelnputStream读取，再使用FileOutputStream写出")]),t._v(" "),a("p",[t._v("2、利用iava.nio包下的库，使用transferTo或transfFrom方法实现")]),t._v(" "),a("p",[t._v("3、Java标准类库本身已经提供了Files.copy的实现")]),t._v(" "),a("p",[t._v("对于文件拷贝效率，和操作系统和配置的情况有关系")]),t._v(" "),a("h3",{attrs:{id:"有哪些设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些设计模式"}},[t._v("#")]),t._v(" 有哪些设计模式")]),t._v(" "),a("p",[t._v("设计模式分为创建者模式、结构型模式和行为型模式")]),t._v(" "),a("p",[t._v("创建者模式是对对象过程的各种问题和解决方案的一个总结，包括各种工厂模式、单例模式、构建器模式、原型模式")]),t._v(" "),a("p",[t._v("结构性模式是针对软件设计的结构的一个总结，重点关注类、对象继承和组合方式的一个实践经验的一个总结，常见的结构型模式包括桥接模式、适配器模式、装饰器模式、代理模式、组合模式、外观模式、享元模式等等")]),t._v(" "),a("p",[t._v("行为型模式是从类或者对象之间的一个交互职责划分等角度的总结的一个模式，比较常见的行为型模式有策略模式、解释器模式、命令模式、观察者模式、迭代器模式、模板方法模式、访问模式等等")]),t._v(" "),a("h3",{attrs:{id:"介绍下策略模式和观察者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下策略模式和观察者模式"}},[t._v("#")]),t._v(" 介绍下策略模式和观察者模式")]),t._v(" "),a("p",[t._v("策略模式和观察者模式都属于行为型模式")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("策略模式主要是用在根据上下文动态控制类的行为的一个场景")]),t._v("，一方面可以解决多个if..else判断带来的代码复杂性和维护性问题，另一方面，把类的不同行为进行封装，使得程序可以进行动态的扩展和替换，增加了程序的灵活性，比如像支付路由这样一个场景就可以使用策略模式去实现")]),t._v(" "),a("li",[a("strong",[t._v("观察者模式主要是用在一对多的对象依赖关系的一个处理过程，实现某一个对象状态变更之后的感知的场景")]),t._v("，一方面可以降低对象依赖关系的耦合度，弱化依赖关系，另一方面，通过这种状态通知机制，可以保证这些依赖对象之间的状态协同")])]),t._v(" "),a("h3",{attrs:{id:"在java中实现单例模式有哪些方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在java中实现单例模式有哪些方法"}},[t._v("#")]),t._v(" 在Java中实现单例模式有哪些方法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通过双重检查锁方式")]),t._v(" "),a("p",[t._v("是一种线程安全并且延迟实例化的方式，但是因为加锁，所以会有性能上的一个影响")])]),t._v(" "),a("li",[a("p",[t._v("通过静态内部类方式")]),t._v(" "),a("p",[t._v("也是一种延迟实例化方式，由于是静态内部类，所以只会在使用时加载一次，不存在线程安全问题")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("通过枚举类的方式")])]),t._v(" "),a("p",[t._v("既是线程安全，又能防止反序列化破坏线程安全的问题，但是多线程、克隆、反序列化、反射都有可能会造成单例破坏，通过枚举实现单例模式，能够阻止所有可能被破坏的一个情况")])])]),t._v(" "),a("h3",{attrs:{id:"选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[t._v("#")]),t._v(" 选择")]),t._v(" "),a("p",[t._v("某java web应用以jar的方式部署在linux服务器上,应用的文件名为app.jar，为实现在后台运行jar包，且关闭终端窗口不会停止应用，以下关于启动应用正确的命令是（）（5分）")]),t._v(" "),a("p",[t._v("A.java -jar app.jar")]),t._v(" "),a("p",[t._v("B.java -jar app.jar &")]),t._v(" "),a("p",[t._v("C.nohup java -jar app.jar")]),t._v(" "),a("p",[t._v("D.nohup java -jar app.jar &")]),t._v(" "),a("p",[t._v("答：D")]),t._v(" "),a("h3",{attrs:{id:"git如何处理冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git如何处理冲突"}},[t._v("#")]),t._v(" Git如何处理冲突")]),t._v(" "),a("p",[t._v("当在Git中进行代码合并（merge）或者代码重置（reset）操作时，可能会出现冲突（conflict）。冲突通常发生在两个或多个分支中对同一代码文件的相同部分进行了不同的修改。为解决这些冲突，可以按照以下步骤进行处理：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("执行合并操作后，如果出现冲突，Git会在冲突文件中标记出冲突的部分，类似于以下形式：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Copy Code<<<<<<< HEAD\n// 当前分支的代码\n=======\n// 合并分支的代码\n>>>>>>> branch_name\n")])])])]),t._v(" "),a("li",[a("p",[t._v("打开包含冲突的文件，查看冲突部分的代码。根据你的需求，选择保留某个分支的代码或者进行修改。")])]),t._v(" "),a("li",[a("p",[t._v("根据需要，手动编辑冲突文件，将代码修改为想要的最终结果。你可以选择保留某个分支的代码，也可以将两者进行合并。")])]),t._v(" "),a("li",[a("p",[t._v("在完成编辑后，保存文件并使用"),a("code",[t._v("git add")]),t._v("命令将修改的文件标记为已解决冲突。")])]),t._v(" "),a("li",[a("p",[t._v("当所有冲突都解决完毕后，运行"),a("code",[t._v("git commit")]),t._v("命令来提交合并后的结果。")])])]),t._v(" "),a("p",[t._v("请注意，解决冲突是一个手动的过程，需要仔细审查冲突代码并确保最终结果正确。如果对解决冲突感到困惑，可以使用图形化")]),t._v(" "),a("h3",{attrs:{id:"maven生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maven生命周期"}},[t._v("#")]),t._v(" Maven生命周期")]),t._v(" "),a("p",[t._v('Maven是一个流行的项目管理工具，它使用约定优于配置的原则来管理项目的构建、发布和依赖管理。在Maven中，构建过程被划分为不同的阶段，这些阶段被称为"生命周期"。Maven生命周期包括三个标准的构建生命周期：clean、default（或build）和site。')]),t._v(" "),a("ol",[a("li",[a("p",[t._v("clean生命周期：")]),t._v(" "),a("ul",[a("li",[t._v("这个生命周期负责清理项目，删除之前构建生成的文件。")]),t._v(" "),a("li",[t._v("主要阶段包括pre-clean、clean和post-clean。")]),t._v(" "),a("li",[t._v("例如，可以使用"),a("code",[t._v("mvn clean")]),t._v("命令来执行clean生命周期，从而清理目标目录中的所有生成文件。")])])]),t._v(" "),a("li",[a("p",[t._v("default（或build）生命周期：")]),t._v(" "),a("ul",[a("li",[t._v("这是Maven的主要生命周期，负责构建项目、生成可部署的输出。")]),t._v(" "),a("li",[t._v("主要阶段包括validate、compile、test、package、verify、install和deploy。")]),t._v(" "),a("li",[t._v("例如，运行"),a("code",[t._v("mvn install")]),t._v("将执行default生命周期，它会编译代码、运行测试、打包以及将项目安装到本地仓库中。")])])]),t._v(" "),a("li",[a("p",[t._v("site生命周期：")]),t._v(" "),a("ul",[a("li",[t._v("这个生命周期负责生成项目站点文档。")]),t._v(" "),a("li",[t._v("主要阶段包括pre-site、site和post-site。")]),t._v(" "),a("li",[t._v("例如，可以使用"),a("code",[t._v("mvn site")]),t._v("命令来执行site生命周期，从而生成项目站点文档。")])])])]),t._v(" "),a("p",[t._v("通过使用这些生命周期，开发人员可以方便地执行项目构建、测试、清理和站点文档生成等操作。此外，Maven还允许用户扩展现有的生命周期并自定义构建过程，以满足特定项目的需求。")]),t._v(" "),a("h3",{attrs:{id:"常见的http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的http状态码"}},[t._v("#")]),t._v(" 常见的HTTP状态码：")]),t._v(" "),a("ul",[a("li",[t._v("200（OK）：表示请求成功，并返回请求的内容。")]),t._v(" "),a("li",[t._v("201（Created）：表示成功创建了新资源。")]),t._v(" "),a("li",[t._v("204（No Content）：表示服务器成功处理了请求，但没有返回任何内容。")]),t._v(" "),a("li",[t._v("400（Bad Request）：表示客户端发送了一个无效的请求，服务器无法理解。")]),t._v(" "),a("li",[t._v("401（Unauthorized）：表示请求要求身份验证，客户端未提供有效的身份验证凭据。")]),t._v(" "),a("li",[t._v("403（Forbidden）：表示服务器拒绝了请求访问资源的权限。")]),t._v(" "),a("li",[t._v("404（Not Found）：表示请求的资源不存在。")])]),t._v(" "),a("h3",{attrs:{id:"其他前沿技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他前沿技术"}},[t._v("#")]),t._v(" 其他前沿技术")]),t._v(" "),a("p",[t._v("关键点：")]),t._v(" "),a("ol",[a("li",[t._v("加分项，经常出现在笔试题中，目的是快速了解你的知识宽度并且希望团队中能吸收外界的知识")]),t._v(" "),a("li",[t._v("前沿的技术多数是业务创新，技术还是这几十年的积累")]),t._v(" "),a("li",[t._v("平时多看书 多学习")])]),t._v(" "),a("p",[t._v("答：")]),t._v(" "),a("ol",[a("li",[t._v("go语言（开发中间件，性能高）")]),t._v(" "),a("li",[t._v("物联网 IoT 嵌入式开发 树莓派小车 摄像头")]),t._v(" "),a("li",[t._v("低代码数据中台")]),t._v(" "),a("li",[t._v("jdk新特性，g1,zgc")]),t._v(" "),a("li",[t._v("区块链")]),t._v(" "),a("li",[t._v("容器化云原生与监控Prometheus + Grafana")]),t._v(" "),a("li",[t._v("java高性能游戏开发")]),t._v(" "),a("li",[t._v("DDD")]),t._v(" "),a("li",[t._v("响应式编程与异步网络编程")]),t._v(" "),a("li",[t._v("推荐系统")]),t._v(" "),a("li",[t._v("高并发系统架构 nginx+lua")]),t._v(" "),a("li",[t._v("chatgpt")]),t._v(" "),a("li",[t._v("量子计算 三进制实现 火箭回收技术 常温超导。。。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);